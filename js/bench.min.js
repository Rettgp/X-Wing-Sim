var ROCKIMG = "png/asteroid.jpg", DEBRISIMG = "png/debris.png", OBSTACLES = [], PX = [300, 500, 300, 500, 300, 500], PY = [250, 250, 400, 400, 550, 550], id = 0, MAXROCKS = 20, ROCKS = "m 104,7.69 c 23.68645,6.788715 36.31832,32.149873 60.26972,38.343289 22.5828,-0.437523 44.66378,16.533927 47.0145,39.571574 1.7824,16.350067 17.58775,28.375637 19.42957,45.557037 4.62232,16.14295 -3.063,34.92477 -18.79084,41.60093 -19.22063,12.27219 -23.97348,36.29633 -26.3595,57.32031 -11.7719,24.5963 -39.77913,35.95058 -65.41883,39.06789 -22.440402,-6.18345 -41.283826,10.88352 -61.241176,17.63584 -16.76045,5.45152 -33.113233,-7.47894 -38.530882,-22.80759 C 17.176622,247.87625 8.1464261,234.3236 4.0567839,218.40819 -1.7438181,195.92883 0.63774097,172.45364 4.606828,149.91669 6.1331829,124.03728 -5.926177,97.8685 3.3319943,72.406886 13.558278,40.415571 42.544211,19.463551 70.611984,3.7855478 81.374827,-1.0770344 94.740584,0.18536967 104,7.69 Z;m 74,7.61 c 7.753759,10.858255 23.659647,10.35574 34.20385,4.142701 9.03128,-4.0534436 19.21494,-1.9401962 28.52161,-5.0910648 10.92015,-2.154159 21.76622,-6.83507944 32.99101,-6.11838415 11.23296,2.00017155 13.66436,15.68926995 8.03436,24.21865495 -4.25358,10.809597 -16.56604,13.981888 -22.0997,23.735597 -7.53509,10.764739 -16.34633,24.503225 -31.127,24.468428 C 106.27572,72.548533 92.950913,91.727866 74.194294,88.144844 53.667818,82.293086 47.847944,55.910483 26.797923,50.69776 17.185894,50.719378 7.3060035,46.218346 3.1175923,37.113415 -2.8694247,26.930094 1.5394187,12.37286 13.030969,8.3968377 31.259956,1.4461437 53.349301,-4.6053888 71.463354,5.9051033 L 72.744026,6.7252875 74,7.61 Z;m 138.53,10.01 c 5.40626,19.802152 28.87853,18.911256 43.83272,26.459905 11.82989,11.386765 31.17305,17.630966 36.42803,33.950779 2.76543,19.624152 -17.99639,27.262955 -31.52942,35.447526 -20.56062,12.50938 -15.67798,41.22927 -31.85977,56.80308 -24.38514,18.96463 -57.192913,8.68832 -83.266997,-0.73605 C 52.576398,152.8614 28.041486,160.65945 11.190678,145.71557 -10.095375,129.9042 5.6556381,104.78632 23.486247,94.500663 41.288608,78.919071 45.241114,53.068768 63.439939,37.518779 81.853911,28.422426 88.100324,1.9971094 110.1991,-0.04794856 120.29646,0.14465668 131.88206,1.3566358 138.53,10.01 Z;m 72,0.6 c 14.992071,11.950867 27.356734,30.835777 49.0539,29.052927 22.54799,4.831198 11.23093,26.179505 10.66804,40.712681 1.29041,14.474071 22.7749,29.284722 9.00205,42.809722 -13.17549,7.38011 -25.84477,-13.04589 -39.91957,-2.56419 -15.021143,8.78534 -32.001234,23.92033 -50.515361,15.66927 C 35.997216,113.15938 16.127851,106.79857 2.1855691,94.383884 -1.9388697,76.898501 4.7466217,58.441952 0.18438048,40.73882 5.806309,19.339462 29.633649,12.251672 47.490222,3.9936009 55.293323,1.1777068 63.69706,-0.47426763 72,0.6 Z;m 92,3.55 c 13.35095,8.210786 30.00977,12.329972 45.29538,7.505902 14.45246,-1.6753573 32.50637,7.379137 33.3896,23.277674 -1.16698,9.619667 0.66069,19.077557 3.44222,28.233278 2.93882,9.916384 -2.53869,19.612559 -10.66892,25.090369 -8.67744,6.76962 -19.58996,11.562362 -25.09186,21.625407 C 122.19669,126.15279 96.416289,137.714 73.363004,129.22379 55.525476,120.88068 36.083637,114.55994 21.716964,100.47179 9.4202131,92.882312 -3.2620408,80.742356 -0.20756142,64.830795 2.5853742,21.920143 51.014336,-12.142371 92,3.55 Z;m 88,2.74 c 14.89109,15.864469 2.110781,42.020731 18.2397,57.227029 14.57912,9.438869 32.69928,18.10007 37.81781,36.219188 2.33267,12.551883 -4.98332,24.138463 -6.42804,36.406793 -5.71592,28.56302 -10.66403,58.58523 -28.18426,82.73461 C 98.325691,232.46357 84.01503,250.5467 63.256996,255.54156 49.213713,255.38464 40.958093,241.00245 40.126977,228.3937 37.959362,214.06608 35.463141,199.2234 26.80698,187.16906 15.184733,168.07566 -0.3727357,148.86285 0.4410242,125.2403 -0.82700464,113.95211 0.519549,101.14315 10.224845,93.729596 20.701913,83.99428 34.545443,79.406559 46.583369,72.066911 53.792512,51.74081 50.415478,26.382572 67.670781,10.611651 73.195023,5.947624 80.084933,-1.5559468 88,2.74 Z;m 70,4.85 c 42.89941,11.006942 88.6401,43.28005 90.08216,91.521071 4.22874,32.066519 -25.2289,52.095309 -32.77045,79.371239 3.64366,27.24689 -21.21346,30.54811 -41.778085,30.6541 -21.372431,4.1684 -46.503427,26.35806 -65.567673,4.77976 C 3.3962995,181.86073 43.409531,166.1283 54.968858,144.61803 66.594281,121.17951 24.886107,110.63839 36.541486,85.749591 36.788718,57.106427 1.9022922,43.643872 0.13121547,16.51475 11.628065,-9.165748 48.972608,0.09541228 70,4.85 Z;m 96,7.07 c 22.21936,-1.2748503 43.42137,10.625131 53.9089,30.272432 8.69197,19.332889 29.14037,36.901754 25.83445,59.413289 -7.95029,18.940209 -35.1644,24.545899 -28.70496,50.351999 -1.28406,21.10408 -27.33498,25.04775 -44.12503,26.41517 C 70.449544,167.8654 53.977736,135.08707 36.549008,110.65576 24.184423,92.2867 -4.119229,80.15006 -0.04494536,54.336438 2.2215288,30.459903 28.930966,27.401092 43.204026,13.183848 57.854593,-1.7401486 77.888088,-2.5989637 96,7.07 Z;m 22.83,10.14 c 36.381764,-7.5182231 75.332367,38.705706 106.91598,1.085856 31.19487,-26.154371 64.93771,4.569675 55.83452,40.417752 1.71024,59.468512 22.98507,123.885752 -7.35227,179.631272 -25.41621,20.31663 -58.99436,-0.0606 -86.820718,-3.84368 C 51.742324,218.90308 20.026502,183.63753 28.77643,141.9493 30.362924,107.69434 -3.8628827,84.245955 1.6335787,49.436507 3.2882936,34.68249 8.8431709,17.52641 22.83,10.14 Z;m 73.35,7.1 c 0.742924,12.833017 9.807449,30.172841 25.048008,26.528143 12.599832,-3.585974 26.310422,0.221493 34.295202,10.888176 7.73658,9.139649 12.54536,20.89596 23.4449,27.005137 11.57532,7.821056 24.58954,16.721939 27.19873,31.558114 5.2342,14.71903 7.51038,37.09103 -9.77698,44.67607 -13.80015,7.13307 -29.14257,-1.25293 -43.31614,3.72193 -15.15132,5.75741 -29.03507,-4.44612 -42.634543,-9.54349 -12.876028,-7.03738 -23.708035,3.30735 -33.940389,9.99189 -10.952691,7.628 -28.068654,3.85643 -32.543364,-9.34957 C 17.241811,131.38836 19.162764,117.59989 9.6636371,108.86755 0.15964236,94.112038 1.7097107,75.919244 1.8103437,59.24479 -0.3116275,44.692966 -3.0568617,24.567133 12.428846,16.257076 26.141799,8.6801814 39.824977,-3.1474859 56.644493,-0.08206564 62.578526,1.0293171 69.0122,2.5858262 73.35,7.1 Z;m 102,0.21 c 23.61326,-4.7742217 51.16121,11.73593 53.54307,36.69987 21.13119,18.005513 53.25206,4.662235 74.55944,23.311004 22.65735,16.804037 21.00815,47.485046 21.62736,72.671856 0.43306,30.01726 26.25312,58.22 12.89012,88.29914 -18.75656,25.83353 -53.60122,25.96862 -81.62681,34.04374 C 135.5408,265.27781 81.577228,270.66209 38.232192,244.33067 6.9293937,226.26954 -10.189513,184.12625 6.784637,150.71849 17.122164,118.96541 34.809642,84.588051 21.694586,50.963708 14.927939,28.153412 35.951375,8.3332141 57.118388,5.0589238 71.860142,2.3204637 86.957794,-0.28888751 102,0.21 Z;m 89.32,24.66 c 7.9625,5.588282 18.11069,11.432752 19.47608,22.040464 0.0713,11.380458 -5.26314,22.564982 -12.989602,30.768455 -7.782536,8.131695 -21.20007,14.120957 -31.758821,7.709676 C 57.730916,81.320978 51.834067,76.247376 44.226347,75.243966 32.970122,71.801274 22.789116,63.602609 18.590866,52.405008 13.675682,45.204443 1.8028657,40.50528 4.1280348,30.087205 6.0641439,21.282435 15.670301,17.787489 23.781595,18.047675 32.363214,18.899333 39.762362,14.27495 47.323866,11.057853 54.036138,10.011348 60.080345,6.7869695 66.94239,6.5239514 73.827745,6.2832858 79.992573,10.600531 83.027632,16.625433 84.923397,19.450903 86.872053,22.276379 89.32,24.66 Z".split(";"), 
DEBRISCLOUD = "M 304.95954,64.376304 C 277.49277,82.276003 241.66827,69.454477 211.41731,79.85341 182.94785,87.482512 151.97474,94.154867 123.11879,83.943747 95.48938,75.99336 66.651738,70.398968 37.484081,73.398842 18.970572,78.061107 -14.137683,61.027612 8.1795392,44.831273 35.781402,29.89724 66.869667,20.316467 97.592631,11.657888 162.57714,-6.6090419 236.65056,-0.9763699 294.31725,32.566319 c 15.15677,5.196271 26.61381,20.160102 10.64229,31.809985 z;m 342.60305,45.386961 c -7.29191,22.348261 -9.66643,46.973239 -30.70022,65.744569 -9.56291,8.46772 -25.11789,12.92218 -40.59786,11.98244 C 220.12739,123.1282 171.21545,103.90824 119.65346,111.45169 79.932518,115.72011 39.481042,104.62899 9.8413502,86.727358 -3.629765,72.850491 5.3001906,54.56609 20.913419,43.453167 39.272225,29.821382 66.622062,19.233063 94.387958,22.827131 144.87655,25.920022 198.72655,22.705697 242.49463,3.6247875 c 38.9784,-6.1384604 84.97751,7.9784805 98.78833,34.5910935 0.92712,2.352947 1.12743,4.748359 1.32009,7.17108 z M 98.348381,22.576575 l 0.55403,-0.173574 -0.55403,0.173574 z m 24.424669,1.147571 0.55403,-0.173574 -0.55403,0.173574 z m 28.00812,0.08717 0.55403,-0.173574 -0.55403,0.173574 z m 22.30992,-1.125739 0.55404,-0.173574 -0.55404,0.173574 z m 2.17138,-0.213036 0.55402,-0.173574 -0.55402,0.173574 z m 0.62445,-0.238469 0.55403,-0.173575 -0.55403,0.173575 z m 1.54695,0.02544 0.55403,-0.173574 -0.55403,0.173574 z m 14.92991,-3.236843 0.55404,-0.173569 -0.55404,0.173569 z m 6.37929,-1.511898 0.55401,-0.173565 -0.55401,0.173565 z M 237.86298,5.344172 238.417,5.1706024 237.86298,5.344172 Z;M 8.6920869,121.16887 C -4.1927589,98.966912 0.90898033,72.55157 8.7041909,49.662049 14.372638,35.476035 16.326584,18.502785 30.338869,8.681508 45.825701,-3.4131758 72.656091,-5.7614358 86.844372,9.2566296 97.590533,22.345836 117.873,25.584085 134.01661,19.956304 c 11.08514,-3.247312 20.45186,-9.79416 30.54262,-14.8525666 14.11297,-5.1505053 26.8782,7.2472106 29.23156,19.2600866 4.21484,11.498886 -1.06379,24.192355 6.41451,34.874819 7.62632,15.290163 20.05159,31.543452 14.34819,49.165577 -3.03505,13.5232 -12.4538,26.30757 -27.13751,30.91577 -13.91592,5.06137 -29.79779,3.4131 -43.10475,-2.40379 -17.36813,-4.34952 -33.14526,6.4165 -46.726747,14.86036 -14.840207,9.32885 -35.077152,16.24822 -52.087702,7.44298 -16.955592,-7.9194 -28.150179,-23.00607 -36.8043201,-38.05067 z;m 91.923226,127.78997 c 5.513731,11.3981 10.972854,25.51358 4.351499,37.62239 -7.54852,11.28418 -25.767729,9.59278 -33.334473,-0.81802 C 55.622193,157.05053 54.513378,146.07813 49.726705,137.18449 41.653771,125.15429 24.823594,120.63855 20.32487,105.94528 19.390228,97.039845 28.352819,92.306256 34.653598,88.093208 45.592211,81.790657 47.006891,67.243399 43.146197,56.335555 40.153404,45.98415 32.61561,38.046886 25.958609,29.920187 21.014609,18.807726 32.47462,6.8789866 43.555566,7.023595 52.328844,7.0126986 62.046398,10.741411 69.897324,4.9841051 78.99616,-0.10794813 86.373887,-10.091033 97.644393,-9.976946 c 13.469977,1.6211714 21.001927,14.9780158 24.779587,26.68591 4.09484,12.671839 4.09866,26.180141 7.02758,39.110388 1.46634,10.045348 -1.9205,22.178303 -12.13367,26.284736 -14.87769,7.426397 -27.334214,22.427262 -27.509921,39.622562 0.182575,2.25508 -0.171998,4.82307 2.115257,6.06332 z m -4.240826,-5.7236 c -2.796123,0.46537 0.642581,1.50828 0.72337,0.29222 l -0.72337,-0.29222 z;m 53.39,17 c 8.857468,18.680274 35.638969,29.655166 53.26768,16.552682 9.4851,-13.02633 29.26144,-21.688691 42.23907,-8.10085 13.3583,12.578881 11.1836,35.187026 -1.51894,47.443912 -9.14919,9.666576 -13.28816,23.915425 -6.58545,36.100486 5.44133,14.24364 14.35173,28.50153 11.97365,44.38173 5.07893,15.66617 -15.68191,32.3177 -29.44475,22.33028 C 110.6022,169.06652 93.829496,166.42587 87.217235,151.92188 78.379044,137.89166 83.963593,119.73027 74.402737,106.12243 65.827752,92.01835 48.203264,82.689295 31.783423,87.523944 18.33036,88.28596 11.389874,73.121866 13.520578,61.502437 15.481591,47.172531 -2.1632982,36.550726 4.0544615,21.982665 9.0812944,2.1611127 40.629477,-6.3421749 51.54838,12.953159 52.291692,14.237963 52.912978,15.594107 53.39,17 Z;m 53,28.01 c 17.264267,-0.215909 32.661816,-13.369626 50.21866,-9.082602 7.22749,2.514502 14.01831,10.390153 22.24021,5.672311 11.30763,-5.596745 17.32705,-20.2041726 30.88327,-21.3792418 11.63112,0.9015139 18.09339,12.3581728 24.16953,20.9111348 8.18578,10.112096 3.95736,25.007478 -5.15698,32.980017 -6.99113,8.003235 -17.51071,9.445625 -26.92735,12.360189 -14.16502,8.412284 -13.3072,30.629892 -29.93155,36.224342 -14.8311,-2.26076 -20.970578,-21.014783 -36.475878,-21.444488 -17.53188,0.713857 -29.193332,17.645528 -32.013793,33.593988 -1.961796,8.81551 0.354193,19.03046 -6.246545,26.36422 -5.430599,7.83687 -17.165422,10.68299 -24.881498,4.42654 C 4.9530851,138.95257 4.5896229,118.11427 12.893511,104.63532 19.137393,89.506979 26.037539,72.290072 19.933499,55.997969 17.518418,48.114476 9.4615578,44.674169 5.3905151,37.988065 -0.63100116,29.32318 -1.2186853,14.692506 9.3842495,9.2505971 18.552531,3.804272 28.646946,10.231493 35.097662,16.846668 40.328121,21.512442 45.748065,26.928689 53,28.01 Z;m 168.96,92 c -18.50703,19.38046 -3.01703,54.1903 23.95617,52.99453 19.19731,4.43402 27.75181,29.62521 13.24594,43.78213 -13.678,13.91986 -28.60684,33.36373 -50.94777,25.56722 C 132.89847,209.53592 117.2191,188.40609 92.738599,190.39623 73.511926,192.25447 46.474831,188.69238 45.221174,164.12611 47.858658,139.29003 19.45257,136.80785 5.4202307,126.69731 -4.7122326,101.49779 26.120786,90.455869 44.41309,85.144865 71.708322,72.249234 58.921776,45.204494 56.456307,23.773578 65.305726,5.2763567 90.435503,10.848472 106.49066,2.9345145 133.66834,-7.4060996 133.72447,31.035544 147.59229,43.624972 161.10873,55.504323 178.34631,72.281842 168.96,92 Z;m 183.99,21 c -5.56101,14.774238 -10.2477,33.563429 0.63641,47.120851 9.17136,8.95922 24.20153,3.674604 33.84782,12.312651 17.7844,11.961888 26.62799,33.887568 27.46098,54.728648 -0.88728,13.54567 -15.82829,20.54396 -28.00934,18.62906 -12.52223,-0.58085 -23.82537,-6.85871 -33.46056,-14.40887 -23.36253,-12.84254 -51.25219,-5.20342 -74.25967,4.51817 -14.904768,6.77899 -30.771017,14.6877 -47.650424,11.46214 C 50.281769,153.28514 41.539746,142.6497 29.150367,140.78095 18.214439,137.6825 4.4568112,135.09631 -0.33046599,123.26948 -2.0525657,107.0685 14.467061,96.197332 28.643924,93.886155 c 19.97782,-4.24195 40.661561,2.422228 60.514619,-2.233597 20.492967,-8.00363 29.015007,-30.475583 35.045477,-49.885401 2.45271,-13.03661 8.61197,-25.547868 19.48849,-33.5363126 9.51432,-8.26542468 25.89966,-12.0039348 35.33904,-1.6198311 C 182.64496,10.400522 184.68305,15.755864 183.99,21 Z;m 167,10.03 c 8.61332,11.733364 24.83887,11.186348 37.52164,7.864768 11.43633,-2.298219 24.04442,-5.736899 35.00002,0.08332 12.67268,14.243207 4.59387,35.94259 -7.70045,47.589028 -7.26252,9.015314 -19.05552,9.440288 -28.61213,14.415579 -15.38504,7.593175 -28.19142,23.270189 -46.67795,22.424269 -12.57735,-0.37299 -21.05597,-12.961046 -33.9889,-11.75122 -19.17926,-0.06631 -35.334555,22.20865 -26.387033,40.00049 4.126283,9.2659 17.003503,15.67229 13.998643,27.27996 -6.45663,11.01615 -21.675732,10.64774 -32.92803,11.22868 -10.935349,-0.9392 -16.018548,16.25838 -29.314738,13.65383 -21.53893,0.66305 -36.824707,-22.96858 -31.944453,-42.86518 2.364129,-13.52708 12.077562,-28.58683 3.573383,-41.761378 C 12.106522,91.199521 3.1288265,85.121422 1.7167286,73.903193 -4.6401612,48.365802 12.28966,16.672837 39.900312,13.991916 49.325716,12.840211 57.436875,19.235805 66.624607,20.478449 87.461898,25.968426 111.74653,22.670227 127.35394,6.7895446 138.74069,-3.5031337 156.70439,-0.14037568 167,10.03 Z".split(";");
function loadrock($s$$, $str$$) {
  var $i$$, $j$$, $coord$$ = [], $ob_ok$$;
  id = 0;
  if ("undefined" == typeof TEAMS[1].rocks || -1 == TEAMS[1].rocks[2]) {
    TEAMS[1].rocks = [0, 1, 2];
  }
  if ("undefined" == typeof TEAMS[2].rocks || -1 == TEAMS[2].rocks[2]) {
    TEAMS[2].rocks = [3, 4, 5];
  }
  if ("" != $str$$) {
    for ($j$$ = $str$$.split(";"), $i$$ = 0;6 > $i$$;$i$$++) {
      $ob_ok$$ = $j$$[$i$$].split(","), $coord$$[$i$$] = [parseInt($ob_ok$$[0], 10), parseInt($ob_ok$$[1], 10), parseInt($ob_ok$$[2], 10)], 4 == $ob_ok$$.length && (3 > $i$$ ? TEAMS[1].rocks[$i$$] = parseInt($ob_ok$$[3], 10) : TEAMS[2].rocks[$i$$ - 3] = parseInt($ob_ok$$[3], 10));
    }
  } else {
    for ($i$$ = 0;6 > $i$$;$i$$++) {
      do {
        for ($ob_ok$$ = !0, $coord$$[$i$$] = [400 * Math.random() + 300 - PX[$i$$], 400 * Math.random() + 300 - PY[$i$$], 45 * Math.random()], $j$$ = 0;$j$$ < $i$$;$j$$++) {
          var $dx$$ = $coord$$[$i$$][0] - $coord$$[$j$$][0] + PX[$i$$] - PX[$j$$], $dy$$ = $coord$$[$i$$][0] - $coord$$[$j$$][0] + PY[$i$$] - PY[$j$$];
          if (15000 > $dx$$ * $dx$$ + $dy$$ * $dy$$) {
            $ob_ok$$ = !1;
            break;
          }
        }
      } while (!$ob_ok$$);
    }
  }
  for ($i$$ = 0;3 > $i$$;$i$$++) {
    OBSTACLES[$i$$] = new Rock(TEAMS[1].rocks[$i$$], $coord$$[$i$$], TEAMS[1].rocks[$i$$] >= MAXROCKS, 1, $i$$), OBSTACLES[$i$$ + 3] = new Rock(TEAMS[2].rocks[$i$$], $coord$$[$i$$ + 3], TEAMS[2].rocks[$i$$] >= MAXROCKS, 2, $i$$);
  }
}
function saverock() {
  if (0 == OBSTACLES.length) {
    return "";
  }
  for (var $str$$ = OBSTACLES[0].toASCII(), $i$$ = 1;6 > $i$$;$i$$++) {
    $str$$ += ";" + OBSTACLES[$i$$].toASCII();
  }
  return $str$$;
}
function Rock($frag$$, $coord$$, $k$$, $i$jscomp$6_n$$) {
  $i$jscomp$6_n$$ = $k$$ - 1 + $i$jscomp$6_n$$;
  this.o = [];
  this.type = $frag$$ >= MAXROCKS ? DEBRIS : ROCK;
  this.id = $frag$$;
  this.name = ($frag$$ >= MAXROCKS ? "Debris #" : "Asteroid #") + $i$jscomp$6_n$$;
  this.arraypts = [];
  this.dragged = !1;
  this.tx = $coord$$[0];
  this.ty = $coord$$[1];
  this.alpha = $coord$$[2];
  PATTERN = s.image($frag$$ >= MAXROCKS ? DEBRISIMG : ROCKIMG, 0, 0, 256, 256).pattern(0, 0, 256, 256);
  var $ASTER_b$$ = $frag$$ >= MAXROCKS ? DEBRISCLOUD : ROCKS;
  this.inside = s.path($ASTER_b$$[$frag$$ % MAXROCKS]).attr({fill:PATTERN, strokeWidth:0, stroke:"#888", "class":"ASTEROID" + $k$$});
  this.outline = s.path($ASTER_b$$[$frag$$ % MAXROCKS]).attr({fill:"rgba(0,0,0,0)", strokeWidth:2, stroke:"#888"});
  this.g = s.group(this.outline, this.inside);
  for ($k$$ = 0;$k$$ < this.outline.getTotalLength();$k$$ += 5) {
    this.arraypts.push(this.outline.getPointAtLength($k$$));
  }
  0 == REPLAY.length && this.addDrag();
  this.path = "";
  this.outlinepts = [];
  this.g.hover(function() {
    this.outline.attr({strokeWidth:6, stroke:"#F00"});
  }.bind(this), function() {
    this.outline.attr({strokeWidth:2, stroke:"#888"});
  }.bind(this));
  this.g.addClass("unit");
  $ASTER_b$$ = this.g.getBBox();
  this.o = [];
  var $scale$$ = 0.27;
  $frag$$ >= MAXROCKS && ($scale$$ = 0.4);
  $frag$$ %= MAXROCKS;
  for ($k$$ = 1;4 > $k$$;$k$$++) {
    this.o[$k$$] = s.ellipse($ASTER_b$$.x + $ASTER_b$$.width / 2, $ASTER_b$$.y + $ASTER_b$$.height / 2, 200 / $scale$$ / 2 * $k$$ + $ASTER_b$$.width / 2, 200 / $scale$$ / 2 * $k$$ + $ASTER_b$$.height / 2).attr({pointerEvents:"none", display:"none", fill:WHITE, opacity:0.3, strokeWidth:2});
  }
  this.m = (new Snap.Matrix).translate($coord$$[0] + PX[$i$jscomp$6_n$$], $coord$$[1] + PY[$i$jscomp$6_n$$]).rotate($coord$$[2], 0, 0).scale($scale$$, $scale$$);
  this.getOutlineString();
  this.show();
}
Rock.prototype = {addDrag:function $Rock$$addDrag$() {
  this.g.drag(this.dragmove.bind(this), this.dragstart.bind(this), this.dragstop.bind(this));
}, unDrag:function $Rock$$unDrag$() {
  this.g.undrag();
}, getBall:function $Rock$$getBall$() {
  var $b$$ = this.g.getBBox();
  return {x:$b$$.x + $b$$.width / 2, y:$b$$.y + $b$$.height / 2, diam:Math.max($b$$.width / 2, $b$$.height / 2)};
}, toASCII:function $Rock$$toASCII$() {
  return Math.floor(this.tx) + "," + Math.floor(this.ty) + "," + Math.floor(this.alpha) + "," + this.id;
}, getrangeallunits:function $Rock$$getrangeallunits$() {
  return Unit.prototype.getrangeallunits.call(this);
}, getrange:function $Rock$$getrange$($sh$$) {
  return Unit.prototype.getrange.call(this, $sh$$);
}, gethitrangeallunits:function $Rock$$gethitrangeallunits$() {
  return [[], [], [], []];
}, togglehitsector:function $Rock$$togglehitsector$() {
}, togglerange:function $Rock$$togglerange$() {
}, getOutlinePoints:function $Rock$$getOutlinePoints$() {
  var $k$$;
  this.outlinepts = [];
  for ($k$$ = 0;$k$$ < this.arraypts.length;$k$$ += 5) {
    this.outlinepts.push(transformPoint(this.m, this.arraypts[$k$$]));
  }
  return this.outlinepts;
}, getBox:function $Rock$$getBox$() {
}, getOutline:function $Rock$$getOutline$() {
  var $out$$ = s.path(this.path);
  $out$$.appendTo(s);
  return $out$$;
}, getOutlineString:function $Rock$$getOutlineString$() {
  var $k$$;
  this.getOutlinePoints();
  this.path = "M ";
  for ($k$$ = 0;$k$$ < this.outlinepts.length;$k$$++) {
    var $p$$ = this.outlinepts[$k$$];
    this.path += $p$$.x + " " + $p$$.y + " ";
    0 == $k$$ && (this.path += "L ");
  }
  this.path += "Z";
  return {s:this.path, p:this.outlinepts};
}, turn:function $Rock$$turn$($n$$) {
  this.m.add(MR($n$$, 0, 0));
  this.alpha += $n$$;
  this.show();
}, unselect:function $Rock$$unselect$() {
}, select:function $Rock$$select$() {
  if (phase == SETUP_PHASE) {
    var $old$$ = activeunit;
    activeunit = this;
    $old$$.unselect();
    this.showpanel();
  }
}, showpanel:function $Rock$$showpanel$() {
  Unit.prototype.showpanel.call(this);
}, dragmove:function $Rock$$dragmove$($dx$$, $dy$$, $x$$, $y$$) {
  Unit.prototype.dragmove.call(this, $dx$$, $dy$$, $x$$, $y$$);
}, dragstart:function $Rock$$dragstart$($x$$, $y$$, $a$$) {
  var $old$$ = activeunit;
  activeunit = this;
  $old$$.unselect();
  Unit.prototype.dragstart.call(this, $x$$, $y$$, $a$$);
  this.dragshow();
}, dragshow:function $Rock$$dragshow$() {
  for (var $k$$ = 1;4 > $k$$;$k$$++) {
    this.o[$k$$].transform(this.dragMatrix).attr({display:"block"}).appendTo(VIEWPORT);
  }
  this.g.transform(this.dragMatrix);
  this.g.appendTo(VIEWPORT);
}, showhitsector:function $Rock$$showhitsector$() {
}, dragstop:function $Rock$$dragstop$($a$$) {
  for (var $k$$ = 1;4 > $k$$;$k$$++) {
    this.o[$k$$].attr({display:"none"});
  }
  Unit.prototype.dragstop.call(this, $a$$);
}, show:function $Rock$$show$() {
  this.g.transform(this.m);
  this.g.appendTo(VIEWPORT);
}, setclickhandler:function $Rock$$setclickhandler$($f$$) {
  this.g.unmousedown();
  this.g.mousedown($f$$);
}, setdefaultclickhandler:function $Rock$$setdefaultclickhandler$() {
  this.g.unmousedown();
  this.g.mousedown(function() {
    this.select();
  }.bind(this));
}};
var V1 = "v1", V2 = "v2", CURRENT_DECK = V2;
function Critical($sh$$, $i$$) {
  this.lethal = !1;
  $.extend(this, CRITICAL_DECK[$i$$]);
  this.no = this.name + $i$$;
  $sh$$.criticals.push(this);
  this.isactive = !1;
  this.unit = $sh$$;
}
Critical.prototype = {toString:function $Critical$$toString$() {
  var $b$$;
  if (!this.isactive) {
    return "";
  }
  var $n$$ = this.name;
  "undefined" != typeof CRIT_translation[this.name].name && ($n$$ = CRIT_translation[this.name].name);
  $b$$ = "<td class='tdstat'>" + $n$$ + "</td>";
  $n$$ = "";
  "undefined" != typeof CRIT_translation[this.name].text && ($n$$ = formatstring(CRIT_translation[this.name].text));
  d = "<td class='tooltip outoverflow'>" + $n$$ + "</td>";
  return 1 == this.unit.team ? "<tr >" + $b$$ + "<td><code class='Criticalupg upgrades'></code></td>" + d + "</tr>" : "<tr ><td><code class='Criticalupg upgrades'></code></td>" + $b$$ + d + "</tr>";
}, log:function $Critical$$log$() {
  this.unit.log("Critical: %0", this.name);
  var $n$$;
  "undefined" != typeof CRIT_translation[this.name].text ? ($n$$ = formatstring(CRIT_translation[this.name].text), log("<ul><li>" + $n$$ + "</li></ul>")) : log("no translation:" + this.name);
}};
var CRITICAL_DECK = [{type:"ship", count:2, name:"Structural Damage", version:[V2], faceup:function() {
  this.log();
  this.isactive = !0;
  this.unit.wrap_after("getagility", this, function($a$$) {
    return 0 < $a$$ ? $a$$ - 1 : $a$$;
  });
}, facedown:function() {
  this.isactive && (this.unit.getagility.unwrap(this), this.unit.log("%0 repaired", this.name), this.unit.showstats());
  this.isactive = !1;
}, action:function($n$$) {
  var $roll$$ = this.unit.rollattackdie(1, this, "hit")[0];
  "hit" == $roll$$ || "critical" == $roll$$ ? this.facedown() : this.unit.log("%0 not repaired", this.name);
  this.unit.endaction($n$$, "CRITICAL");
}}, {type:"ship", count:2, name:"Structural Damage (original)", version:[V1], faceup:function() {
  this.log();
  this.isactive = !0;
  this.unit.wrap_after("getagility", this, function($a$$) {
    return 0 < $a$$ ? $a$$ - 1 : $a$$;
  });
}, facedown:function() {
  this.isactive && (this.unit.getagility.unwrap(this), this.unit.log("%0 repaired", this.name), this.unit.showstats());
  this.isactive = !1;
}, action:function($n$$) {
  "hit" == this.unit.rollattackdie(1, this, "hit")[0] ? this.facedown() : this.unit.log("%0 not repaired", this.name);
  this.unit.endaction($n$$, "CRITICAL");
}}, {type:"ship", name:"Damaged Engine", version:[V1, V2], count:2, faceup:function() {
  this.log();
  this.isactive = !0;
  var $save$$ = [];
  this.unit.wrap_after("getdial", this, function($a$$) {
    if (0 == $save$$.length) {
      for (var $i$$ = 0;$i$$ < $a$$.length;$i$$++) {
        $save$$[$i$$] = {move:$a$$[$i$$].move, difficulty:$a$$[$i$$].difficulty}, $a$$[$i$$].move.match(/TL\d|TR\d/) && ($save$$[$i$$].difficulty = "RED");
      }
    }
    return $save$$;
  });
}, facedown:function() {
  this.isactive && this.unit.getdial.unwrap(this);
  this.isactive = !1;
}}, {type:"ship", name:"Console Fire", count:2, version:[V1, V2], lethal:!0, faceup:function() {
  var $self$$ = this;
  this.log();
  this.isactive = !0;
  this.unit.wrap_before("begincombatphase", this, function() {
    "hit" == this.rollattackdie(1, $self$$, "blank")[0] && (this.log("+1 %HIT% [%0]", this.name), this.resolvehit(1), this.checkdead());
  });
}, action:function($n$$) {
  this.facedown();
  this.unit.endaction($n$$, "CRITICAL");
}, facedown:function() {
  this.isactive && (this.unit.log("%0 repaired", this.name), this.unit.begincombatphase.unwrap(this));
  this.isactive = !1;
}}, {type:"ship", count:2, name:"Weapon Malfunction", version:[V1], faceup:function() {
  this.log();
  this.isactive = !0;
  for (var $i$$ = 0;$i$$ < this.unit.weapons.length && !this.unit.weapons[$i$$].isprimary;$i$$++) {
  }
  this.w = $i$$;
  this.unit.weapons[$i$$].wrap_after("getattack", this, function($a$$) {
    return 0 < $a$$ ? $a$$ - 1 : $a$$;
  });
}, facedown:function() {
  this.isactive && (this.unit.weapons[this.w].getattack.unwrap(this), this.unit.log("%0 repaired", this.unit.weapons[this.w].name), this.isactive = !1);
}, action:function($n$$) {
  var $roll$$ = this.unit.rollattackdie(1, this, "hit")[0];
  "critical" == $roll$$ || "hit" == $roll$$ ? this.facedown() : this.unit.log("%0 not repaired", this.name);
  this.unit.endaction($n$$, "CRITICAL");
}}, {type:"ship", count:2, name:"Damaged Sensor Array (original)", version:[V1], faceup:function() {
  this.log();
  this.isactive = !0;
  this.unit.wrap_after("getactionbarlist", this, function() {
    return [];
  });
}, facedown:function() {
  this.isactive && (this.unit.getactionbarlist.unwrap(this), this.unit.log("%0 repaired", this.name), this.isactive = !1);
}, action:function($n$$) {
  "hit" == this.unit.rollattackdie(1, this, "hit")[0] ? this.facedown() : this.unit.log("%0 not repaired", this.name);
  this.unit.endaction($n$$, "CRITICAL");
}}, {type:"ship", count:2, name:"Damaged Sensor Array", version:[V2], faceup:function() {
  this.log();
  this.isactive = !0;
  this.unit.wrap_after("getactionbarlist", this, function() {
    return [];
  });
}, facedown:function() {
  this.isactive && (this.unit.getactionbarlist.unwrap(this), this.unit.log("%0 repaired", this.name), this.isactive = !1);
}, action:function($n$$) {
  var $roll$$ = this.unit.rollattackdie(1, this, "hit")[0];
  "hit" == $roll$$ || "critical" == $roll$$ ? this.facedown() : this.unit.log("%0 not repaired", this.name);
  this.unit.endaction($n$$, "CRITICAL");
}}, {name:"Minor Explosion", count:2, type:"ship", lethal:!0, version:[V1], faceup:function() {
  this.log();
  var $roll$$ = this.unit.rollattackdie(1, this, "blank")[0];
  this.isactive = !1;
  "hit" == $roll$$ && this.unit.removehull(1);
}, facedown:function() {
  this.isactive = !1;
}}, {name:"Thrust Control Fire", count:2, version:[V1, V2], type:"ship", faceup:function() {
  this.log();
  this.unit.addstress();
  this.isactive = !1;
}, facedown:function() {
  this.isactive = !1;
}}, {name:"Direct Hit!", count:7, version:[V1, V2], type:"ship", lethal:!0, faceup:function() {
  this.log();
  this.unit.removehull(1);
}, facedown:function() {
  this.isactive = !1;
  this.unit.hull++;
}}, {name:"Munitions Failure", count:2, type:"ship", version:[V1], lethal:!0, faceup:function() {
  this.log();
  var $m$$ = [];
  for (i = 0;i < this.unit.weapons.length;i++) {
    this.unit.weapons[i].issecondary && $m$$.push(this.unit.weapons[i]);
  }
  this.isactive = !1;
  if (0 != $m$$.length) {
    var $w$$ = this.unit.rand($m$$.length);
    this.wp = $m$$[$w$$];
    this.wp.isactive = !1;
    this.unit.log(this.wp.name + " not functioning anymore");
    this.unit.show();
  }
}, facedown:function() {
  this.isactive = !1;
}}, {name:"Minor Hull Breach", count:2, type:"ship", lethal:!0, version:[V1], faceup:function() {
  var $self$$ = this;
  this.log();
  this.isactive = !0;
  this.hd = this.unit.handledifficulty;
  this.unit.wrap_after("handledifficulty", this, function($d$$) {
    "hit" == this.rollattackdie(1, $self$$, "blank")[0] && "RED" == $d$$ && (this.log("+1 %HIT% [%0]", $self$$.name), this.removehull(1));
  });
}, facedown:function() {
  this.isactive && (this.unit.handledifficulty.unwrap(this), this.isactive = !1, this.unit.log("%0 repaired", this.name));
}}, {name:"Damaged Cockpit", count:2, type:"pilot", version:[V1, V2], faceup:function() {
  var $self$$ = this;
  this.log();
  this.isactive = !0;
  this.unit.wrap_before("endround", this, function() {
    this.wrap_after("getskill", $self$$, function() {
      return 0;
    });
    filltabskill();
    this.showstats();
  }.bind(this.unit));
}, facedown:function() {
  this.isactive && (this.isactive = !1, this.unit.getskill.unwrap(this), filltabskill(), this.unit.showstats());
}}, {name:"Blinded Pilot", count:2, version:[V1, V2], type:"pilot", faceup:function() {
  var $self$$ = this;
  this.log();
  this.isactive = !0;
  this.unit.wrap_after("getattackstrength", this, function($w$$, $t$$, $a$$) {
    this.getattackstrength.unwrap($self$$);
    $self$$.isactive = !1;
    return 0;
  });
}, facedown:function() {
  this.isactive = !1;
}}, {name:"Injured Pilot", count:2, type:"pilot", lethal:!0, version:[V1], faceup:function() {
  this.log();
  var $i$$;
  this.isactive = !0;
  for ($i$$ = 0;$i$$ < this.unit.upgrades.length;$i$$++) {
    var $upg$$ = this.unit.upgrades[$i$$];
    $upg$$.type == ELITE && $upg$$.desactivate();
  }
  this.unit.desactivate();
  this.unit.show();
}, facedown:function() {
  if (this.isactive) {
    var $i$$;
    "undefined" != typeof this.unit.init && this.unit.init();
    for ($i$$ = 0;$i$$ < this.unit.upgrades.length;$i$$++) {
      var $upg$$ = this.unit.upgrades[$i$$];
      $upg$$.type == ELITE && ($upg$$.isactive = !0, "undefined" != typeof $upg$$.init && $upg$$.init(this.unit));
    }
    this.unit.show();
  }
  this.isactive = !1;
}}, {name:"Stunned Pilot", count:2, version:[V1, V2], type:"pilot", lethal:!0, faceup:function() {
  var $self$$ = this;
  this.log();
  this.isactive = !0;
  this.unit.wrap_before("resolvecollision", this, function() {
    this.log("+1 %HIT% [%0]", $self$$.name);
    this.resolvehit(1);
  });
  this.unit.wrap_before("resolveocollision", this, function() {
    this.log("+1 %HIT% [%0]", $self$$.name);
    this.resolvehit(1);
  });
}, facedown:function() {
  this.isactive && (this.unit.unwrap("resolvecollision", this), this.unit.unwrap("resolveocollision", this), this.unit.log("no longer stunned"));
  this.isactive = !1;
}}, {name:"Loose Stabilizer", count:2, type:"ship", faceup:function() {
  this.log();
  this.isactive = !0;
  this.unit.wrap_after("handledifficulty", this, function($d$$) {
    "WHITE" == $d$$ && this.addstress();
  });
}, facedown:function() {
  this.isactive && (this.unit.handledifficulty.unwrap(this), this.unit.log("%0 repaired", this.name));
  this.isactive = !1;
}, action:function($n$$) {
  this.facedown();
  this.unit.endaction($n$$, "CRITICAL");
}, version:[V2]}, {name:"Major Explosion", count:2, type:"ship", lethal:!0, faceup:function() {
  this.log();
  "hit" == this.unit.rollattackdie(1, this, "blank")[0] && (this.unit.log("+1 %CRIT% [%0]", this.name), this.unit.resolvecritical(1));
  this.isactive = !1;
}, facedown:function() {
}, version:[V2]}, {name:"Major Hull Breach", count:2, type:"ship", lethal:!0, version:[V2], faceup:function() {
  var $myround$$ = round;
  this.log();
  this.isactive = !0;
  this.unit.wrap_after("deal", this, function($crit$$, $face$$, $p$$) {
    if (round == $myround$$) {
      return $p$$;
    }
    var $dd$$ = $.Deferred();
    $p$$.done(function($c$$) {
      $c$$.face = FACEUP;
      $dd$$.resolve($c$$);
    });
    return $dd$$.promise();
  });
}, facedown:function() {
  this.isactive && this.unit.deal.unwrap(this);
  this.isactive = !1;
}, action:function($n$$) {
  this.facedown();
  this.unit.endaction($n$$, "CRITICAL");
}}, {name:"Shaken Pilot", count:2, type:"pilot", faceup:function() {
  this.log();
  this.isactive = !0;
  var $save$$ = [], $self$$ = this;
  this.unit.wrap_after("getdial", this, function($a$$) {
    if (0 == $save$$.length) {
      for (var $i$$ = 0;$i$$ < $a$$.length;$i$$++) {
        $a$$[$i$$].move.match(/F1|F2|F3|F4|F5/) || $save$$.push({move:$a$$[$i$$].move, difficulty:$a$$[$i$$].difficulty});
      }
    }
    return $save$$;
  });
  this.unit.wrap_after("timeformaneuver", this, function($t$$) {
    $t$$ && !this.hasionizationeffect() && $self$$.facedown();
    return $t$$;
  });
}, facedown:function() {
  this.isactive && (this.isactive = !1, this.unit.getdial.unwrap(this), this.unit.timeformaneuver.unwrap(this));
}, version:[V2]}, {name:"Weapons Failure", count:2, type:"ship", faceup:function() {
  for (var $i$$ in this.weapons) {
    this.weapons[$i$$].wrap_after("getattack", this, function($a$$) {
      return 0 < $a$$ ? $a$$ - 1 : $a$$;
    });
  }
}, facedown:function() {
  for (var $i$$ in this.weapons) {
    this.weapons[$i$$].getattack.unwrap(this);
  }
}, action:function($n$$) {
  var $roll$$ = this.unit.rollattackdie(1, this, "hit")[0];
  "hit" == $roll$$ || "critical" == $roll$$ ? this.facedown() : this.unit.log("%0 not repaired", this.name);
  this.unit.endaction($n$$, "CRITICAL");
}, version:[V2]}];
var FAST = !1, s, BLACK = "#111", GREEN = "#0F0", RED = "#F00", WHITE = "#FFF", BLUE = "#0AF", YELLOW = "#FF0", GREY = "#888", HALFBLACK = "#222", HALFGREEN = "#080", HALFRED = "#800", HALFWHITE = "#888", HALFBLUE = "#058", HALFYELLOW = "#880", HALFGREY = "#444", TIMEANIM = FAST ? 0 : 1000, FACE = ["focus", "hit", "critical", "evade", "blank"], ATTACKDICE = [0, 0, 1, 1, 1, 2, 4, 4], DEFENSEDICE = [0, 0, 3, 3, 3, 4, 4, 4], MPOS = {F0:[0, 3], F1:[1, 3], F2:[2, 3], F3:[3, 3], F4:[4, 3], F5:[5, 3], BL1:[1, 
2], BL2:[2, 2], BL3:[3, 2], TL1:[1, 1], TL2:[2, 1], TL3:[3, 1], BR1:[1, 4], BR2:[2, 4], BR3:[3, 4], TR1:[1, 5], TR2:[2, 5], TR3:[3, 5], K1:[1, 7], K2:[2, 7], K3:[3, 7], K4:[4, 7], K5:[5, 7], SL2:[2, 0], SL3:[3, 0], SR2:[2, 6], SR3:[3, 6], TRL3:[3, 0], TRR3:[3, 6], TRL2:[2, 0], TRR2:[2, 6]}, REBEL = "REBEL", EMPIRE = "EMPIRE", SCUM = "SCUM", ILLICIT = "Illicit", ELITE = "Elite", TURRET = "Turret", MISSILE = "Missile", ASTROMECH = "Astromech", TORPEDO = "Torpedo", CANNON = "Cannon", BOMB = "Bomb", 
TECH = "Tech", CREW = "Crew", SYSTEM = "System", SALVAGED = "Salvaged", MOD = "Mod", TITLE = "Title", ROCK = "Rock", DEBRIS = "Debris", NONE = "None", NOLOG = !1, generics = [], gid = 0, REROLL_M = 0, ADD_M = 1, MOD_M = 2, ATTACK_M = 0, DEFENSE_M = 1, ATTACKCOMPARE_M = 2, FACEUP = 1, FACEDOWN = 2, DISCARD = 0, xws_lookup = function $xws_lookup$($s$$) {
  for (var $i$$ in PILOT_dict) {
    if (PILOT_dict[$i$$] == $s$$) {
      return $i$$;
    }
  }
  return "";
}, upg_lookup = function $upg_lookup$($s$$) {
  for (var $i$$ in UPGRADE_dict) {
    if (UPGRADE_dict[$i$$] == $s$$) {
      return $i$$;
    }
  }
  return "";
}, activeunit, unitlist, pilotlist, squadron = [], active = 0, globalid = 1, targetunit, PATTERN, SOUND_DIR = "ogg/", SOUND_FILES = "cloak_romulan decloak_romulan EXPLODE3 KX9_laser_cannon TIE-Fire Slave1-Guns Falcon-Guns XWing-Fly1 TIE-Fly2 Slave1-Fly1 Falcon-Fly1 Falcon-Fly3 YWing-Fly2 ISD-Fly missile XWing-Fly2 DStar-Gun4 TIE-Fly6 Slave1-Fly2 ghost".split(" "), SOUNDS = {}, SOUND_NAMES = "cloak decloak explode xwing_fire tie_fire slave_fire falcon_fire xwing_fly tie_fly slave_fly falcon_fly yt2400_fly ywing_fly isd_fly missile xwing2_fly dstar_gun tie2_fly slave2_fly ghost".split(" ");
function loadsound() {
  var $i$$, $j$$, $sound$$ = {explode:2, cloak:0, decloak:1};
  for ($i$$ = 0;$i$$ < squadron.length;$i$$++) {
    for ($sound$$[squadron[$i$$].ship.firesnd] = SOUND_NAMES.indexOf(squadron[$i$$].ship.firesnd), -1 == SOUND_NAMES.indexOf(squadron[$i$$].ship.firesnd) && console.log("cannot find fire sound for " + squadron[$i$$].ship.firesnd + "/" + squadron[$i$$].ship.name), $sound$$[squadron[$i$$].ship.flysnd] = SOUND_NAMES.indexOf(squadron[$i$$].ship.flysnd), -1 == SOUND_NAMES.indexOf(squadron[$i$$].ship.flysnd) && console.log("cannot find sound for " + squadron[$i$$].ship.flysnd + "/" + squadron[$i$$].ship.name), 
    $j$$ = 1;$j$$ < squadron[$i$$].weapons.length;$j$$++) {
      $sound$$[squadron[$i$$].weapons[$j$$].firesnd] = SOUND_NAMES.indexOf(squadron[$i$$].weapons[$j$$].firesnd), -1 == SOUND_NAMES.indexOf(squadron[$i$$].weapons[$j$$].firesnd) && console.log("cannot find fire sound for " + squadron[$i$$].weapons[$j$$].firesnd + "/" + squadron[$i$$].weapons[$j$$].name);
    }
  }
  for ($i$$ in $sound$$) {
    SOUNDS[$i$$] = new Howl({urls:[SOUND_DIR + SOUND_FILES[$sound$$[$i$$]] + ".ogg", SOUND_DIR + SOUND_FILES[$sound$$[$i$$]] + ".m4a", SOUND_DIR + SOUND_FILES[$sound$$[$i$$]] + ".wav"], autoplay:!1, loop:!1});
  }
}
function transformPoint($matrix$$, $point$$) {
  return {x:$point$$.x * $matrix$$.a + $point$$.y * $matrix$$.c + $matrix$$.e, y:$point$$.x * $matrix$$.b + $point$$.y * $matrix$$.d + $matrix$$.f};
}
function halftone($c$$) {
  return $c$$ == GREEN ? HALFGREEN : $c$$ == RED ? HALFRED : $c$$ == WHITE ? HALFWHITE : $c$$ == BLUE ? HALFBLUE : $c$$ == YELLOW ? HALFYELLOW : $c$$ == GREY ? HALFGREY : $c$$;
}
var MS = function $MS$($x$$, $y$$) {
  return (new Snap.Matrix).scale($x$$, $y$$);
}, MT = function $MT$($x$$, $y$$) {
  return (new Snap.Matrix).translate($x$$, $y$$);
}, MR = function $MR$($a$$, $x$$, $y$$) {
  return (new Snap.Matrix).rotate($a$$, $x$$, $y$$);
}, C = {GREEN:"#0F0", RED:"#F00", WHITE:"#FFF"}, P, A = {ARCROTATE:{key:"R", color:GREEN}, ROLL:{key:"r", color:GREEN}, SLAM:{key:"s", color:BLUE}, FOCUS:{key:"f", color:GREEN}, TARGET:{key:"l", color:BLUE}, EVADE:{key:"e", color:GREEN}, BOOST:{key:"b", color:GREEN}, STRESS:{key:"?", color:RED}, CLOAK:{key:"k", color:BLUE}, ISTARGETED:{key:"l", color:RED}, ASTROMECH:{key:"A", color:YELLOW}, CANNON:{key:"C", color:YELLOW}, CREW:{key:"W", color:YELLOW}, MISSILE:{key:"M", color:YELLOW}, TORPEDO:{key:"P", 
color:YELLOW}, ELITE:{key:"E", color:YELLOW}, TURRET:{key:"U", color:YELLOW}, UPGRADE:{key:"S", color:YELLOW}, CRITICAL:{key:"c", color:RED}, SALVAGED:{key:"V", color:YELLOW}, BOMB:{key:"B", color:YELLOW}, TITLE:{key:"t", color:YELLOW}, MOD:{key:"m", color:YELLOW}, SYSTEM:{key:"S", color:YELLOW}, ILLICIT:{key:"I", color:YELLOW}, LASER:{key:"%", color:RED}, TURRETLASER:{key:"$", color:RED}, BILASER:{key:"<", color:RED}, MOBILELASER:{key:"<", color:RED}, LASER180:{key:">", color:RED}, NOTHING:{key:"&nbsp;", 
color:WHITE}, HIT:{key:"d", color:WHITE}, SHIELD:{key:"v", color:YELLOW}, TECH:{key:"X", color:WHITE}}, AINDEX = "ROLL FOCUS TARGET EVADE BOOST STRESS CLOAK ISTARGETED ASTRO CANNON CREW MISSILE TORPEDO ELITE TURRET UPGRADE CRITICAL NOTHING".split(" ");
function repeat($pattern$$, $count$$) {
  if (1 > $count$$) {
    return "";
  }
  for (var $result$$ = "";1 < $count$$;) {
    $count$$ & 1 && ($result$$ += $pattern$$), $count$$ >>= 1, $pattern$$ += $pattern$$;
  }
  return $result$$ + $pattern$$;
}
function dist($p1$$, $p2$$) {
  return ($p1$$.x - $p2$$.x) * ($p1$$.x - $p2$$.x) + ($p1$$.y - $p2$$.y) * ($p1$$.y - $p2$$.y);
}
function Unit($team$$, $pilotid$$) {
  var $i$jscomp$18_t$$;
  this.isdocked = this.dead = !1;
  this.ship = {};
  this.id = gid;
  this.life = 1;
  this.arcrotation = 180;
  this.wrapping = [];
  var $id$jscomp$5_u$$ = this.id;
  generics["u" + gid] = this;
  gid++;
  this.maxupg = [];
  this.exclupg = [];
  this.team = $team$$;
  this.faction = TEAMS[$team$$].faction;
  this.shipactionList = [];
  this.dial = [];
  this.ordnance = !1;
  this.dialselect = "<table class='dial' id='dial" + $id$jscomp$5_u$$ + "'></table>";
  this.text = "<span id='text" + $id$jscomp$5_u$$ + "' class='details'></span>";
  this.upgradesno = 0;
  this.upgrades = [];
  this.criticals = [];
  this.DEFENSEREROLLD = [];
  this.ATTACKREROLLA = [];
  this.ATTACKMODA = [];
  this.ATTACKADD = [];
  this.DEFENSEMODD = [];
  this.DEFENSEADD = [];
  this.tx = this.ty = this.alpha = 0.;
  if ("undefined" == typeof PILOTS[$pilotid$$]) {
    this.error("pilot does not exists " + $pilotid$$);
  } else {
    $id$jscomp$5_u$$ = unitlist[PILOTS[$pilotid$$].unit];
    this.ship = {shield:$id$jscomp$5_u$$.shield, hull:$id$jscomp$5_u$$.hull, firesnd:$id$jscomp$5_u$$.firesnd, flysnd:$id$jscomp$5_u$$.flysnd, name:PILOTS[$pilotid$$].unit, hastitle:$id$jscomp$5_u$$.hastitle};
    "undefined" == typeof PILOTS[$pilotid$$].shipimg ? ($i$jscomp$18_t$$ = $id$jscomp$5_u$$.faction.indexOf(this.faction), -1 == $i$jscomp$18_t$$ && ($i$jscomp$18_t$$ = 0), this.shipimg = $id$jscomp$5_u$$.img[$i$jscomp$18_t$$]) : this.shipimg = PILOTS[$pilotid$$].shipimg;
    this.scale = $id$jscomp$5_u$$.scale;
    this.islarge = 1 == $id$jscomp$5_u$$.islarge ? !0 : !1;
    this.hull = $id$jscomp$5_u$$.hull;
    this.shield = $id$jscomp$5_u$$.shield;
    this.agility = $id$jscomp$5_u$$.evade;
    this.hasmobilearc = "Mobilelaser" == $id$jscomp$5_u$$.weapon_type;
    for ($i$jscomp$18_t$$ = 0;$i$jscomp$18_t$$ < $id$jscomp$5_u$$.dial.length;$i$jscomp$18_t$$++) {
      this.dial[$i$jscomp$18_t$$] = {move:$id$jscomp$5_u$$.dial[$i$jscomp$18_t$$].move, difficulty:$id$jscomp$5_u$$.dial[$i$jscomp$18_t$$].difficulty};
    }
    this.shipactionList = $id$jscomp$5_u$$.actionList.slice(0);
    this.weapons = [];
    this.upgrades = [];
    this.criticals = [];
    this.bombs = [];
    this.lastdrop = -1;
    Laser(this, $id$jscomp$5_u$$.weapon_type, $id$jscomp$5_u$$.fire);
    this.name = PILOTS[$pilotid$$].name;
    this.pilotid = $pilotid$$;
    this.unique = 1 == PILOTS[$pilotid$$].unique ? !0 : !1;
    this.skill = PILOTS[$pilotid$$].skill;
    this.install = "undefined" != typeof PILOTS[$pilotid$$].install ? PILOTS[$pilotid$$].install : function() {
    };
    this.uninstall = "undefined" != typeof PILOTS[$pilotid$$].uninstall ? PILOTS[$pilotid$$].uninstall : function() {
    };
    $id$jscomp$5_u$$ = PILOTS[$pilotid$$].upgrades;
    this.upg = [];
    this.upgbonus = [];
    for (j = 0;10 > j;j++) {
      this.upg[j] = -1;
    }
    this.upgradetype = [];
    for (k = 0;k < $id$jscomp$5_u$$.length;k++) {
      this.upgradetype[k] = $id$jscomp$5_u$$[k];
    }
    this.upgradetype[k++] = MOD;
    unitlist[this.ship.name].hastitle && (this.upgradetype[k++] = TITLE);
    this.upgradesno = k;
    this.points = PILOTS[$pilotid$$].points;
    this.install(this);
    TEAMS[this.team].updatepoints();
  }
}
Unit.prototype = {tosquadron:function $Unit$$tosquadron$($s$$) {
  var $i$jscomp$19_img$jscomp$2_j$$, $upgs_w$$ = this.upg;
  this.activeweapon = this.usedweapon = this.addedattack2 = this.noattack = this.addedattack = -1;
  this.touching = [];
  this.action = this.maneuver = -1;
  this.actionsdone = [];
  this.hasdecloaked = this.hasmoved = !1;
  this.tractorbeam = this.focus = this.reroll = 0;
  this.lastmaneuver = -1;
  this.iscloaked = !1;
  this.istargeted = [];
  this.targeting = [];
  this.hasfired = this.evade = this.ionized = this.stress = 0;
  this.maxfired = 1;
  this.criticalresolved = this.hitresolved = 0;
  this.m = new Snap.Matrix;
  this.collision = !1;
  this.oldoverlap = -1;
  this.ocollision = {overlap:-1, template:[], mine:[]};
  var $uu$$ = [];
  for ($i$jscomp$19_img$jscomp$2_j$$ in $upgs_w$$) {
    -1 < $upgs_w$$[$i$jscomp$19_img$jscomp$2_j$$] && $uu$$.push(Upgradefromid(this, $upgs_w$$[$i$jscomp$19_img$jscomp$2_j$$]));
  }
  this.color = "REBEL" == this.faction ? RED : "EMPIRE" == this.faction ? GREEN : YELLOW;
  $i$jscomp$19_img$jscomp$2_j$$ = this.shipimg;
  this.islarge ? this.img = "undefined" == typeof $i$jscomp$19_img$jscomp$2_j$$ ? $s$$.text(0, 0, this.ship.code).transform("r -90 0 0 " + ("EMPIRE" == this.faction || "SCUM" == this.faction ? "s 2 -2" : "s 2 2") + "t -15 5").attr({"class":"xwingship"}) : $s$$.image("png/" + this.shipimg, -50 * this.scale, -50 * this.scale, 100 * this.scale, 100 * this.scale).transform("r 90 0 0") : ("undefined" != typeof this.shipimg && ($i$jscomp$19_img$jscomp$2_j$$ = this.shipimg), this.img = "undefined" == typeof $i$jscomp$19_img$jscomp$2_j$$ ? 
  $s$$.text(-10, 10, this.ship.code).transform("r -90 0 0 " + ("EMPIRE" == this.faction || "SCUM" == this.faction ? "r -1 1" : "")).attr({"class":"xwingship"}) : $s$$.image("png/" + $i$jscomp$19_img$jscomp$2_j$$, -20 * this.scale, -20 * this.scale, 40 * this.scale, 40 * this.scale).transform("r 90 0 0").attr({pointerEvents:"none"}));
  this.imgsmoke = $s$$.image("png/smoke.gif", -20, -60, 30, 50).transform("r 180 0 0").attr({display:"none"});
  this.imgflame = $s$$.image("png/out.gif", -15, -40, 20, 40).transform("r 180 0 0").attr({display:"none"});
  $upgs_w$$ = this.islarge ? 40 : 20;
  this.outline = $s$$.rect(-$upgs_w$$, -$upgs_w$$, 2 * $upgs_w$$, 2 * $upgs_w$$).attr({fill:"rgba(8,8,8,0.5)", strokeWidth:2});
  this.border = $s$$.rect(-$upgs_w$$, -$upgs_w$$, 2 * $upgs_w$$, 2 * $upgs_w$$).attr({fill:"rgba(0,0,0,0)", strokeWidth:2, stroke:halftone(this.color)});
  this.tohitstats = {};
  this.tohit = $s$$.text(-$upgs_w$$, $upgs_w$$ - 30, "0").attr({"class":"tohit", strokeWidth:1});
  this.meanhit = $s$$.text(-$upgs_w$$, $upgs_w$$ - 15, "0").attr({"class":"tohit", strokeWidth:1});
  this.meanhitsymbol = $s$$.text(-$upgs_w$$ + 40, $upgs_w$$ - 15, "0").attr({"class":"symbols", strokeWidth:0, text:"d"});
  this.meancrit = $s$$.text(-$upgs_w$$, $upgs_w$$, "0").attr({"class":"tohit", strokeWidth:1});
  this.meancritsymbol = $s$$.text(-$upgs_w$$ + 40, $upgs_w$$, "0").attr({"class":"symbols", strokeWidth:0, text:"c"});
  this.gproba = $s$$.group(this.tohit, this.meanhit, this.meanhitsymbol, this.meancrit, this.meancritsymbol).attr({display:"none", fontSize:"15", stroke:"#fff", fill:"#fff", opacity:1});
  this.skillbar = $s$$.text(1 - $upgs_w$$, 3 - $upgs_w$$, repeat("u", this.skill)).transform("r -90 0 0").attr({"class":"xsymbols", fill:"#fa0"});
  this.firebar = $s$$.text(1 - $upgs_w$$, 5 - $upgs_w$$, repeat("u", this.weapons[0].attack)).transform("r -90 0 0").attr({"class":"xsymbols", fill:"#f00"});
  this.evadebar = $s$$.text(1 - $upgs_w$$, 7 - $upgs_w$$, repeat("u", this.agility)).transform("r -90 0 0").attr({"class":"xsymbols", fill:"#0f0"});
  this.hullbar = $s$$.text(1 - $upgs_w$$, 9 - $upgs_w$$, repeat("u", this.hull)).transform("r -90 0 0").attr({"class":"xsymbols", fill:"#cc0"});
  this.shieldbar = $s$$.text(1 - $upgs_w$$, 9 - $upgs_w$$, repeat("u", this.shield + this.hull)).transform("r -90 0 0").attr({"class":"xsymbols", fill:"#0af"});
  this.gstat = $s$$.group(this.skillbar, this.firebar, this.evadebar, this.shieldbar, this.hullbar, this.gproba).attr({pointerEvents:"none"});
  this.dialspeed = $s$$.text(2 + $upgs_w$$, 3 - $upgs_w$$, "").attr({"class":"dialspeed", pointerEvents:"none"});
  this.dialdirection = $s$$.text($upgs_w$$ + 8, 3 - $upgs_w$$, "").attr({"class":"symbols", pointerEvents:"none"});
  this.actionicon = $s$$.text($upgs_w$$ + 2, -7, "").attr({pointerEvents:"none", "class":"symbols", strokeWidth:0});
  this.sector = $s$$.polygon(3 - $upgs_w$$, -$upgs_w$$, 0, 0, $upgs_w$$ - 3, -$upgs_w$$).attr({fill:this.color, opacity:0.5, strokeWidth:0});
  this.ranges = [];
  this.sectors = [];
  this.infoicon = [];
  for ($i$jscomp$19_img$jscomp$2_j$$ = 0;6 > $i$jscomp$19_img$jscomp$2_j$$;$i$jscomp$19_img$jscomp$2_j$$++) {
    this.infoicon[$i$jscomp$19_img$jscomp$2_j$$] = $s$$.text($upgs_w$$ - 7, 6 - $upgs_w$$ + 7 * $i$jscomp$19_img$jscomp$2_j$$, A[AINDEX[$i$jscomp$19_img$jscomp$2_j$$ + 2]].key).attr({pointerEvents:"none", "class":"xsymbols", fill:A[AINDEX[$i$jscomp$19_img$jscomp$2_j$$ + 2]].color, strokeWidth:0});
  }
  this.geffect = $s$$.group(this.imgflame, this.imgsmoke).attr({pointerEvents:"none"});
  this.g = $s$$.group(this.sector, this.outline, this.img, this.border, this.dialspeed, this.dialdirection, this.actionicon, this.infoicon[0], this.infoicon[1], this.infoicon[2], this.infoicon[3], this.infoicon[4], this.infoicon[5], this.gstat);
  VIEWPORT.add(this.g);
  VIEWPORT.add(this.geffect);
  this.g.addClass("unit");
  this.g.hover(function() {
    this.setinfo(translate(this.name));
  }.bind(this), function() {
    $(".info").hide();
  }.bind(this));
  this.setdefaultclickhandler();
  this.upgrades.sort(function($a$$, $b$$) {
    var $pa$$ = ($a$$.isWeapon() ? 4 : 0) + ($a$$.isBomb() ? 1 : 0);
    return ($b$$.isWeapon() ? 4 : 0) + ($b$$.isBomb() ? 1 : 0) - $pa$$;
  });
  this.g.drag(this.dragmove.bind(this), this.dragstart.bind(this), this.dragstop.bind(this));
}, setinfo:function $Unit$$setinfo$($info$$) {
  var $m$jscomp$1_y$$ = VIEWPORT.m.clone(), $p$jscomp$3_w$$ = $("#svgout").width(), $h$jscomp$5_x$$ = $("#svgout").height(), $startX$$ = 0, $startY$$ = 0;
  $h$jscomp$5_x$$ > $p$jscomp$3_w$$ ? $startY$$ = ($h$jscomp$5_x$$ - $p$jscomp$3_w$$) / 2 : $startX$$ = ($p$jscomp$3_w$$ - $h$jscomp$5_x$$) / 2;
  var $max$$ = Math.max(900. / $p$jscomp$3_w$$, 900. / $h$jscomp$5_x$$), $bbox$$ = this.g.getBBox(), $p$jscomp$3_w$$ = $("#svgout").offset();
  $("#playmat").width();
  $("#playmat").height();
  $h$jscomp$5_x$$ = $m$jscomp$1_y$$.x($bbox$$.x, $bbox$$.y - 20) / $max$$;
  $h$jscomp$5_x$$ += $p$jscomp$3_w$$.left + $startX$$;
  $m$jscomp$1_y$$ = $m$jscomp$1_y$$.y($bbox$$.x, $bbox$$.y - 20) / $max$$;
  $m$jscomp$1_y$$ += $p$jscomp$3_w$$.top + $startY$$;
  return $(".info").css({left:$h$jscomp$5_x$$, top:$m$jscomp$1_y$$}).attr({pointerEvents:"none"}).html(formatstring($info$$)).appendTo("body").show();
}, wrap_after:function $Unit$$wrap_after$($name$$, $org$$, $after$$, $unwrap$$) {
  var $self$$ = this, $save$$ = $self$$[$name$$];
  "undefined" == typeof $self$$[$name$$].save && this != Bomb.prototype && this != Unit.prototype && this != Weapon.prototype && ($self$$[$name$$].save = $self$$.__proto__[$name$$]);
  "undefined" == typeof $save$$ && console.log("name" + $name$$ + " undefined");
  var $f$$ = function $$f$$$() {
    var $args$$ = Array.prototype.slice.call(arguments), $result$$;
    $result$$ = $save$$.apply(this, $args$$);
    return $result$$ = $after$$.apply(this, $args$$.concat([$result$$]));
  };
  $f$$.save = $save$$;
  $f$$.org = $org$$;
  "undefined" == typeof $org$$.wrapping && ($org$$.wrapping = []);
  $org$$.wrapping.push({name:$name$$, wrap:this});
  $f$$.vanilla = "undefined" != typeof $save$$.vanilla ? $save$$.vanilla : $save$$;
  $f$$.unwrapper = function $$f$$$unwrapper$($name2$$) {
    var $uw$$ = $self$$.wrap_before($name2$$, $org$$, function($a$$) {
      $f$$.unwrap($org$$);
      $uw$$.unwrap($org$$);
      $self$$.show();
      return $a$$;
    });
  };
  $save$$.next = $f$$;
  $f$$.unwrap = function $$f$$$unwrap$($o$$) {
    if ($f$$.org == $o$$) {
      return $f$$.save.next = $f$$.next, "undefined" == typeof $f$$.next && ($self$$[$name$$] = $f$$.save), "getskill" == $name$$ && filltabskill(), $self$$.show(), $f$$.save;
    }
    "function" == typeof $f$$.save.unwrap && ($f$$.save = $f$$.save.unwrap($o$$));
    $self$$.show();
    return $f$$;
  };
  this[$name$$] = $f$$;
  "getskill" == $name$$ && filltabskill();
  return $f$$;
}, desactivate:function $Unit$$desactivate$() {
  for (var $i$$ in this.wrapping) {
    var $w$$ = this.wrapping[$i$$];
    "function" == typeof $w$$.wrap[$w$$.name].unwrap && $w$$.wrap[$w$$.name].unwrap(this);
  }
  this.isactive = !1;
}, wrap_before:function $Unit$$wrap_before$($name$$, $org$$, $before$$, $unwrap$$) {
  var $self$$ = this, $save$$ = $self$$[$name$$];
  "undefined" == typeof $self$$[$name$$].save && this != Bomb.prototype && this != Unit.prototype && this != Weapon.prototype && ($self$$[$name$$].save = $self$$.__proto__[$name$$]);
  "undefined" == typeof $save$$ && console.log("name" + $name$$ + " undefined");
  var $f$$ = function $$f$$$() {
    var $args$$ = Array.prototype.slice.call(arguments);
    $before$$.apply(this, $args$$);
    return $save$$.apply(this, $args$$);
  };
  $f$$.save = $save$$;
  $f$$.org = $org$$;
  "undefined" == typeof $save$$ && console.error("org:" + $org$$.name + " " + $name$$);
  "undefined" == typeof $org$$.wrapping && ($org$$.wrapping = []);
  $org$$.wrapping.push({name:$name$$, wrap:this});
  $f$$.vanilla = "undefined" != typeof $save$$.vanilla ? $save$$.vanilla : $save$$;
  $f$$.unwrapper = function $$f$$$unwrapper$($name2$$) {
    var $uw$$ = $self$$.wrap_before($name2$$, $org$$, function() {
      $f$$.unwrap($org$$);
      $uw$$.unwrap($org$$);
      $self$$.show();
    });
  };
  $save$$.next = $f$$;
  $f$$.unwrap = function $$f$$$unwrap$($o$$) {
    if ($f$$.org == $o$$) {
      return $f$$.save.next = $f$$.next, "undefined" == typeof $f$$.next && ($self$$[$name$$] = $f$$.save), $self$$.show(), $f$$.save;
    }
    "function" == typeof $f$$.save.unwrap && ($f$$.save = $f$$.save.unwrap($o$$));
    return $f$$;
  };
  return this[$name$$] = $f$$;
}, toJSON:function $Unit$$toJSON$() {
  var $s$$ = {};
  $s$$.name = xws_lookup(this.name);
  $s$$.points = PILOTS[this.pilotid].points;
  $s$$.ship = xws_lookup(this.ship.name);
  for (var $upgpt$$ = {}, $pointsreduction$$ = {}, $i$$ = 0;$i$$ < this.upg.length;$i$$++) {
    var $u$$ = this.upg[$i$$];
    if (-1 < $u$$ && "undefined" != typeof $u$$) {
      var $r$jscomp$2_up$$ = UPGRADES[$u$$];
      "undefined" == typeof $upgpt$$[upg_lookup($r$jscomp$2_up$$.type)] && ($upgpt$$[upg_lookup($r$jscomp$2_up$$.type)] = []);
      $s$$.points += $r$jscomp$2_up$$.points;
      if ("undefined" != typeof UPGRADES[$u$$].pointsupg) {
        for (var $j$$ = 0;$j$$ < UPGRADES[$u$$].upgrades.length;$j$$++) {
          $pointsreduction$$[UPGRADES[$u$$].upgrades[$j$$]] = UPGRADES[$u$$].pointsupg;
        }
      }
      $upgpt$$[upg_lookup($r$jscomp$2_up$$.type)].push(upg_lookup($r$jscomp$2_up$$.name));
    }
  }
  for ($i$$ = 0;$i$$ < this.upg.length;$i$$++) {
    $u$$ = this.upg[$i$$], -1 < $u$$ && "undefined" != typeof $u$$ && "undefined" != typeof $pointsreduction$$[UPGRADES[$u$$].type] && ($r$jscomp$2_up$$ = $pointsreduction$$[UPGRADES[$u$$].type], $s$$.points = 0 < UPGRADES[$u$$].points + $r$jscomp$2_up$$ ? $s$$.points + $r$jscomp$2_up$$ : $s$$.points - UPGRADES[$u$$].points);
  }
  this.points = $s$$.points;
  $s$$.upgrades = $upgpt$$;
  return $s$$;
}, toJuggler:function $Unit$$toJuggler$($translated$$) {
  var $s$$ = this.name;
  1 == $translated$$ && ($s$$ = translate(this.name));
  $s$$ = $s$$.replace(/\'/g, "");
  1 == PILOTS[this.pilotid].ambiguous && "undefined" != typeof PILOTS[this.pilotid].edition && ($s$$ = $s$$ + "(" + PILOTS[this.pilotid].edition + ")");
  for (var $i$$ = 0;$i$$ < this.upg.length;$i$$++) {
    var $upg$$ = this.upg[$i$$];
    if (-1 < $upg$$) {
      var $v$$ = UPGRADES[$upg$$].name;
      1 == $translated$$ && ($v$$ = translate(UPGRADES[$upg$$].name));
      $s$$ += " + " + $v$$.replace(/\(Crew\)/g, "").replace(/\'/g, "");
    }
  }
  return $s$$;
}, toASCII:function $Unit$$toASCII$() {
  for (var $s$$ = this.pilotid, $i$$ = 0;$i$$ < this.upgrades.length;$i$$++) {
    var $u$$ = this.upgrades[$i$$].id;
    -1 < $u$$ && ($s$$ += "," + $u$$);
  }
  return $s$$ += ":" + Math.floor(this.tx) + "," + Math.floor(this.ty) + "," + Math.floor(this.alpha);
}, toKey:function $Unit$$toKey$() {
  for (var $s$$ = ("00" + this.pilotid.toString(32)).slice(-2), $p$$ = [], $i$$ = 0;$i$$ < this.upg.length;$i$$++) {
    -1 < this.upg[$i$$] && $p$$.push(this.upg[$i$$]);
  }
  $p$$.sort();
  for ($i$$ = 0;$i$$ < $p$$.length;$i$$++) {
    $s$$ += ("00" + $p$$[$i$$].toString(32)).slice(-2);
  }
  return $s$$;
}, toString2:function $Unit$$toString2$() {
  var $img$$ = PILOTS[this.pilotid].dict;
  1 == PILOTS[this.pilotid].ambiguous && "undefined" != typeof PILOTS[this.pilotid].edition && ($img$$ += "-" + PILOTS[this.pilotid].edition.toLowerCase().replace(" ", ""));
  var $sname$$ = SHIP_translation[this.ship.name];
  "undefined" == typeof SHIP_translation[this.ship.name] && ($sname$$ = this.ship.name);
  return Mustache.render(TEMPLATES["unit-creation"], {imgname:$img$$, faction:currentteam.faction, skill:this.getskill(), name:translate(this.name), points:this.points, unique:1 == PILOTS[this.pilotid].unique ? !1 : !0, id:this.id, evade:this.agility, hull:this.hull, shield:this.shield, fire:this.weapons[0].getattack(), shipimg:this.shipimg, diallist:dial2JSON(this.getdial()), shipname:$sname$$, actionstring:this.getactionstring(), upgradeaddstring:this.getupgradeaddstring()});
}, setpriority:function $Unit$$setpriority$($action$$) {
  var $p$$ = {FOCUS:3, EVADE:1, CLOAK:4, TARGET:2, CRITICAL:100}[$action$$.type];
  "undefined" == typeof $p$$ && ($p$$ = 0);
  $action$$.priority = $p$$;
  $p$$ = [];
  "BOOST" == $action$$.type && ($p$$ = this.getboostmatrix(this.m));
  "ROLL" == $action$$.type && ($p$$ = this.getrollmatrix(this.m));
  if (0 < $p$$.length) {
    var $old$$ = this.m, $e$$ = this.evaluateposition(), $emove$$ = $e$$ - 1;
    for (i = 0;i < $p$$.length;i++) {
      this.m = $p$$[i], $emove$$ = Math.max($emove$$, this.evaluateposition());
    }
    this.m = $old$$;
    $emove$$ > $e$$ && ($action$$.priority = 2 * ($emove$$ - $e$$));
  }
}, getstatstring:function $Unit$$getstatstring$() {
  var $str$$;
  $str$$ = "" + ("<div class='xsymbols RED'>" + repeat("u", this.weapons[0].getattack()) + "</div>");
  $str$$ += "<div class='xsymbols GREEN'>" + repeat("u", this.getagility()) + "</div>";
  $str$$ += "<div class='xsymbols YELLOW'>" + repeat("u", this.hull) + "</div>";
  return $str$$ += "<div class='xsymbols BLUE'>" + repeat("u", this.shield) + "</div>";
}, getupgradeaddstring:function $Unit$$getupgradeaddstring$() {
  for (var $str$$ = "", $j$$ = 0;$j$$ < this.upgradetype.length;$j$$++) {
    -1 == this.upg[$j$$] && ($str$$ += "<button num=" + $j$$ + " class='upgrades " + this.upgradetype[$j$$].replace(/\|/g, "") + "'>+</button>");
  }
  return $str$$;
}, showskill_old:function $Unit$$showskill_old$() {
  $("#unit" + this.id + " .statskill").html(this.getskill());
}, showupgradeadd:function $Unit$$showupgradeadd$() {
  $("#unit" + this.id + " .upgavail").html(this.getupgradeaddstring());
  addupgradeaddhandler(this);
}, getagility:function $Unit$$getagility$() {
  return phase == COMBAT_PHASE ? this.agility - this.tractorbeam : this.agility;
}, getskill:function $Unit$$getskill$() {
  return this.skill;
}, getdial:function $Unit$$getdial$() {
  return this.hasionizationeffect() ? [{move:"F1", difficulty:"WHITE"}] : this.dial;
}, doplan:function $Unit$$doplan$() {
  this.showdial();
  return this.deferred;
}, getdialstring:function $Unit$$getdialstring$() {
  var $m$$ = [], $str$$ = "";
  for (j = 0;5 >= j;j++) {
    for ($m$$[j] = [], k = 0;7 >= k;k++) {
      $m$$[j][k] = "<td></td>";
    }
  }
  var $gd$$ = this.getdial();
  for (j = 0;j < $gd$$.length;j++) {
    d = $gd$$[j], $m$$[MPOS[d.move][0]][MPOS[d.move][1]] = "<td class='symbols " + d.difficulty + "' move='" + d.move + "'>" + P[d.move].key + "</td>";
  }
  for (j = 5;0 <= j;j--) {
    $str$$ += "<tr>";
    $str$$ = 0 < j && 5 > j ? $str$$ + ("<td>" + j + "</td>") : $str$$ + "<td></td>";
    for (k = 0;7 >= k;k++) {
      $str$$ += $m$$[j][k];
    }
    $str$$ += "</tr>\n";
  }
  return $str$$;
}, canreveal:function $Unit$$canreveal$($d$$) {
  return "RED" != $d$$.difficulty || 0 == this.stress;
}, showdial:function $Unit$$showdial$() {
  var $m$$ = [], $i$$, $d$jscomp$4_j$$, $gd$jscomp$1_str$$ = this.getdial();
  if (phase == PLANNING_PHASE || phase == SELECT_PHASE || phase == CREATION_PHASE) {
    for ($i$$ = 0;5 >= $i$$;$i$$++) {
      for ($m$$[$i$$] = [], $d$jscomp$4_j$$ = 0;7 >= $d$jscomp$4_j$$;$d$jscomp$4_j$$++) {
        $m$$[$i$$][$d$jscomp$4_j$$] = "<td></td>";
      }
    }
    $("#select" + this.id).val();
    for ($i$$ = 0;$i$$ < $gd$jscomp$1_str$$.length;$i$$++) {
      $d$jscomp$4_j$$ = $gd$jscomp$1_str$$[$i$$];
      var $cx$$ = MPOS[$d$jscomp$4_j$$.move][0], $cy$$ = MPOS[$d$jscomp$4_j$$.move][1];
      this.canreveal($d$jscomp$4_j$$) ? ($m$$[$cx$$][$cy$$] = "<td", phase == PLANNING_PHASE && ($m$$[$cx$$][$cy$$] += " onclick='activeunit.setmaneuver(" + $i$$ + ")'"), $m$$[$cx$$][$cy$$] += " class='symbols maneuver " + $d$jscomp$4_j$$.difficulty, this.maneuver == $i$$ && ($m$$[$cx$$][$cy$$] += " selected"), $m$$[$cx$$][$cy$$] += "' >" + P[$d$jscomp$4_j$$.move].key + "</td>") : $m$$[$cx$$][$cy$$] = "<td></td>";
    }
    $gd$jscomp$1_str$$ = "";
    for ($i$$ = 5;0 <= $i$$;$i$$--) {
      $gd$jscomp$1_str$$ += "<tr>";
      $gd$jscomp$1_str$$ = 0 < $i$$ && 5 > $i$$ ? $gd$jscomp$1_str$$ + ("<td>" + $i$$ + "</td>") : $gd$jscomp$1_str$$ + "<td></td>";
      for ($d$jscomp$4_j$$ = 0;7 >= $d$jscomp$4_j$$;$d$jscomp$4_j$$++) {
        $gd$jscomp$1_str$$ += $m$$[$i$$][$d$jscomp$4_j$$];
      }
      $gd$jscomp$1_str$$ += "</tr>\n";
    }
    phase == SELECT_PHASE || phase == CREATION_PHASE ? $("#dial" + this.id).html($gd$jscomp$1_str$$) : $("#maneuverdial").html($gd$jscomp$1_str$$);
  }
  phase >= PLANNING_PHASE && (-1 == this.maneuver || this.hasmoved) && this.clearmaneuver();
}, getupgradelist:function $Unit$$getupgradelist$($type$$) {
  for (var $p$$ = [], $j$$ = 0;$j$$ < UPGRADES.length;$j$$++) {
    var $u$$ = UPGRADES[$j$$];
    if (!("undefined" != typeof $u$$.faction && $u$$.faction != this.faction || "undefined" != typeof $u$$.ship && -1 == this.ship.name.search($u$$.ship) || "undefined" != typeof $u$$.ishuge || "undefined" != typeof $u$$.islarge && this.islarge != $u$$.islarge || "undefined" != typeof $u$$.skillmin && this.getskill() < $u$$.skillmin || "undefined" != typeof $u$$.agilitymax && this.getagility() >= $u$$.agilitymax || "undefined" != typeof $u$$.noupgrades && -1 < this.upgradetype.indexOf($u$$.noupgrades) || 
    "undefined" != typeof $u$$.actionrequired && -1 == this.shipactionList.indexOf($u$$.actionrequired.toUpperCase()) || "undefined" != typeof this.maxupg[$u$$.type] && this.maxupg[$u$$.type] < $u$$.points)) {
      if ("undefined" != typeof $u$$.requiredupg) {
        for (var $hasrequired$$ = !0, $i$$ = 0;$i$$ < $u$$.requiredupg.length;$i$$++) {
          if (-1 == this.upgradetype.indexOf($u$$.requiredupg[$i$$])) {
            $hasrequired$$ = !1;
            break;
          }
        }
        if (!$hasrequired$$) {
          continue;
        }
      }
      !$type$$.match($u$$.type) || 1 == $u$$.takesdouble && this.upgradetype.indexOf($u$$.type) == this.upgradetype.lastIndexOf($u$$.type) || $p$$.push($j$$);
    }
  }
  $p$$.sort(function($a$$, $b$$) {
    return translate(UPGRADES[$a$$].name) > translate(UPGRADES[$b$$].name);
  });
  return $p$$;
}, turn:function $Unit$$turn$($n$$) {
  this.alpha += $n$$;
  this.m.rotate($n$$, 0, 0);
  this.show();
}, getactionstring:function $Unit$$getactionstring$() {
  for (var $str$$ = "", $i$$ = 0;$i$$ < this.shipactionList.length;$i$$++) {
    $str$$ += "<span class='GREEN symbols'>" + A[this.shipactionList[$i$$]].key + "</span>&nbsp;";
  }
  return $str$$;
}, showactionlist:function $Unit$$showactionlist$() {
  var $str$$ = this.getactionstring();
  $("#unit" + this.id + " .actionlist").html($str$$);
}, getattacktable:function $Unit$$getattacktable$($n$$) {
  return ATTACK[$n$$];
}, attackroll:function $Unit$$attackroll$($n$$) {
  var $i$$, $f$$, $h$$, $c$$, $P$$ = this.getattacktable($n$$), $ptot$$ = 0, $r$$ = Math.random();
  if (0 == $n$$) {
    return 0;
  }
  for ($f$$ = 0;$f$$ <= $n$$;$f$$++) {
    for ($h$$ = 0;$h$$ <= $n$$ - $f$$;$h$$++) {
      for ($c$$ = 0;$c$$ <= $n$$ - $f$$ - $h$$;$c$$++) {
        if ($i$$ = $f$$ * FCH_FOCUS + $h$$ + FCH_CRIT * $c$$, $ptot$$ += $P$$[$i$$], $ptot$$ > $r$$) {
          return FCH_FOCUS * $f$$ + $c$$ * FCH_CRIT + $h$$;
        }
      }
    }
  }
  return 0;
}, confirm:function $Unit$$confirm$($s$$) {
  return confirm($s$$);
}, rollattackdie:function $Unit$$rollattackdie$($n$$, $org$jscomp$2_p$$, $best_i$$) {
  $org$jscomp$2_p$$ = [];
  for ($best_i$$ = 0;$best_i$$ < $n$$;$best_i$$++) {
    $org$jscomp$2_p$$.push(FACE[ATTACKDICE[this.rand(8)]]);
  }
  return $org$jscomp$2_p$$;
}, rolldefensedie:function $Unit$$rolldefensedie$($n$$, $org$jscomp$3_p$$, $best$jscomp$1_i$$) {
  $org$jscomp$3_p$$ = [];
  for ($best$jscomp$1_i$$ = 0;$best$jscomp$1_i$$ < $n$$;$best$jscomp$1_i$$++) {
    $org$jscomp$3_p$$.push(FACE[DEFENSEDICE[this.rand(8)]]);
  }
  return $org$jscomp$3_p$$;
}, rand:function $Unit$$rand$($n$$) {
  return Math.floor(Math.random() * $n$$);
}, getdefensetable:function $Unit$$getdefensetable$($n$$) {
  return DEFENSE[$n$$];
}, defenseroll:function $Unit$$defenseroll$($n$$) {
  var $i$$, $e$$, $f$$, $lock$$ = $.Deferred(), $P$$ = this.getdefensetable($n$$), $ptot$$ = 0, $r$$ = Math.random();
  if (0 == $n$$) {
    return $lock$$.resolve({dice:$n$$, roll:0}).promise();
  }
  "undefined" == typeof $P$$ && this.error("P undefined for n=" + $n$$);
  for ($f$$ = 0;$f$$ <= $n$$;$f$$++) {
    for ($e$$ = 0;$e$$ <= $n$$ - $f$$;$e$$++) {
      if ($i$$ = $f$$ * FE_FOCUS + $e$$ * FE_EVADE, $ptot$$ += $P$$[$i$$], $ptot$$ > $r$$) {
        return $lock$$.resolve({dice:$n$$, roll:FE_FOCUS * $f$$ + $e$$ * FE_EVADE}).promise();
      }
    }
  }
  return $lock$$.resolve({dice:$n$$, roll:0}).promise();
}, getdicemodifiers:function $Unit$$getdicemodifiers$() {
  return [{from:ATTACK_M, type:MOD_M, to:ATTACK_M, org:this, req:function() {
    return this.canusefocus();
  }.bind(this), aiactivate:function($m$$, $n$$) {
    return 0 < FCH_focus($m$$);
  }, f:function($m$$, $n$$) {
    this.removefocustoken();
    var $f$$ = FCH_focus($m$$);
    0 < $f$$ && ($m$$ = $m$$ - FCH_FOCUS * $f$$ + FCH_HIT * $f$$);
    return $m$$;
  }.bind(this), str:"focus", token:!0, noreroll:"focus"}, {from:ATTACK_M, type:REROLL_M, to:ATTACK_M, org:this, req:function($a$$, $w$$, $t$$) {
    return this.canusetarget($t$$);
  }.bind(this), n:function() {
    return 9;
  }, dice:["blank", "focus"], f:function() {
    activeunit.removetarget(targetunit);
  }, str:"target", token:!0}, {from:DEFENSE_M, type:MOD_M, to:DEFENSE_M, org:this, req:function() {
    return this.canusefocus();
  }.bind(this), aiactivate:function($m$$, $n$$) {
    mm = getattackvalue();
    return 0 < FE_focus($m$$) && FCH_hit(mm) + FCH_crit(mm) > FE_evade($m$$);
  }, f:function($m$$, $n$$) {
    this.removefocustoken();
    var $f$$ = FE_focus($m$$);
    0 < $f$$ && ($m$$ = $m$$ - FE_FOCUS * $f$$ + FE_EVADE * $f$$);
    return $m$$;
  }.bind(this), str:"focus", token:!0}, {from:DEFENSE_M, type:ADD_M, to:DEFENSE_M, org:this, req:function() {
    return this.canuseevade();
  }.bind(this), aiactivate:function($m$$, $n$$) {
    mm = getattackvalue();
    return FCH_hit(mm) + FCH_crit(mm) > FE_evade($m$$);
  }, f:function($m$$, $n$$) {
    this.removeevadetoken();
    return {m:$m$$ + FE_EVADE, n:$n$$ + 1};
  }.bind(this), str:"evade", token:!0, noreroll:"focus"}];
}, adddicemodifier:function $Unit$$adddicemodifier$($from$$, $type$$, $to$$, $org$$, $mod$$) {
  $mod$$.org = $org$$;
  $mod$$.type = $type$$;
  $mod$$.from = $from$$;
  $mod$$.to = $to$$;
  this.wrap_after("getdicemodifiers", $org$$, function($m$$) {
    return $m$$.concat($mod$$);
  });
}, setclickhandler:function $Unit$$setclickhandler$($f$$) {
  this.g.unmousedown();
  this.g.mousedown($f$$);
}, setdefaultclickhandler:function $Unit$$setdefaultclickhandler$() {
  this.g.unmousedown();
  this.g.mousedown(function() {
    this.select();
  }.bind(this));
}, dragshow:function $Unit$$dragshow$() {
  this.g.transform(this.dragMatrix);
  this.geffect.transform(this.dragMatrix);
}, dragmove:function $Unit$$dragmove$($ddx_dx$$, $ddy_dy$$, $spl_x$$, $max$jscomp$1_y$$) {
  $spl_x$$ = VIEWPORT.m.split();
  $max$jscomp$1_y$$ = Math.max(900. / $("#svgout").width(), 900. / $("#svgout").height());
  $ddx_dx$$ = $ddx_dx$$ * $max$jscomp$1_y$$ / $spl_x$$.scalex;
  $ddy_dy$$ = $ddy_dy$$ * $max$jscomp$1_y$$ / $spl_x$$.scalex;
  this.dragMatrix = MT($ddx_dx$$, $ddy_dy$$).add(this.m);
  this.dx = $ddx_dx$$;
  this.dy = $ddy_dy$$;
  this.dragged = !0;
  $(".phasepanel").hide();
  this.dragshow();
}, dragstart:function $Unit$$dragstart$($x$$, $y$$, $a$$) {
  this.showhitsector(!1);
  this.dragMatrix = this.m;
  this.dragged = !1;
}, dragstop:function $Unit$$dragstop$($a$$) {
  this.dragged && (this.m = this.dragMatrix, this.showpanel(), this.tx += this.dx, this.ty += this.dy);
  this.dragged = !1;
}, isinzone:function $Unit$$isinzone$($m$jscomp$11_op$$) {
  $m$jscomp$11_op$$ = this.getOutlinePoints($m$jscomp$11_op$$);
  var $zone$$, $i$$;
  $zone$$ = SETUPS.playzone;
  for ($i$$ = 0;4 > $i$$;$i$$++) {
    if (!Snap.path.isPointInside($zone$$, $m$jscomp$11_op$$[$i$$].x, $m$jscomp$11_op$$[$i$$].y)) {
      return !1;
    }
  }
  return !0;
}, getOutlinePoints:function $Unit$$getOutlinePoints$($m$$) {
  var $w$$ = this.islarge ? 40 : 20;
  "undefined" == typeof $m$$ && ($m$$ = this.m);
  return [{x:$m$$.x(-$w$$, -$w$$), y:$m$$.y(-$w$$, -$w$$)}, {x:$m$$.x($w$$, -$w$$), y:$m$$.y($w$$, -$w$$)}, {x:$m$$.x($w$$, $w$$), y:$m$$.y($w$$, $w$$)}, {x:$m$$.x(-$w$$, $w$$), y:$m$$.y(-$w$$, $w$$)}];
}, getOutlineString:function $Unit$$getOutlineString$($m$jscomp$13_p$$) {
  $m$jscomp$13_p$$ = this.getOutlinePoints($m$jscomp$13_p$$);
  return {s:"M " + $m$jscomp$13_p$$[0].x + " " + $m$jscomp$13_p$$[0].y + " L " + $m$jscomp$13_p$$[1].x + " " + $m$jscomp$13_p$$[1].y + " " + $m$jscomp$13_p$$[2].x + " " + $m$jscomp$13_p$$[2].y + " " + $m$jscomp$13_p$$[3].x + " " + $m$jscomp$13_p$$[3].y + " Z", p:$m$jscomp$13_p$$};
}, getOutline:function $Unit$$getOutline$($m$$) {
  var $t$jscomp$5_w$$ = this.islarge ? 40 : 20, $p$$ = s.rect(-$t$jscomp$5_w$$, -$t$jscomp$5_w$$, 2 * $t$jscomp$5_w$$, 2 * $t$jscomp$5_w$$), $t$jscomp$5_w$$ = s.text($t$jscomp$5_w$$ + 8, 3 - $t$jscomp$5_w$$, "8").attr({"class":"symbols", fontSize:"1.3em"});
  return s.g($t$jscomp$5_w$$, $p$$).transform($m$$).attr({fill:this.color, opacity:0.3, display:"none"});
}, getRangePoints:function $Unit$$getRangePoints$($n$$, $m$$) {
  var $w$$ = this.islarge ? 40 : 20;
  return $.map([{x:-$w$$, y:-100 * $n$$ - $w$$}, {x:$w$$, y:-100 * $n$$ - $w$$}, {x:100 * $n$$ + $w$$, y:-$w$$}, {x:100 * $n$$ + $w$$, y:$w$$}, {x:$w$$, y:100 * $n$$ + $w$$}, {x:-$w$$, y:100 * $n$$ + $w$$}, {x:-100 * $n$$ - $w$$, y:$w$$}, {x:-100 * $n$$ - $w$$, y:-$w$$}], function($a$$, $i$$) {
    return transformPoint($m$$, $a$$);
  });
}, getHalfRangePoints:function $Unit$$getHalfRangePoints$($n$$, $m$$) {
  var $w$$ = this.islarge ? 40 : 20;
  return $.map([{x:100 * $n$$ + $w$$, y:0}, {x:100 * $n$$ + $w$$, y:-$w$$}, {x:$w$$, y:-100 * $n$$ - $w$$}, {x:-$w$$, y:-100 * $n$$ - $w$$}, {x:-100 * $n$$ - $w$$, y:-$w$$}, {x:-100 * $n$$ - $w$$, y:0}], function($a$$, $i$$) {
    return transformPoint($m$$, $a$$);
  });
}, getRangeString:function $Unit$$getRangeString$($n$$, $m$$) {
  var $circle$$ = " A " + 100 * $n$$ + " " + 100 * $n$$ + " 0 0 1 ", $p$$ = this.getRangePoints($n$$, $m$$);
  return "M " + $p$$[1].x + " " + $p$$[1].y + $circle$$ + $p$$[2].x + " " + $p$$[2].y + " L " + $p$$[3].x + " " + $p$$[3].y + $circle$$ + $p$$[4].x + " " + $p$$[4].y + " L " + $p$$[5].x + " " + $p$$[5].y + $circle$$ + $p$$[6].x + " " + $p$$[6].y + " L " + $p$$[7].x + " " + $p$$[7].y + $circle$$ + $p$$[0].x + " " + $p$$[0].y + " Z";
}, getHalfRangeString:function $Unit$$getHalfRangeString$($n$$, $m$$) {
  var $circle$$ = " A " + 100 * $n$$ + " " + 100 * $n$$ + " 0 0 0 ", $p$$ = this.getHalfRangePoints($n$$, $m$$);
  return "M " + $p$$[0].x + " " + $p$$[0].y + " L " + $p$$[1].x + " " + $p$$[1].y + $circle$$ + $p$$[2].x + " " + $p$$[2].y + " L " + $p$$[3].x + " " + $p$$[3].y + $circle$$ + $p$$[4].x + " " + $p$$[4].y + " L " + $p$$[5].x + " " + $p$$[5].y + " Z";
}, getSubRangeString:function $Unit$$getSubRangeString$($n1_p$$, $n2$$, $m$$) {
  var $circle$$ = " A " + 100 * $n1_p$$ + " " + 100 * $n1_p$$ + " 0 0 1 ";
  $n1_p$$ = this.getRangePoints($n1_p$$, $m$$);
  var $str$$ = "M " + $n1_p$$[0].x + " " + $n1_p$$[0].y + " L " + $n1_p$$[1].x + " " + $n1_p$$[1].y + $circle$$ + $n1_p$$[2].x + " " + $n1_p$$[2].y + " L " + $n1_p$$[3].x + " " + $n1_p$$[3].y + $circle$$ + $n1_p$$[4].x + " " + $n1_p$$[4].y + " L " + $n1_p$$[5].x + " " + $n1_p$$[5].y + $circle$$ + $n1_p$$[6].x + " " + $n1_p$$[6].y + " L " + $n1_p$$[7].x + " " + $n1_p$$[7].y + $circle$$ + $n1_p$$[0].x + " " + $n1_p$$[0].y, $circle$$ = " A " + 100 * $n2$$ + " " + 100 * $n2$$ + " 0 0 0 ";
  $n1_p$$ = this.getRangePoints($n2$$, $m$$);
  return $str$$ += " L " + $n1_p$$[0].x + " " + $n1_p$$[0].y + $circle$$ + $n1_p$$[7].x + " " + $n1_p$$[7].y + " L " + $n1_p$$[6].x + " " + $n1_p$$[6].y + $circle$$ + $n1_p$$[5].x + " " + $n1_p$$[5].y + " L " + $n1_p$$[4].x + " " + $n1_p$$[4].y + $circle$$ + $n1_p$$[3].x + " " + $n1_p$$[3].y + " L " + $n1_p$$[2].x + " " + $n1_p$$[2].y + $circle$$ + $n1_p$$[1].x + " " + $n1_p$$[1].y + " L " + $n1_p$$[0].x + " " + $n1_p$$[0].y;
}, getHalfSubRangeString:function $Unit$$getHalfSubRangeString$($n1$jscomp$1_p$$, $n2$$, $m$$) {
  var $circle$$ = " A " + 100 * $n1$jscomp$1_p$$ + " " + 100 * $n1$jscomp$1_p$$ + " 0 0 0 ";
  $n1$jscomp$1_p$$ = this.getHalfRangePoints($n1$jscomp$1_p$$, $m$$);
  var $str$$ = "M " + $n1$jscomp$1_p$$[0].x + " " + $n1$jscomp$1_p$$[0].y + " L " + $n1$jscomp$1_p$$[1].x + " " + $n1$jscomp$1_p$$[1].y + $circle$$ + $n1$jscomp$1_p$$[2].x + " " + $n1$jscomp$1_p$$[2].y + " L " + $n1$jscomp$1_p$$[3].x + " " + $n1$jscomp$1_p$$[3].y + $circle$$ + $n1$jscomp$1_p$$[4].x + " " + $n1$jscomp$1_p$$[4].y + " L " + $n1$jscomp$1_p$$[5].x + " " + $n1$jscomp$1_p$$[5].y, $circle$$ = " A " + 100 * $n2$$ + " " + 100 * $n2$$ + " 0 0 1 ";
  $n1$jscomp$1_p$$ = this.getHalfRangePoints($n2$$, $m$$);
  return $str$$ += " L " + $n1$jscomp$1_p$$[5].x + " " + $n1$jscomp$1_p$$[5].y + " L " + $n1$jscomp$1_p$$[4].x + " " + $n1$jscomp$1_p$$[4].y + $circle$$ + $n1$jscomp$1_p$$[3].x + " " + $n1$jscomp$1_p$$[3].y + " L " + $n1$jscomp$1_p$$[2].x + " " + $n1$jscomp$1_p$$[2].y + $circle$$ + $n1$jscomp$1_p$$[1].x + " " + $n1$jscomp$1_p$$[1].y + " L " + $n1$jscomp$1_p$$[0].x + " " + $n1$jscomp$1_p$$[0].y + " Z";
}, getPrimarySectorString:function $Unit$$getPrimarySectorString$($n$$, $m$$) {
  var $p$$;
  $p$$ = this.getSectorPoints($n$$, $m$$);
  var $circle$$ = " A " + 100 * $n$$ + " " + 100 * $n$$ + " 0 0 1 ", $o$$ = transformPoint($m$$, {x:0, y:0});
  return "M " + $o$$.x + " " + $o$$.y + " L " + $p$$[0].x + " " + $p$$[0].y + $circle$$ + $p$$[1].x + " " + $p$$[1].y + " L " + $p$$[2].x + " " + $p$$[2].y + $circle$$ + $p$$[3].x + " " + $p$$[3].y + " Z";
}, getPrimarySubSectorString:function $Unit$$getPrimarySubSectorString$($n1$jscomp$2_p$$, $n2$$, $m$$) {
  var $circle$$ = " A " + 100 * $n1$jscomp$2_p$$ + " " + 100 * $n1$jscomp$2_p$$ + " 0 0 1 ";
  $n1$jscomp$2_p$$ = this.getSectorPoints($n1$jscomp$2_p$$, $m$$);
  var $str$$ = "M " + $n1$jscomp$2_p$$[0].x + " " + $n1$jscomp$2_p$$[0].y + $circle$$ + $n1$jscomp$2_p$$[1].x + " " + $n1$jscomp$2_p$$[1].y + " L " + $n1$jscomp$2_p$$[2].x + " " + $n1$jscomp$2_p$$[2].y + $circle$$ + $n1$jscomp$2_p$$[3].x + " " + $n1$jscomp$2_p$$[3].y;
  $n1$jscomp$2_p$$ = this.getSectorPoints($n2$$, $m$$);
  $circle$$ = " A " + 100 * $n2$$ + " " + 100 * $n2$$ + " 0 0 0 ";
  return $str$$ += "L " + $n1$jscomp$2_p$$[3].x + " " + $n1$jscomp$2_p$$[3].y + $circle$$ + $n1$jscomp$2_p$$[2].x + " " + $n1$jscomp$2_p$$[2].y + " L " + $n1$jscomp$2_p$$[1].x + " " + $n1$jscomp$2_p$$[1].y + $circle$$ + $n1$jscomp$2_p$$[0].x + " " + $n1$jscomp$2_p$$[0].y + " Z";
}, getSectorPoints:function $Unit$$getSectorPoints$($n$$, $m$$) {
  var $w$$ = this.islarge ? 40 : 20;
  if (this.hasmobilearc) {
    return this.getQuarterSectorPoints($n$$, $m$$);
  }
  var $socle$$ = Math.sqrt(($w$$ - 3) * ($w$$ - 3) + $w$$ * $w$$);
  return $.map([{x:-($socle$$ + 100 * $n$$) / Math.sqrt(1 + $w$$ * $w$$ / ($w$$ - 3) / ($w$$ - 3)), y:-($socle$$ + 100 * $n$$) / Math.sqrt(1 + ($w$$ - 3) * ($w$$ - 3) / $w$$ / $w$$)}, {x:-$w$$ + 3, y:-$w$$ - 100 * $n$$ - 1}, {x:$w$$ - 3, y:-$w$$ - 100 * $n$$ - 1}, {x:($socle$$ + 100 * $n$$) / Math.sqrt(1 + $w$$ * $w$$ / ($w$$ - 3) / ($w$$ - 3)), y:-($socle$$ + 2 + 100 * $n$$) / Math.sqrt(1 + ($w$$ - 3) * ($w$$ - 3) / $w$$ / $w$$)}], function($a$$, $i$$) {
    return transformPoint($m$$, $a$$);
  });
}, getQuarterSectorPoints:function $Unit$$getQuarterSectorPoints$($n$$, $m$$) {
  var $w$$ = this.islarge ? 40 : 20, $r$$ = Math.sqrt(2), $socle$$ = $r$$ * $w$$;
  return $.map([{x:-($socle$$ + 100 * $n$$) / $r$$, y:-($socle$$ + 100 * $n$$) / $r$$}, {x:-$w$$, y:-$w$$ - 100 * $n$$}, {x:$w$$, y:-$w$$ - 100 * $n$$}, {x:($socle$$ + 100 * $n$$) / $r$$, y:-($socle$$ + 100 * $n$$) / $r$$}], function($a$$, $i$$) {
    return transformPoint($m$$, $a$$);
  });
}, setmaneuver:function $Unit$$setmaneuver$($i$$) {
  this.lastmaneuver = this.maneuver;
  this.maneuver = $i$$;
  this.showdial();
  this.showmaneuver();
  "undefined" == typeof this.deferred && this.error("undefined deferred");
  nextplanning();
}, select:function $Unit$$select$() {
  if (this.dead || this.isdocked) {
    return activeunit;
  }
  if (phase < ACTIVATION_PHASE || phase == ACTIVATION_PHASE || phase == COMBAT_PHASE) {
    var $old$$ = activeunit;
    activeunit = this;
    $old$$ != this && $old$$.unselect();
    $("#" + this.id).addClass("selected");
    this.show();
    center(this);
  }
  return activeunit;
}, unselect:function $Unit$$unselect$() {
  this != activeunit && ($("#" + this.id).removeClass("selected"), this.showoutline(), this.showmaneuver());
}, getmcollisions:function $Unit$$getmcollisions$($m$jscomp$25_os$$) {
  var $k$$, $op$$, $mine$$ = [];
  $k$$ = this.getOutlineString($m$jscomp$25_os$$);
  $m$jscomp$25_os$$ = $k$$.s;
  $op$$ = $k$$.p;
  for ($k$$ = 0;$k$$ < OBSTACLES.length;$k$$++) {
    if (OBSTACLES[$k$$].type != NONE) {
      var $ob$$ = OBSTACLES[$k$$].getOutlineString();
      if (OBSTACLES[$k$$].type == BOMB && (0 < Snap.path.intersection($ob$$.s, $m$jscomp$25_os$$).length || this.isPointInside($ob$$.s, $op$$) || this.isPointInside($m$jscomp$25_os$$, $ob$$.p))) {
        $mine$$.push($k$$);
        break;
      }
    }
  }
  return $mine$$;
}, getBall:function $Unit$$getBall$($m$$) {
  return {x:$m$$.x(0, 0), y:$m$$.y(0, 0), diam:this.islarge ? 56 : 28};
}, guessevades:function $Unit$$guessevades$($roll$$, $lock$$) {
  var $resolve$$ = function($k$$) {
    $k$$ == FE_evade($roll$$.roll) && (this.log("guessed correctly ! +1 %EVADE% [%0]", self.name), $roll$$.roll += FE_EVADE, $roll$$.dice += 1);
    $("#actiondial").empty();
    $lock$$.resolve($roll$$);
  }.bind(this);
  this.log("guess the number of evades out of %0 dice [%1]", $roll$$.dice, self.name);
  $("#actiondial").empty();
  for (var $i$$ = 0;$i$$ <= $roll$$.dice;$i$$++) {
    (function($k$$) {
      var $e$$ = $("<button>").html($k$$ + " <code class='xevadetoken'></code>").on("touch click", function() {
        $resolve$$($k$$);
      }.bind(this));
      $("#actiondial").append($e$$);
    }).call(this, $i$$);
  }
}, fastgetocollisions:function $Unit$$fastgetocollisions$($b$$, $k$$, $d$jscomp$5_path$jscomp$2_x2$$, $len_y2$$) {
  var $D_i$$, $pp$$ = [], $tb$$ = this.getBall($k$$);
  if ("undefined" == typeof $d$jscomp$5_path$jscomp$2_x2$$ && ($D_i$$ = $b$$.invert(), $d$jscomp$5_path$jscomp$2_x2$$ = $k$$.x(0, 0), $len_y2$$ = $k$$.y(0, 0), $k$$ = $D_i$$.x($d$jscomp$5_path$jscomp$2_x2$$, $len_y2$$), $D_i$$ = $D_i$$.y($d$jscomp$5_path$jscomp$2_x2$$, $len_y2$$), $d$jscomp$5_path$jscomp$2_x2$$ = s.path("M 0 0 L " + $k$$ + " " + $D_i$$).appendTo(VIEWPORT).attr({display:"none"}), $len_y2$$ = $d$jscomp$5_path$jscomp$2_x2$$.getTotalLength(), 0 == $len_y2$$)) {
    return !1;
  }
  for ($k$$ = $D_i$$ = 0;$D_i$$ <= $len_y2$$;$D_i$$ += $len_y2$$ / 5, $k$$++) {
    var $p$$ = $d$jscomp$5_path$jscomp$2_x2$$.getPointAtLength($D_i$$);
    $pp$$[$k$$] = {x:$b$$.x($p$$.x, $p$$.y), y:$b$$.y($p$$.x, $p$$.y)};
  }
  for ($k$$ = 0;$k$$ < OBSTACLES.length;$k$$++) {
    if (OBSTACLES[$k$$].type != BOMB && OBSTACLES[$k$$].type != NONE) {
      $b$$ = OBSTACLES[$k$$].getBall();
      $D_i$$ = $b$$.diam + $tb$$.diam;
      $d$jscomp$5_path$jscomp$2_x2$$ = $D_i$$ * $D_i$$;
      if (($b$$.x - $tb$$.x) * ($b$$.x - $tb$$.x) + ($b$$.y - $tb$$.y) * ($b$$.y - $tb$$.y) < $d$jscomp$5_path$jscomp$2_x2$$) {
        return !0;
      }
      for ($D_i$$ = 0;$D_i$$ < $pp$$.length;$D_i$$++) {
        if (($b$$.x - $pp$$[$D_i$$].x) * ($b$$.x - $pp$$[$D_i$$].x) + ($b$$.y - $pp$$[$D_i$$].y) * ($b$$.y - $pp$$[$D_i$$].y) < $d$jscomp$5_path$jscomp$2_x2$$) {
          return !0;
        }
      }
    }
  }
  return !1;
}, getocollisions:function $Unit$$getocollisions$($j$jscomp$10_mbegin$$, $k$jscomp$11_mend$jscomp$1_so$$, $o2_path$$, $dx$jscomp$8_len$$) {
  var $i$jscomp$42_os$$, $pathpts$$ = [], $dy$jscomp$8_op$$, $collision$$ = {overlap:-1, template:[], mine:[]};
  $k$jscomp$11_mend$jscomp$1_so$$ = this.getOutlineString($k$jscomp$11_mend$jscomp$1_so$$);
  $i$jscomp$42_os$$ = $k$jscomp$11_mend$jscomp$1_so$$.s;
  $dy$jscomp$8_op$$ = $k$jscomp$11_mend$jscomp$1_so$$.p;
  for ($k$jscomp$11_mend$jscomp$1_so$$ = 0;$k$jscomp$11_mend$jscomp$1_so$$ < OBSTACLES.length;$k$jscomp$11_mend$jscomp$1_so$$++) {
    var $o$jscomp$4_p$$ = OBSTACLES[$k$jscomp$11_mend$jscomp$1_so$$];
    if ($o$jscomp$4_p$$.type != NONE) {
      var $ob$$ = $o$jscomp$4_p$$.getOutlineString();
      (0 < Snap.path.intersection($ob$$.s, $i$jscomp$42_os$$).length || this.isPointInside($ob$$.s, $dy$jscomp$8_op$$) || this.isPointInside($i$jscomp$42_os$$, $ob$$.p)) && this.oldoverlap != $k$jscomp$11_mend$jscomp$1_so$$ && ($o$jscomp$4_p$$.type != BOMB ? $collision$$.overlap = $k$jscomp$11_mend$jscomp$1_so$$ : $collision$$.mine.push($o$jscomp$4_p$$));
    }
  }
  if ("undefined" != typeof $o2_path$$) {
    for ($k$jscomp$11_mend$jscomp$1_so$$ = $i$jscomp$42_os$$ = 0;$i$jscomp$42_os$$ <= $dx$jscomp$8_len$$;$i$jscomp$42_os$$ += 5, $k$jscomp$11_mend$jscomp$1_so$$++) {
      $o$jscomp$4_p$$ = $o2_path$$.getPointAtLength($i$jscomp$42_os$$), $pathpts$$[$k$jscomp$11_mend$jscomp$1_so$$] = {x:$j$jscomp$10_mbegin$$.x($o$jscomp$4_p$$.x, $o$jscomp$4_p$$.y), y:$j$jscomp$10_mbegin$$.y($o$jscomp$4_p$$.x, $o$jscomp$4_p$$.y)};
    }
    for ($j$jscomp$10_mbegin$$ = 0;$j$jscomp$10_mbegin$$ < $pathpts$$.length;$j$jscomp$10_mbegin$$++) {
      for ($k$jscomp$11_mend$jscomp$1_so$$ = 0;$k$jscomp$11_mend$jscomp$1_so$$ < OBSTACLES.length;$k$jscomp$11_mend$jscomp$1_so$$++) {
        if ($o$jscomp$4_p$$ = OBSTACLES[$k$jscomp$11_mend$jscomp$1_so$$], $o$jscomp$4_p$$.type != NONE && $k$jscomp$11_mend$jscomp$1_so$$ != $collision$$.overlap && $k$jscomp$11_mend$jscomp$1_so$$ != this.oldoverlap && -1 == $collision$$.template.indexOf($k$jscomp$11_mend$jscomp$1_so$$) && -1 == $collision$$.mine.indexOf($o$jscomp$4_p$$)) {
          for ($o2_path$$ = $o$jscomp$4_p$$.getOutlineString().p, $i$jscomp$42_os$$ = 0;$i$jscomp$42_os$$ < $o2_path$$.length;$i$jscomp$42_os$$++) {
            if ($dx$jscomp$8_len$$ = $o2_path$$[$i$jscomp$42_os$$].x - $pathpts$$[$j$jscomp$10_mbegin$$].x, $dy$jscomp$8_op$$ = $o2_path$$[$i$jscomp$42_os$$].y - $pathpts$$[$j$jscomp$10_mbegin$$].y, 100 >= $dx$jscomp$8_len$$ * $dx$jscomp$8_len$$ + $dy$jscomp$8_op$$ * $dy$jscomp$8_op$$) {
              $o$jscomp$4_p$$.type != BOMB ? $collision$$.template.push($k$jscomp$11_mend$jscomp$1_so$$) : $collision$$.mine.push(OBSTACLES[$k$jscomp$11_mend$jscomp$1_so$$]);
              break;
            }
          }
        }
      }
    }
  }
  return $collision$$;
}, iscollidingunit:function $Unit$$iscollidingunit$($m$$, $sh$$) {
  var $o1$$ = this.getOutlineString($m$$).s, $o2$$ = $sh$$.getOutlineString($sh$$.m).s, $collision$$ = 0 < Snap.path.intersection($o1$$, $o2$$).length;
  this.islarge && ($collision$$ = $collision$$ || this.isinoutline($o1$$, $sh$$, $sh$$.m));
  $sh$$.islarge && ($collision$$ = $collision$$ || $sh$$.isinoutline($o2$$, this, $m$$));
  return $collision$$;
}, getcollidingunits:function $Unit$$getcollidingunits$($m$$) {
  var $i$$, $c$$ = [];
  for ($i$$ in squadron) {
    var $sh$$ = squadron[$i$$];
    $sh$$ != this && this.iscollidingunit($m$$, $sh$$) && $c$$.push($sh$$);
  }
  return $c$$;
}, getpathmatrix:function $Unit$$getpathmatrix$($m$$, $maneuver$$) {
  var $path$$ = P[$maneuver$$].path, $len$jscomp$2_mm$$ = $path$$.getTotalLength();
  this.islarge && ($len$jscomp$2_mm$$ += 40);
  $len$jscomp$2_mm$$ = this.getmatrixwithmove($m$$, $path$$, $len$jscomp$2_mm$$);
  $maneuver$$.match(/K\d|SR\d|SL\d/) && $len$jscomp$2_mm$$.rotate(180, 0, 0);
  $maneuver$$.match(/TRL\d/) && $len$jscomp$2_mm$$.rotate(-90, 0, 0);
  $maneuver$$.match(/TRR\d/) && $len$jscomp$2_mm$$.rotate(90, 0, 0);
  $path$$.remove();
  return $len$jscomp$2_mm$$;
}, getmovecolor:function $Unit$$getmovecolor$($m$$, $so$$, $c$$, $path$jscomp$5_u$$, $len$$, $order$$) {
  var $k$$, $col$$ = !1;
  if (!this.isinzone($m$$)) {
    return RED;
  }
  $c$$ && ($c$$ = this.ocollision, this.ocollision = this.getocollisions(this.m, $m$$, $path$jscomp$5_u$$, $len$$), this.hascollidedobstacle() && ($col$$ = !0), this.ocollision = $c$$);
  if ($col$$) {
    return YELLOW;
  }
  if ($so$$) {
    for ($k$$ in $so$$ = this.getOutlineString($m$$), this.getskill(), squadron) {
      if ($path$jscomp$5_u$$ = squadron[$k$$], $path$jscomp$5_u$$ != this && ($m$$ = $order$$ ? $path$jscomp$5_u$$.futurem : $path$jscomp$5_u$$.m, $m$$ = $path$jscomp$5_u$$.getOutlineString($m$$), 0 < Snap.path.intersection($m$$.s, $so$$.s).length || this.islarge && !$path$jscomp$5_u$$.islarge && this.isPointInside($so$$.s, $m$$.p) || !this.islarge && $path$jscomp$5_u$$.islarge && this.isPointInside($m$$.s, $so$$.p))) {
        return WHITE;
      }
    }
  }
  return GREEN;
}, isTurret:function $Unit$$isTurret$($w$$) {
  return "Turretlaser" == $w$$.type;
}, candoactivation:function $Unit$$candoactivation$() {
  return -1 != this.maneuver;
}, candoroll:function $Unit$$candoroll$() {
  for (var $moves$$ = this.getrollmatrix(this.m), $b$$ = !1, $ob$$ = this.canmoveonobstacles("ROLL"), $i$$ = 0;$i$$ < $moves$$.length;$i$$++) {
    var $c$$ = this.getmovecolor($moves$$[$i$$], !0, !0), $b$$ = $b$$ || $c$$ == GREEN || $c$$ == YELLOW && $ob$$;
  }
  return $b$$;
}, candoboost:function $Unit$$candoboost$() {
  for (var $moves$$ = this.getboostmatrix(this.m), $b$$ = !1, $ob$$ = this.canmoveonobstacles("BOOST"), $i$$ = 0;$i$$ < $moves$$.length;$i$$++) {
    var $c$$ = this.getmovecolor($moves$$[$i$$], !0, !0), $b$$ = $b$$ || $c$$ == GREEN || $c$$ == YELLOW && $ob$$;
  }
  return $b$$;
}, newaction:function $Unit$$newaction$($a$$, $str$$) {
  return {action:$a$$, org:this, type:$str$$, name:$str$$};
}, getactionbarlist:function $Unit$$getactionbarlist$($isendmaneuver$$) {
  var $i$$, $al$$ = [];
  for ($i$$ = 0;$i$$ < this.shipactionList.length;$i$$++) {
    var $a$$ = this.shipactionList[$i$$];
    if (!this.isactiondone($a$$)) {
      switch($a$$) {
        case "CLOAK":
          this.candocloak() && $al$$.push(this.newaction(this.addcloak, "CLOAK"));
          break;
        case "FOCUS":
          this.candofocus() && $al$$.push(this.newaction(this.addfocus, "FOCUS"));
          break;
        case "EVADE":
          this.candoevade() && $al$$.push(this.newaction(this.addevade, "EVADE"));
          break;
        case "TARGET":
          this.candotarget() && $al$$.push(this.newaction(this.resolvetarget, "TARGET"));
          break;
        case "ARCROTATE":
          this.candoarcrotate() && $al$$.push(this.newaction(this.resolvearcrotate, "ARCROTATE"));
          break;
        case "BOOST":
          this.candoboost() && $al$$.push(this.newaction(this.resolveboost, "BOOST"));
          break;
        case "ROLL":
          this.candoroll() && $al$$.push(this.newaction(this.resolveroll, "ROLL"));
          break;
        case "SLAM":
          $isendmaneuver$$ && $al$$.push(this.newaction(this.resolveslam, "SLAM"));
      }
    }
  }
  return $al$$;
}, getupgactionlist:function $Unit$$getupgactionlist$() {
  var $i$$, $al$$ = [];
  for ($i$$ = 0;$i$$ < this.upgrades.length;$i$$++) {
    var $upg$$ = this.upgrades[$i$$];
    !this.isactiondone($upg$$.name) && $upg$$.isactive && "function" == typeof $upg$$.action && $upg$$.candoaction() && $al$$.push({org:$upg$$, action:$upg$$.action, type:$upg$$.type.toUpperCase(), name:$upg$$.name});
    !this.isactiondone($upg$$.name + "/2") && $upg$$.isactive && "function" == typeof $upg$$.action2 && $upg$$.candoaction2() && $al$$.push({org:$upg$$, action:$upg$$.action2, type:$upg$$.type.toUpperCase(), name:$upg$$.name + "/2"});
  }
  return $al$$;
}, getcritactionlist:function $Unit$$getcritactionlist$() {
  var $i$$, $al$$ = [];
  for ($i$$ = 0;$i$$ < this.criticals.length;$i$$++) {
    var $crit$$ = this.criticals[$i$$];
    !this.isactiondone($crit$$.name) && $crit$$.isactive && "function" == typeof $crit$$.action && ($crit$$.type = "CRITICAL", $crit$$.org = $crit$$, $al$$.push($crit$$));
  }
  return $al$$;
}, getactionlist:function $Unit$$getactionlist$($isendmaneuver$$) {
  $isendmaneuver$$ = this.getactionbarlist($isendmaneuver$$);
  var $ual$$ = this.getupgactionlist(), $cal$$ = this.getcritactionlist();
  return $isendmaneuver$$.concat($ual$$).concat($cal$$);
}, addevadetoken:function $Unit$$addevadetoken$() {
  this.evade++;
  this.animateaddtoken("xevadetoken");
  this.movelog("E");
  this.show();
}, addevade:function $Unit$$addevade$($n$$) {
  this.addevadetoken();
  this.endaction($n$$, "EVADE");
}, addfocustoken:function $Unit$$addfocustoken$() {
  this.focus++;
  this.animateaddtoken("xfocustoken");
  this.movelog("FO");
  this.show();
}, addtractorbeam:function $Unit$$addtractorbeam$($u$$) {
  this.addtractorbeamtoken();
  if (1 == this.tractorbeam && !this.islarge) {
    var $oldm$$ = this.m;
    p = Unit.prototype.getrollmatrix.call(this, this.m).concat(this.getpathmatrix(this.m, "F1"));
    $u$$.doselection(function($n$$) {
      $u$$.resolveactionmove.call(this, p, function($t$$, $k$$) {
        $t$$.ocollision = $t$$.getocollisions($oldm$$, p[$k$$]);
        $t$$.endnoaction($n$$, "BOOST");
      }, !0, !0);
    }.bind(this));
  }
}, addtractorbeamtoken:function $Unit$$addtractorbeamtoken$() {
  this.tractorbeam++;
  this.animateaddtoken("xtractorbeamtoken");
  this.movelog("TB");
  this.show();
}, removetractorbeamtoken:function $Unit$$removetractorbeamtoken$() {
  this.tractorbeam--;
  this.animateremovetoken("xtractorbeamtoken");
  this.movelog("tb");
  this.show();
}, addfocus:function $Unit$$addfocus$($n$$) {
  this.addfocustoken();
  this.endaction($n$$, "FOCUS");
}, addstress:function $Unit$$addstress$() {
  this.stress++;
  this.animateaddtoken("xstresstoken");
  this.movelog("ST");
  this.show();
}, addiontoken:function $Unit$$addiontoken$() {
  this.ionized++;
  this.animateaddtoken("xionizedtoken");
  this.movelog("I");
  this.show();
}, removeiontoken:function $Unit$$removeiontoken$() {
  this.ionized--;
  this.animateremovetoken("xionizedtoken");
  this.movelog("i");
  this.show();
}, warndeath:function $Unit$$warndeath$($c$$, $h$$, $t$$) {
}, dies:function $Unit$$dies$() {
  this.movelog("d-0");
  $("#" + this.id).attr("onclick", "");
  $("#" + this.id).addClass("dead");
  $("#" + this.id).html("" + this);
  $("#" + this.id + " .outoverflow").each(function($index$$) {
    "auto" != $(this).css("top") && $(this).css("top", $(this).parent().offset().top + "px");
  });
  i = squadron.indexOf(this);
  for (i in squadron) {
    squadron[i] == this ? delete squadron[i] : squadron[i].team == this.team && squadron[i].warndeath(this.hull, this.shield, this);
  }
  filltabskill();
  for (i = 0;i < this.targeting.length;i++) {
    var $t$$ = this.targeting[i];
    n = $t$$.istargeted.indexOf(this);
    -1 < n && $t$$.istargeted.splice(n, 1);
    $t$$.show();
  }
  for (i = 0;i < this.istargeted.length;i++) {
    $t$$ = this.istargeted[i], n = $t$$.targeting.indexOf(this), -1 < n && $t$$.targeting.splice(n, 1), $t$$.show();
  }
  this.targeting = [];
  this.g.attr({display:"none"});
  this.imgsmoke.attr("display", "none");
  this.imgflame.attr("display", "none");
  this.imgexplosion = this.islarge ? s.image("png/explosion3.gif", -80, -80, 160, 160) : s.image("png/explosion3.gif#" + Math.random(), -40, -40, 80, 80);
  this.geffect.add(this.imgexplosion);
  this.show();
  FAST || SOUNDS.explode.play();
  this.dead = !0;
  this.log("has exploded!");
  setTimeout(function() {
    this.geffect.attr({display:"none"});
    this.show();
    TEAMS[this.team].checkdead() && win(this.team);
  }.bind(this), FAST ? 0 : 1000);
}, canbedestroyed:function $Unit$$canbedestroyed$() {
  return skillturn != this.getskill() ? !0 : !1;
}, checkdead:function $Unit$$checkdead$() {
  if (!this.dead && (0 >= this.hull || !this.isinzone(this.m))) {
    this.dies();
    var $r$$ = TEAMS[this.team].history.rawdata;
    "undefined" == typeof $r$$[round] && ($r$$[round] = {hits:0, dead:""});
    $r$$[round].dead += this.name + " ";
    return !0;
  }
  return !1;
}, cancelhit:function $Unit$$cancelhit$($r$$, $sh$$) {
  var $h$$ = FCH_hit($r$$.ch);
  return $h$$ >= $r$$.e ? {ch:$r$$.ch - $r$$.e * FCH_HIT, e:0} : {ch:$r$$.ch - $h$$ * FCH_HIT, e:$r$$.e - $h$$};
}, cancelcritical:function $Unit$$cancelcritical$($r$$, $sh$$) {
  var $c$$ = FCH_crit($r$$.ch);
  return $c$$ >= $r$$.e ? {ch:$r$$.ch - $r$$.e * FCH_CRIT, e:0} : {ch:$r$$.ch - $c$$ * FCH_CRIT, e:$r$$.e - $c$$};
}, evadeattack:function $Unit$$evadeattack$($sh$$) {
  var $e$jscomp$7_r$$ = getdefenseresult(), $ch$$ = getattackresult();
  displayattackroll(getattackdice(), $ch$$);
  $e$jscomp$7_r$$ = this.cancelhit({ch:$ch$$, e:$e$jscomp$7_r$$}, $sh$$);
  $e$jscomp$7_r$$ = this.cancelcritical($e$jscomp$7_r$$, $sh$$);
  "undefined" == typeof $e$jscomp$7_r$$ && this.error("undefined cancel critical");
  return $e$jscomp$7_r$$.ch;
}, declareattack:function $Unit$$declareattack$($w$$, $target$$) {
  targetunit = $target$$;
  this.activeweapon = $w$$;
  if (this.weapons[$w$$].declareattack($target$$)) {
    return this.log("attacks %0 with %1", $target$$.name, this.weapons[$w$$].name), $target$$.isattackedby($w$$, this), !0;
  }
  this.log("cannot attack %0 [%1]", $target$$.name, this.weapons[$w$$].name);
  return !1;
}, isattackedby:function $Unit$$isattackedby$($k$$, $a$$) {
}, modifydamageassigned:function $Unit$$modifydamageassigned$($ch$$, $attacker$$) {
  return $ch$$;
}, modifydefenseroll:function $Unit$$modifydefenseroll$($a$$, $m$$, $n$$) {
  return $m$$;
}, modifyattackroll:function $Unit$$modifyattackroll$($m$$, $n$$, $d$$) {
  return $m$$;
}, resolveishit:function $Unit$$resolveishit$() {
}, hashit:function $Unit$$hashit$($t$$) {
  return 0 < this.criticalresolved + this.hitresolved;
}, resolvedamage:function $Unit$$resolvedamage$() {
  $(".fireline").remove();
  FAST || this.playfiresnd();
  var $ch$$ = targetunit.evadeattack(this), $ch$$ = this.weapons[this.activeweapon].modifydamageassigned($ch$$, targetunit), $ch$$ = targetunit.modifydamageassigned($ch$$, this);
  TEAMS[this.team].allred += getattackdice();
  TEAMS[targetunit.team].allgreen += getdefensedice();
  TEAMS[this.team].allhits += FCH_hit($ch$$);
  TEAMS[this.team].allcrits += FCH_crit($ch$$);
  TEAMS[targetunit.team].allevade += FE_evade(getdefenseresult());
  var $c$$ = FCH_crit($ch$$), $h$$ = FCH_hit($ch$$);
  this.hasdamaged = !0;
  this.hitresolved = $h$$;
  this.criticalresolved = $c$$;
  this.hashit(targetunit) && (targetunit.resolveishit(this), this.weapons[this.activeweapon].prehit(targetunit, $c$$, $h$$), this.hitresolved + this.criticalresolved < targetunit.shield ? targetunit.log("-%0 %SHIELD%", this.criticalresolved + this.hitresolved) : 0 < targetunit.shield && targetunit.log("-%0 %SHIELD%", targetunit.shield), this.hitresolved = targetunit.resolvehit(this.hitresolved), this.criticalresolved = targetunit.resolvecritical(this.criticalresolved), this.weapons[this.activeweapon].posthit(targetunit, 
  $c$$, $h$$));
  this.weapons[this.activeweapon].endattack($c$$, $h$$);
  this.usedweapon = this.activeweapon;
  this.weapons[this.activeweapon].hasdoubleattack() ? (this.latedeferred = this.deferred, targetunit.canbedestroyed(skillturn) && targetunit.checkdead(), targetunit.dead || this.newlock().done(function() {
    this.deferred = this.latedeferred;
    this.log("+1 attack with %0", this.weapons[this.activeweapon].name);
    this.resolveattack(this.activeweapon, targetunit);
  }.bind(this)), this.cleanupattack()) : TEAMS[targetunit.team].initiative ? (targetunit.afterdefenseeffect($c$$, $h$$, this), barrier(function() {
    this.afterattackeffect($c$$, $h$$);
    targetunit.canbedestroyed(skillturn) && targetunit.checkdead();
    targetunit.endbeingattacked($c$$, $h$$, this);
    this.endattack($c$$, $h$$, this);
    this.cleanupattack();
  }.bind(this))) : (this.afterattackeffect($c$$, $h$$), barrier(function() {
    targetunit.afterdefenseeffect($c$$, $h$$, this);
    targetunit.canbedestroyed(skillturn) && targetunit.checkdead();
    this.endattack($c$$, $h$$, this);
    targetunit.endbeingattacked($c$$, $h$$, this);
    this.cleanupattack();
  }.bind(this)));
}, afterattackeffect:function $Unit$$afterattackeffect$($c$$, $h$$) {
}, afterdefenseeffect:function $Unit$$afterdefenseeffect$($c$$, $h$$) {
}, postattack:function $Unit$$postattack$($i$$) {
}, cleanupattack:function $Unit$$cleanupattack$() {
  this.actionbarrier();
  ENGAGED = !1;
}, resetfocus:function $Unit$$resetfocus$() {
  return 0;
}, resetevade:function $Unit$$resetevade$() {
  return 0;
}, resettractorbeam:function $Unit$$resettractorbeam$() {
  return 0;
}, endround:function $Unit$$endround$() {
  for (var $i$$ = 0;$i$$ < this.upgrades.length;$i$$++) {
    this.upgrades[$i$$].endround();
  }
  this.focus = this.resetfocus();
  this.evade = this.resetevade();
  this.hasfired = 0;
  this.maxfired = 1;
  this.tractorbeam = this.resettractorbeam();
  this.oldoverlap = this.ocollision.overlap;
  this.ocollision.overlap = -1;
  this.ocollision.template = [];
  this.ocollision.mine = [];
  this.collision = !1;
  this.touching = [];
  this.showinfo();
}, playfiresnd:function $Unit$$playfiresnd$() {
  var $bb$$ = targetunit.g.getBBox(), $start$$ = transformPoint(this.m, {x:0, y:-(this.islarge ? 40 : 20)}), $p$$ = s.path("M " + $start$$.x + " " + $start$$.y + " L " + ($bb$$.x + $bb$$.w / 2) + " " + ($bb$$.y + $bb$$.h / 2)).appendTo(VIEWPORT).attr({stroke:this.color, strokeWidth:2}), $process$$ = setInterval(function() {
    $p$$.remove();
    clearInterval($process$$);
  }, 200);
  this.movelog("f-" + targetunit.id + "-" + this.activeweapon);
  "undefined" != typeof this.weapons[this.activeweapon] && "undefined" != typeof this.weapons[this.activeweapon].firesnd ? SOUNDS[this.weapons[this.activeweapon].firesnd].play() : SOUNDS[this.ship.firesnd].play();
}, endattack:function $Unit$$endattack$($c$$, $h$$, $t$$) {
  for (i = 0;i < DICES.length;i++) {
    $("." + DICES[i] + "dice").remove();
  }
  this.show();
}, endbeingattacked:function $Unit$$endbeingattacked$($c$$, $h$$, $t$$) {
}, showpositions:function $Unit$$showpositions$($gd$$) {
  var $i$jscomp$0$$, $o$$ = [];
  for ($i$jscomp$0$$ = 0;$i$jscomp$0$$ < $gd$$.length;$i$jscomp$0$$++) {
    $o$$[$i$jscomp$0$$] = this.getOutline($gd$$[$i$jscomp$0$$].m).attr({title:$gd$$[$i$jscomp$0$$].move, opacity:0.4, fill:halftone($gd$$[$i$jscomp$0$$].color), display:"block", "class":"possible"}).appendTo(VIEWPORT), function($i$$) {
      $o$$[$i$$].hover(function() {
        $o$$[$i$$].attr({stroke:$gd$$[$i$$].color, strokeWidth:4});
      }.bind(this), function() {
        $o$$[$i$$].attr({strokeWidth:0});
      }.bind(this));
    }.call(this, $i$jscomp$0$$);
  }
}, showmeanposition:function $Unit$$showmeanposition$() {
  this.getdial();
  this.evaluatemoves(!0, !0);
  this.showpositions([{color:GREEN, move:"mean", m:this.meanm}]);
}, shownextpositions:function $Unit$$shownextpositions$() {
  var $gd$$ = this.getdial();
  this.evaluatemoves(!0, !0);
  var $n$$ = [];
  for (i = 0;i < $gd$$.length;i++) {
    $n$$[i] = $gd$$[i].next;
  }
  this.showpositions($n$$);
}, showpossiblepositions:function $Unit$$showpossiblepositions$() {
  this.evaluatemoves(!0, !0);
  var $gd$$ = this.getdial();
  this.showpositions($gd$$);
}, evaluateposition:function $Unit$$evaluateposition$() {
  var $attackenemy$$ = 0, $attack$$ = 0, $n$$ = 0, $i$$, $j$$, $dist$$ = 0;
  NOLOG = !0;
  for ($j$$ in squadron) {
    var $u$$ = squadron[$j$$];
    if (this.isenemy($u$$)) {
      var $a$jscomp$26_y$$ = 0;
      for ($i$$ = 0;$i$$ < $u$$.weapons.length;$i$$++) {
        var $x$$ = $u$$.weapons[$i$$].getrange(this);
        0 < $x$$ && 4 > $x$$ && ($a$jscomp$26_y$$ = Math.max($a$jscomp$26_y$$, $u$$.getattackstrength($i$$, this)));
      }
      $attackenemy$$ += $a$jscomp$26_y$$;
      for ($i$$ = 0;$i$$ < this.weapons.length;$i$$++) {
        $a$jscomp$26_y$$ = this.weapons[$i$$].getrange($u$$), 0 < $a$jscomp$26_y$$ && 4 > $a$jscomp$26_y$$ && ($attack$$ = Math.max($attack$$, this.getattackstrength($i$$, $u$$)));
      }
      $dist$$ += this.getdist(this.m, $u$$) / 90000;
      $n$$++;
    }
  }
  NOLOG = !1;
  return $attack$$ - $attackenemy$$ - $dist$$ / $n$$;
}, evaluatemoves:function $Unit$$evaluatemoves$($withcollisions$$, $withobstacles$$) {
  this.meanmround = round;
  var $gd$$ = this.getdial(), $mx$$ = 0, $my$$ = 0, $ma$$ = 0, $g$$ = 0, $i$$, $best$$ = RED, $VALUES$$ = {"#000":0, "#F00":1, "#FF0":2, "#FFF":3, "#0F0":4};
  NOLOG = !0;
  var $ref$$ = (this.m.split().rotate + 360 + 180) % 360 - 180;
  for ($i$$ = 0;$i$$ < $gd$$.length;$i$$++) {
    $gd$$[$i$$].path = P[$gd$$[$i$$].move].path, $gd$$[$i$$].len = $gd$$[$i$$].path.getTotalLength() + (this.islarge ? 40 : 0);
  }
  for ($i$$ = 0;$i$$ < $gd$$.length;$i$$++) {
    var $gpm_mm$$ = this.getpathmatrix(this.m, $gd$$[$i$$].move);
    $gd$$[$i$$].m = $gpm_mm$$;
    if (this.canreveal($gd$$[$i$$])) {
      var $color$$ = this.getmovecolor($gpm_mm$$, $withcollisions$$, $withobstacles$$, $gd$$[$i$$].path, $gd$$[$i$$].len, !0);
      $gd$$[$i$$].color = $color$$;
      if ($color$$ != RED && $color$$ != BLACK && $withcollisions$$ && $withobstacles$$) {
        var $c$$ = RED, $ocol$$ = this.ocollision;
        for (j = 0;j < $gd$$.length;j++) {
          var $ccc$$;
          if (!("F0" == $gd$$[j].move || "RED" == $gd$$[j].difficulty && (this.hasnostresseffect() && "GREEN" != $gd$$[$i$$].difficulty || "RED" == $gd$$[$i$$].difficulty))) {
            var $mmm$$ = this.getmatrixwithmove($gpm_mm$$, $gd$$[j].path, $gd$$[j].len);
            $ccc$$ = GREEN;
            this.isinzone($mmm$$) ? $withobstacles$$ && (this.fastgetocollisions($gpm_mm$$, $mmm$$, $gd$$[j].path, $gd$$[j].len) ? this.ocollision.overlap = 1 : this.ocollision.overlap = -1, this.hascollidedobstacle() && ($ccc$$ = YELLOW)) : $ccc$$ = RED;
            $VALUES$$[$ccc$$] > $VALUES$$[$c$$] && ($c$$ = $ccc$$);
          }
        }
        this.ocollision = $ocol$$;
        $VALUES$$[$c$$] < $VALUES$$[$color$$] && ($gd$$[$i$$].color = $c$$);
      }
    } else {
      $gd$$[$i$$].color = BLACK;
    }
    $VALUES$$[$best$$] > $VALUES$$[$gd$$[$i$$].color] && ($best$$ = $gd$$[$i$$].color);
    $gd$$[$i$$].color != GREEN && $gd$$[$i$$].color != WHITE || $gd$$[$i$$].move.match(/K\d|SR\d|SL\d|TRL\d|TRR\d/) || ($gpm_mm$$ = $gpm_mm$$.split(), $g$$++, $gpm_mm$$.rotate = ($gpm_mm$$.rotate - $ref$$ + 180) % 360 - 180, $mx$$ += $gpm_mm$$.dx, $my$$ += $gpm_mm$$.dy, $ma$$ += $gpm_mm$$.rotate);
  }
  for ($i$$ = 0;$i$$ < $gd$$.length;$i$$++) {
    "F0" == $gd$$[$i$$].move && ($gd$$[$i$$].color = $best$$);
  }
  0 == $g$$ && ($g$$ = 1);
  $mx$$ /= $g$$;
  $my$$ /= $g$$;
  $ma$$ /= $g$$;
  this.meanm = (new Snap.Matrix).translate($mx$$, $my$$).rotate($ma$$ + $ref$$, 0, 0);
  NOLOG = !1;
}, removetarget:function $Unit$$removetarget$($t$$) {
  var $n$$;
  $n$$ = $t$$.istargeted.indexOf(this);
  -1 < $n$$ && $t$$.istargeted.splice($n$$, 1);
  $n$$ = this.targeting.indexOf($t$$);
  -1 < $n$$ && (this.targeting.splice($n$$, 1), this.movelog("t-" + $t$$.id), $t$$.show(), this.show());
  0 == this.targeting.length && $("#atokens > .xtargettoken").remove();
}, removeevadetoken:function $Unit$$removeevadetoken$() {
  this.animateremovetoken("xevadetoken");
  this.evade--;
  this.movelog("e");
  this.show();
}, removefocustoken:function $Unit$$removefocustoken$() {
  this.animateremovetoken("xfocustoken");
  this.focus--;
  this.movelog("fo");
  this.show();
}, resolveactionmove:function $Unit$$resolveactionmove$($moves$$, $cleanup$$, $automove$$, $possible$$) {
  var $i$jscomp$0$$;
  this.pos = [];
  var $resolve$$ = function($m$$, $k$$, $f$$) {
    for ($i$jscomp$0$$ = 0;$i$jscomp$0$$ < this.pos.length;$i$jscomp$0$$++) {
      this.pos[$i$jscomp$0$$].ol.remove();
    }
    if ($automove$$) {
      var $gpm$jscomp$1_mine$$ = $m$$.split(), $o$$ = this.m.split();
      s.path("M " + $o$$.dx + " " + $o$$.dy + " L " + $gpm$jscomp$1_mine$$.dx + " " + $gpm$jscomp$1_mine$$.dy).attr({stroke:this.color, display:TRACE ? "block" : "none", strokeWidth:"20px", strokeLinecap:"round", strokeDasharray:"1, 30", opacity:0.2, fill:"rgba(0,0,0,0)"}).addClass("trace").appendTo(VIEWPORT);
      this.m = $m$$;
    }
    $gpm$jscomp$1_mine$$ = this.getmcollisions(this.m);
    if (0 < $gpm$jscomp$1_mine$$.length) {
      for ($i$jscomp$0$$ = 0;$i$jscomp$0$$ < $gpm$jscomp$1_mine$$.length;$i$jscomp$0$$++) {
        $o$$ = OBSTACLES[$gpm$jscomp$1_mine$$[$i$jscomp$0$$]], $o$$.type == BOMB && "function" == typeof $o$$.detonate ? $o$$.detonate(this, !1) : (this.ocollision.overlap = $i$jscomp$0$$, this.log("colliding with obstacle"), $possible$$ || this.resolveocollision(1, []));
      }
    }
    $automove$$ && ($gpm$jscomp$1_mine$$ = $m$$.split(), this.movelog("am-" + Math.floor(300 + $gpm$jscomp$1_mine$$.dx) + "-" + Math.floor(300 + $gpm$jscomp$1_mine$$.dy) + "-" + Math.floor((360 + Math.floor($gpm$jscomp$1_mine$$.rotate)) % 360)));
    $f$$(this, $k$$);
    this.show();
  }.bind(this);
  for ($i$jscomp$0$$ = $moves$$.length - 1;0 <= $i$jscomp$0$$;$i$jscomp$0$$--) {
    var $c$$ = this.getmovecolor($moves$$[$i$jscomp$0$$], !0, !0);
    if ($possible$$ && ($c$$ == YELLOW || $c$$ == RED) || $c$$ == GREEN || $possible$$ && !$automove$$) {
      p = this.getOutline($moves$$[$i$jscomp$0$$]).attr({display:"block"}).appendTo(VIEWPORT), this.pos.push({ol:p, k:$i$jscomp$0$$});
    }
  }
  if (0 < this.pos.length) {
    if (1 == this.pos.length) {
      $resolve$$($moves$$[this.pos[0].k], this.pos[0].k, $cleanup$$);
    } else {
      for ($i$jscomp$0$$ = 0;$i$jscomp$0$$ < this.pos.length;$i$jscomp$0$$++) {
        (function($i$$) {
          var $p$$ = this.pos[$i$$];
          $p$$.ol.hover(function() {
            this.pos[$i$$].ol.attr({stroke:this.color, strokeWidth:4});
          }.bind(this), function() {
            this.pos[$i$$].ol.attr({strokeWidth:0});
          }.bind(this));
          $p$$.ol.click(function() {
            $resolve$$($moves$$[this.pos[$i$$].k], this.pos[$i$$].k, $cleanup$$);
          }.bind(this));
          $p$$.ol.touchend(function() {
            $resolve$$($moves$$[this.pos[$i$$].k], this.pos[$i$$].k, $cleanup$$);
          }.bind(this));
        }).call(this, $i$jscomp$0$$);
      }
    }
  } else {
    $resolve$$(this.m, -1, $cleanup$$);
  }
}, resolveactionselection:function $Unit$$resolveactionselection$($units$$, $cleanup$$) {
  var $i$$;
  this.pos = [];
  var $resolve$$ = function($k$$) {
    for ($i$$ = 0;$i$$ < $units$$.length;$i$$++) {
      $units$$[$i$$].outline.removeClass("outline"), $units$$[$i$$].outline.attr({fill:"rgba(8,8,8,0.5)"}), $units$$[$i$$].setdefaultclickhandler();
    }
    $cleanup$$($k$$);
  }.bind(this);
  if (0 == $units$$.length) {
    $resolve$$(-1);
  } else {
    if (1 == $units$$.length) {
      $resolve$$(0);
    } else {
      for ($i$$ = 0;$i$$ < $units$$.length;$i$$++) {
        $units$$[$i$$].outline.attr({fill:"rgba(100,100,100,0.8)"}), $units$$[$i$$].outline.addClass("outline"), function($k$$) {
          $units$$[$k$$].setclickhandler(function() {
            $resolve$$($k$$);
          });
        }($i$$);
      }
    }
  }
}, getboostmatrix:function $Unit$$getboostmatrix$($m$$) {
  return [this.getpathmatrix(this.m, "F1"), this.getpathmatrix(this.m, "BL1"), this.getpathmatrix(this.m, "BR1")];
}, resolveboost:function $Unit$$resolveboost$($n$$) {
  this.resolveactionmove(this.getboostmatrix(this.m), function($t$$, $k$$) {
    $t$$.endaction($n$$, "BOOST");
  }, !0, this.canmoveonobstacles("BOOST"));
}, candoarcrotate:function $Unit$$candoarcrotate$() {
  return this.hasmobilearc;
}, setarcrotate:function $Unit$$setarcrotate$($r$$) {
  this.arcrotation = 90 * $r$$;
}, resolvearcrotate:function $Unit$$resolvearcrotate$($n$$, $noaction$$) {
  for (var $aux$$ = this.weapons[0].auxiliary, $sectors$$ = [], $self$$ = this, $i$$ = 0;4 > $i$$;$i$$++) {
    $sectors$$[$i$$] = s.path($aux$$.call(this, 1, this.m.clone().rotate(90 * $i$$ - this.arcrotation, 0, 0))).attr({fill:this.color, stroke:this.color, opacity:0.1}).appendTo(VIEWPORT);
  }
  for ($i$$ = 0;4 > $i$$;$i$$++) {
    (function($k$$) {
      $sectors$$[$k$$].hover(function() {
        $sectors$$[$k$$].attr({opacity:0.4});
      }, function() {
        $sectors$$[$k$$].attr({opacity:0.1});
      });
      $sectors$$[$k$$].click(function() {
        $self$$.setarcrotate($k$$);
        0 == $k$$ && $self$$.log("Mobile firing arc rotated to front");
        1 == $k$$ && $self$$.log("Mobile firing arc rotated to right side");
        2 == $k$$ && $self$$.log("Mobile firing arc rotated to back");
        3 == $k$$ && $self$$.log("Mobile firing arc rotated to left side");
        $self$$.movelog("R-" + $k$$);
        for (var $j$$ = 0;4 > $j$$;$j$$++) {
          $sectors$$[$j$$].attr({display:"none"});
        }
        1 == $noaction$$ ? $self$$.endnoaction($n$$, "ARCMOBILE") : $self$$.endaction($n$$, "ARCMOBILE");
      });
    })($i$$);
  }
}, canmoveonobstacles:function $Unit$$canmoveonobstacles$($type$$) {
  return !1;
}, getdecloakmatrix:function $Unit$$getdecloakmatrix$($m$$) {
  var $m0$$ = this.getpathmatrix(this.m.clone().rotate(90, 0, 0), "F2").translate(0, this.islarge ? 20 : 0).rotate(-90, 0, 0), $m1$$ = this.getpathmatrix(this.m.clone().rotate(-90, 0, 0), "F2").translate(0, this.islarge ? 20 : 0).rotate(90, 0, 0);
  return [$m$$.clone(), $m0$$.clone().translate(0, -20), $m0$$, $m0$$.clone().translate(0, 20), $m1$$.clone().translate(0, -20), $m1$$, $m1$$.clone().translate(0, 20), this.getpathmatrix($m$$.clone(), "F2")];
}, removecloaktoken:function $Unit$$removecloaktoken$() {
  this.agility -= 2;
  this.iscloaked = !1;
  this.animateremovetoken("xcloaktoken");
  this.movelog("ct");
  FAST || SOUNDS.decloak.play();
}, resolvedecloak:function $Unit$$resolvedecloak$($noskip$$) {
  var $s$$ = "(or self to cancel)";
  1 == $noskip$$ && ($s$$ = "(or self)");
  this.log("select position to decloak " + $s$$);
  this.doselection(function($n$$) {
    this.resolveactionmove(this.getdecloakmatrix(this.m), function($t$$, $k$$) {
      (0 < $k$$ || 1 == $noskip$$) && this.removecloaktoken();
      this.hasdecloaked = !0;
      this.endnoaction($n$$, "DECLOAK");
    }.bind(this), !0, this.canmoveonobstacles("DECLOAK"));
  }.bind(this));
  return !0;
}, gettallonrollmatrix:function $Unit$$gettallonrollmatrix$($m$$, $maneuver$$) {
  var $m0$$ = this.getpathmatrix($m$$, $maneuver$$);
  return [$m0$$.clone().translate(0, -20), $m0$$, $m0$$.clone().translate(0, 20)];
}, getrollmatrix:function $Unit$$getrollmatrix$($m$jscomp$38_m0$$) {
  $m$jscomp$38_m0$$ = this.getpathmatrix(this.m.clone().rotate(90, 0, 0), "F1").translate(0, this.islarge ? 20 : 0).rotate(-90, 0, 0);
  var $m1$$ = this.getpathmatrix(this.m.clone().rotate(-90, 0, 0), "F1").translate(0, this.islarge ? 20 : 0).rotate(90, 0, 0);
  p = [$m$jscomp$38_m0$$.clone().translate(0, -20), $m$jscomp$38_m0$$, $m$jscomp$38_m0$$.clone().translate(0, 20), $m1$$.clone().translate(0, -20), $m1$$, $m1$$.clone().translate(0, 20)];
  this.islarge && (p = p.concat([$m$jscomp$38_m0$$.clone().translate(0, -40), $m$jscomp$38_m0$$.clone().translate(0, 40), $m1$$.clone().translate(0, -40), $m1$$.clone().translate(0, 40)]));
  return p;
}, resolveroll:function $Unit$$resolveroll$($n$$) {
  this.resolveactionmove(this.getrollmatrix(this.m), function($t$$, $k$$) {
    $t$$.endaction($n$$, "ROLL");
  }, !0, this.canmoveonobstacles("ROLL"));
}, boundtargets:function $Unit$$boundtargets$($i$jscomp$60_sh$$) {
  if (-1 < this.targeting.indexOf($i$jscomp$60_sh$$)) {
    return !0;
  }
  for ($i$jscomp$60_sh$$ = this.targeting.length - 1;0 <= $i$jscomp$60_sh$$;$i$jscomp$60_sh$$--) {
    this.removetarget(this.targeting[$i$jscomp$60_sh$$]);
  }
  return !1;
}, addtarget:function $Unit$$addtarget$($sh$$) {
  this.boundtargets($sh$$) || (this.targeting.push($sh$$), this.animateaddtoken("xtargettoken"), $sh$$.istargeted.push(this), $sh$$.animateaddtoken("xtargetedtoken"), this.movelog("T-" + $sh$$.id), $sh$$.show(), this.show());
}, gettargetableunits:function $Unit$$gettargetableunits$($n$$) {
  var $p$$ = [], $i$$;
  for ($i$$ in squadron) {
    this.isenemy(squadron[$i$$]) && this.getrange(squadron[$i$$]) <= $n$$ && $p$$.push(squadron[$i$$]);
  }
  return $p$$;
}, selectnearbyunits:function $Unit$$selectnearbyunits$($n$$, $f$$) {
  var $p$$ = [], $i$$;
  for ($i$$ in squadron) {
    $f$$(this, squadron[$i$$]) && this.getrange(squadron[$i$$]) <= $n$$ && $p$$.push(squadron[$i$$]);
  }
  return $p$$;
}, selectnearbyobstacle:function $Unit$$selectnearbyobstacle$($k$jscomp$22_n$$) {
  var $p$$ = [], $d$$ = 90000;
  1 == $k$jscomp$22_n$$ ? $d$$ = 10000 : 2 == $k$jscomp$22_n$$ && ($d$$ = 40000);
  for ($k$jscomp$22_n$$ = 0;$k$jscomp$22_n$$ < OBSTACLES.length;$k$jscomp$22_n$$++) {
    var $ob$$ = OBSTACLES[$k$jscomp$22_n$$];
    ($ob$$.type == DEBRIS || $ob$$.type == ROCK) && this.getdist(this.m, $ob$$) <= $d$$ && $p$$.push($ob$$);
  }
  return $p$$;
}, selectnearbyally:function $Unit$$selectnearbyally$($n$$, $f$$) {
  return this.selectnearbyunits($n$$, function($s$$, $t$$) {
    var $b$$ = !0;
    "function" == typeof $f$$ && ($b$$ = $f$$($s$$, $t$$));
    return $s$$.isally($t$$) && $s$$ != $t$$ && $b$$;
  });
}, selectnearbyallyandself:function $Unit$$selectnearbyallyandself$($n$$, $f$$) {
  return this.selectnearbyunits($n$$, function($s$$, $t$$) {
    var $b$$ = !0;
    "function" == typeof $f$$ && ($b$$ = $f$$($s$$, $t$$));
    return $s$$.isally($t$$) && $b$$;
  });
}, selectnearbyenemy:function $Unit$$selectnearbyenemy$($n$$, $f$$) {
  return this.selectnearbyunits($n$$, function($s$$, $t$$) {
    var $b$$ = !0;
    "function" == typeof $f$$ && ($b$$ = $f$$($s$$, $t$$));
    return $s$$.isenemy($t$$) && $b$$;
  });
}, isally:function $Unit$$isally$($t$$) {
  return $t$$.team == this.team;
}, isenemy:function $Unit$$isenemy$($t$$) {
  return $t$$.team != this.team;
}, resolvetargetnoaction:function $Unit$$resolvetargetnoaction$($n$$, $noaction$$) {
  var $p$$ = this.gettargetableunits(3);
  this.resolveactionselection($p$$, function($k$$) {
    0 <= $k$$ && this.addtarget($p$$[$k$$]);
    1 == $noaction$$ ? this.endnoaction($n$$, "TARGET") : this.endaction($n$$, "TARGET");
  }.bind(this));
}, resolvetarget:function $Unit$$resolvetarget$($n$$) {
  this.resolvetargetnoaction($n$$, !1);
}, addcloaktoken:function $Unit$$addcloaktoken$() {
  this.iscloaked = !0;
  this.agility += 2;
  this.animateaddtoken("xcloaktoken");
  this.movelog("CT");
  FAST || SOUNDS.cloak.play();
}, addcloak:function $Unit$$addcloak$($n$$) {
  this.addcloaktoken();
  this.endaction($n$$, "CLOAK");
}, resolveslam:function $Unit$$resolveslam$($n$$) {
  var $gd$jscomp$0$$ = this.getdial();
  $gd$jscomp$0$$.length <= this.lastmaneuver && (this.lastmaneuver = 0);
  for (var $speed$$ = $gd$jscomp$0$$[this.lastmaneuver].move.substr(-1), $p$jscomp$0$$ = [], $q$$ = [], $i$jscomp$0$$ = 0;$i$jscomp$0$$ < $gd$jscomp$0$$.length;$i$jscomp$0$$++) {
    $gd$jscomp$0$$[$i$jscomp$0$$].move.substr(-1) == $speed$$ && ($p$jscomp$0$$.push(this.getpathmatrix(this.m, $gd$jscomp$0$$[$i$jscomp$0$$].move)), $q$$.push($i$jscomp$0$$));
  }
  this.log("select maneuver for SLAM");
  this.noattack = round;
  this.wrap_after("getdial", this, function($gd$$) {
    for (var $p$$ = [], $i$$ = 0;$i$$ < $gd$$.length;$i$$++) {
      $p$$[$i$$] = {move:$gd$$[$i$$].move, difficulty:"WHITE"};
    }
    return $p$$;
  }).unwrapper("endmaneuver");
  this.wrap_after("endmaneuver", this, function() {
    this.endaction($n$$, "SLAM");
  }).unwrapper("endactivationphase");
  this.wrap_after("candoendmaneuveraction", this, function() {
    return !1;
  }).unwrapper("endphase");
  this.resolveactionmove($p$jscomp$0$$, function($t$$, $k$$) {
    this.maneuver = $q$$[$k$$];
    this.resolvemaneuver();
  }.bind(this), !1, !0);
}, enqueueaction:function $Unit$$enqueueaction$($callback$$, $org$$) {
  actionr.push($.Deferred());
  var $n$$ = actionr.length - 1;
  "undefined" == typeof $org$$ && ($org$$ = "undefined");
  actionr[$n$$].name = $org$$;
  0 == $n$$ ? $callback$$($n$$) : actionr[$n$$ - 1].done(function() {
    $callback$$($n$$);
  }.bind(this));
  return actionr[$n$$];
}, endnoaction:function $Unit$$endnoaction$($n$$, $type$$) {
  actionr[$n$$].resolve($type$$);
  $n$$ == actionr.length - 1 && actionrlock.resolve();
  this.show();
}, endaction:function $Unit$$endaction$($n$$, $type$$) {
  phase == ACTIVATION_PHASE && $("#activationdial").show();
  this.clearaction();
  this.endnoaction($n$$, $type$$);
}, resolveaction:function $Unit$$resolveaction$($a$$, $n$$) {
  $("#actiondial").empty();
  null == $a$$ ? this.endaction($n$$, null) : (this.actionsdone.push($a$$.name), $a$$.action.call($a$$.org, $n$$));
}, resolvenoaction:function $Unit$$resolvenoaction$($a$$, $n$$) {
  $("#actiondial").empty();
  null == $a$$ ? this.endnoaction($n$$, null) : $a$$.action.call($a$$.org, $n$$);
}, evaluatetohit:function $Unit$$evaluatetohit$($w$$, $sh$$) {
  var $r$$ = this.gethitrange($w$$, $sh$$);
  if ($sh$$ != this && 3 >= $r$$ && 0 < $r$$) {
    var $attack$$ = this.getattackstrength($w$$, $sh$$), $defense$$ = $sh$$.getdefensestrength($w$$, this), $r$$ = this.focus, $restorereroll$$ = this.reroll, $wp$$ = this.weapons[$w$$];
    -1 < this.targeting.indexOf($sh$$) && (this.reroll = 10);
    1 == $wp$$.consumes && "Target".match($wp$$.getrequirements()) && this.canusetarget($sh$$) && (this.reroll = 0);
    1 == $wp$$.consumes && "Focus".match($wp$$.getrequirements()) && this.canusefocus($sh$$) && this.focus--;
    $attack$$ = tohitproba(this, this.weapons[$w$$], $sh$$, this.getattacktable($attack$$), $sh$$.getdefensetable($defense$$), $attack$$, $defense$$);
    $r$$ && (this.focus = $r$$);
    $restorereroll$$ && (this.reroll = $restorereroll$$);
    return $attack$$;
  }
  return {proba:[], tohit:0, meanhit:0, meancritical:0, tokill:0};
}, isfireobstructed:function $Unit$$isfireobstructed$() {
  return -1 < this.ocollision.overlap && OBSTACLES[this.ocollision.overlap].type == ROCK;
}, hascollidedobstacle:function $Unit$$hascollidedobstacle$() {
  return -1 < this.ocollision.overlap || 0 < this.ocollision.template.length;
}, canfire:function $Unit$$canfire$() {
  return this.noattack < round && this.hasfired < this.maxfired && !this.iscloaked && !this.isfireobstructed();
}, getattackstrength:function $Unit$$getattackstrength$($i$$, $sh$$) {
  return this.weapons[$i$$].getattack() + this.weapons[$i$$].getrangeattackbonus($sh$$);
}, getobstructiondef:function $Unit$$getobstructiondef$($sh$$) {
  return this.getoutlinerange(this.m, $sh$$).o ? 1 : 0;
}, getdefensestrength:function $Unit$$getdefensestrength$($i$$, $sh$$) {
  var $def$$ = this.getagility(), $obstacledef$$ = $sh$$.getobstructiondef(this);
  0 < $obstacledef$$ && this.log("+%0 defense for obstacle", $obstacledef$$);
  return $def$$ + $sh$$.weapons[$i$$].getrangedefensebonus(this) + $obstacledef$$;
}, hasnorerollmodifiers:function $Unit$$hasnorerollmodifiers$($from$$, $to$$, $m$$, $n$$, $modtype$$) {
  for (var $mods$$ = this.getdicemodifiers(), $i$$ = 0;$i$$ < $mods$$.length;$i$$++) {
    var $d$$ = $mods$$[$i$$];
    if ($d$$.from == $from$$ && $d$$.to == $to$$ && $d$$.type == MOD_M && $d$$.req($m$$, $n$$) && $d$$.noreroll == $modtype$$) {
      return !0;
    }
  }
  return !1;
}, getresultmodifiers:function $Unit$$getresultmodifiers$($m$$, $n$jscomp$0$$, $from$$, $to$$) {
  var $i$jscomp$0$$, $getmod$$ = function $$getmod$$$($a$$, $i$$) {
    var $cl_e$$ = $a$$.str + ($from$$ == DEFENSE_M ? "modtokend" : "modtokena");
    "undefined" != typeof $a$$.token && ($cl_e$$ = "x" + $a$$.str + "token");
    $cl_e$$ = $("<td>").addClass($cl_e$$).attr({id:"mod" + $i$$, title:"modify roll [" + $a$$.org.name + "]"}).html("");
    $cl_e$$.click(function() {
      modroll(this.f, $i$$, $to$$);
    }.bind($a$$));
    return $cl_e$$;
  }, $getadd$$ = function $$getadd$$$($a$$, $i$$) {
    var $cl$jscomp$1_e$$ = $a$$.str + ($from$$ == DEFENSE_M ? "modtokend" : "modtokena");
    "undefined" != typeof $a$$.token && ($cl$jscomp$1_e$$ = "x" + $a$$.str + "token");
    $cl$jscomp$1_e$$ = $("<td>").addClass($cl$jscomp$1_e$$).attr({id:"mod" + $i$$, title:"add result [" + $a$$.org.name + "]"}).html("");
    $cl$jscomp$1_e$$.click(function() {
      addroll(this.f, $i$$, $to$$);
    }.bind($a$$));
    return $cl$jscomp$1_e$$;
  }, $getreroll$$ = function $$getreroll$$$($a$$, $i$$) {
    var $n$$ = $a$$.n(), $e$jscomp$10_s$$ = "R" + $n$$, $cl$$ = "tokens";
    $a$$.str && ($cl$$ = "x" + $a$$.str + "token", $e$jscomp$10_s$$ = "");
    $e$jscomp$10_s$$ = $("<td>").addClass($cl$$).attr({id:"reroll" + $i$$, title:$n$$ + " rerolls[" + $a$$.org.name + "]"}).html($e$jscomp$10_s$$);
    $e$jscomp$10_s$$.click(function() {
      reroll($n$$, $from$$, $to$$, $a$$, $i$$);
    });
    return $e$jscomp$10_s$$;
  }, $mods$$ = this.getdicemodifiers(), $lm$$ = [];
  for ($i$jscomp$0$$ = 0;$i$jscomp$0$$ < $mods$$.length;$i$jscomp$0$$++) {
    var $d$$ = $mods$$[$i$jscomp$0$$];
    $d$$.from == $from$$ && $d$$.to == $to$$ && ($d$$.type == MOD_M && $d$$.req.call(this, $m$$, $n$jscomp$0$$) && $lm$$.push($getmod$$($d$$, $i$jscomp$0$$)), $d$$.type == ADD_M && $d$$.req.call(this, $m$$, $n$jscomp$0$$) && $lm$$.push($getadd$$($d$$, $i$jscomp$0$$)), $d$$.type == REROLL_M && $d$$.req.call(this, activeunit, activeunit.weapons[activeunit.activeweapon], targetunit) && $lm$$.push($getreroll$$($d$$, $i$jscomp$0$$)));
  }
  return $lm$$;
}, addhasfired:function $Unit$$addhasfired$() {
  this.hasfired++;
}, resolveattack:function $Unit$$resolveattack$($w$$, $targetunit$$) {
  var $i$$;
  this.gethitrange($w$$, $targetunit$$);
  this.addhasfired();
  this.hasdamaged = !1;
  displaycombatdial();
  var $bb$$ = $targetunit$$.g.getBBox(), $start$$ = transformPoint(this.m, {x:0, y:-(this.islarge ? 40 : 20)});
  s.path("M " + $start$$.x + " " + $start$$.y + " L " + ($bb$$.x + $bb$$.w / 2) + " " + ($bb$$.y + $bb$$.h / 2)).appendTo(VIEWPORT).attr({stroke:this.color, strokeWidth:2, strokeDasharray:100, "class":"animated fireline"});
  this.select();
  for ($i$$ in squadron) {
    if (squadron[$i$$] == this) {
      break;
    }
  }
  this.preattackroll($w$$, $targetunit$$);
  this.doselection(function($n$$) {
    var $attack$$ = this.getattackstrength($w$$, $targetunit$$), $defense$$ = $targetunit$$.getdefensestrength($w$$, this);
    this.doattackroll(this.attackroll($attack$$), $attack$$, $defense$$, $i$$, $n$$);
  }.bind(this), "in combat");
}, preattackroll:function $Unit$$preattackroll$($w$$, $targetunit$$) {
}, doattack:function $Unit$$doattack$($weaponlist$$, $enemies$$) {
  this.activeweapons = $weaponlist$$;
  this.activeenemies = $enemies$$;
  this.showattack($weaponlist$$, $enemies$$);
}, doattackroll:function $Unit$$doattackroll$($ar$$, $ad$$, $defense$$, $me$$, $n$$) {
  $ar$$ = this.weapons[this.activeweapon].modifydamagegiven($ar$$);
  displayattackroll($ar$$, $ad$$);
  this.ar = $ar$$;
  this.ad = $ad$$;
  displayattacktokens(this, function() {
    targetunit.defenseroll($defense$$).done(function($r$$) {
      targetunit.dodefenseroll($r$$.roll, $r$$.dice, $me$$, $n$$);
    });
  });
}, dodefenseroll:function $Unit$$dodefenseroll$($dr$$, $dd$$, $me$$, $n$$) {
  this.dr = $dr$$;
  this.dd = $dd$$;
  displaydefenseroll($dr$$, $dd$$);
  displaydefensetokens(this, function() {
    this.resolvedamage();
    this.endnoaction($n$$, "in combat");
  }.bind(squadron[$me$$]));
}, drawpathmove:function $Unit$$drawpathmove$($mm$$, $p$jscomp$27_path$$, $lenC$$) {
  if (!FAST) {
    if (this.islarge) {
      var $m$$ = $mm$$.clone();
      s.path("M 0 0 l 0 -20").transform($m$$).appendTo(VIEWPORT).attr({stroke:this.color, display:TRACE ? "block" : "none", strokeWidth:"20px", opacity:0.2, fill:"rgba(0,0,0,0)"}).addClass("trace");
      $p$jscomp$27_path$$ = s.path($p$jscomp$27_path$$.getSubpath(0, $lenC$$ - 40)).attr("display", "none");
      $p$jscomp$27_path$$.clone().transform($m$$.translate(0, -20)).appendTo(VIEWPORT).attr({stroke:this.color, display:TRACE ? "block" : "none", strokeWidth:"20px", opacity:0.2, fill:"rgba(0,0,0,0)"}).addClass("trace");
      s.path("M 0 0 l 0 -20").transform(this.getmatrixwithmove($mm$$, $p$jscomp$27_path$$, $lenC$$ - 20)).appendTo(VIEWPORT).attr({stroke:this.color, display:TRACE ? "block" : "none", strokeWidth:"20px", opacity:0.2, fill:"rgba(0,0,0,0)"}).addClass("trace");
    } else {
      s.path($p$jscomp$27_path$$.getSubpath(0, $lenC$$)).transform($mm$$).attr({stroke:this.color, display:TRACE ? "block" : "none", strokeWidth:"20px", opacity:0.2, fill:"rgba(0,0,0,0)"}).addClass("trace").appendTo(VIEWPORT);
    }
    this.show();
  }
}, getmatrixwithmove:function $Unit$$getmatrixwithmove$($m$jscomp$42_mm$$, $movePoint_path$$, $len$$) {
  var $lenC$$ = $movePoint_path$$.getTotalLength();
  $m$jscomp$42_mm$$ = $m$jscomp$42_mm$$.clone();
  this.islarge ? 20 >= $len$$ ? $m$jscomp$42_mm$$.translate(0, -$len$$) : ($lenC$$ = $len$$ > $lenC$$ + 20 ? $len$$ - $lenC$$ - 20 : 0, $movePoint_path$$ = $movePoint_path$$.getPointAtLength($len$$ - $lenC$$ - 20), $m$jscomp$42_mm$$.translate($movePoint_path$$.x, -20 + $movePoint_path$$.y).rotate($movePoint_path$$.alpha - 90, 0, 0).translate(0, -$lenC$$)) : ($movePoint_path$$ = $movePoint_path$$.getPointAtLength($len$$), $m$jscomp$42_mm$$.translate($movePoint_path$$.x, $movePoint_path$$.y).rotate($movePoint_path$$.alpha - 
  90, 0, 0));
  return $m$jscomp$42_mm$$;
}, removestresstoken:function $Unit$$removestresstoken$() {
  0 < this.stress && (this.stress--, this.animateremovetoken("xstresstoken"));
  this.movelog("st");
  this.show();
}, handledifficulty:function $Unit$$handledifficulty$($difficulty$$) {
  "RED" == $difficulty$$ ? this.addstress() : "GREEN" == $difficulty$$ && 0 < this.stress && this.removestresstoken();
}, completemaneuver:function $Unit$$completemaneuver$($dial$$, $difficulty$$, $halfturn$$, $finalm$$) {
  var $path$$ = P[$dial$$].path, $m$$, $oldm$$;
  this.maneuverdifficulty = $difficulty$$;
  if ("F0" == $dial$$) {
    this.hasmoved = !0, this.handledifficulty($difficulty$$), this.lastmaneuver = this.maneuver, this.endmaneuver(), this.touching = [];
  } else {
    var $lenC$$ = $path$$.getTotalLength();
    this.collision = !1;
    this.showhitsector(!1);
    this.islarge && ($lenC$$ += 40);
    $oldm$$ = this.m;
    $m$$ = this.getmatrixwithmove(this.m, $path$$, $lenC$$);
    var $c$jscomp$18_sh$$ = this.getcollidingunits($m$$), $col$$ = [];
    if (0 < $c$jscomp$18_sh$$.length) {
      for (this.log("collides with %0: no action", $c$jscomp$18_sh$$[0].name), this.collision = !0;0 < $lenC$$ && 0 < $c$jscomp$18_sh$$.length;) {
        $col$$ = $c$jscomp$18_sh$$, --$lenC$$, $m$$ = this.getmatrixwithmove(this.m, $path$$, $lenC$$), $c$jscomp$18_sh$$ = this.getcollidingunits($m$$);
      }
    }
    this.drawpathmove(this.m, $path$$, $lenC$$);
    for (i = 0;i < this.touching.length;i++) {
      $c$jscomp$18_sh$$ = this.touching[i], $c$jscomp$18_sh$$.touching.splice($c$jscomp$18_sh$$.touching.indexOf(this), 1);
    }
    this.touching = $col$$;
    this.ocollision = this.getocollisions($oldm$$, $m$$, $path$$, $lenC$$);
    this.isfireobstructed() && this.log("overlaps obstacle: cannot attack");
    this.hascollidedobstacle() && this.log("unit or template overlaps obstacle: no action");
    0 < $lenC$$ && (this.m = $m$$);
    var $turn$$ = 0;
    0 < $lenC$$ ? (this.hasmoved = !0, $("#activationdial").empty(), FAST || SOUNDS[this.ship.flysnd].play(), Snap.animate(0, $lenC$$, function($value$$) {
      $m$$ = this.getmatrixwithmove($oldm$$, $path$$, $value$$);
      this.g.transform($m$$);
      this.geffect.transform($m$$);
    }.bind(this), TIMEANIM * $lenC$$ / 200, mina.linear, function() {
      this.collision || ($dial$$.match(/K\d|SR\d|SL\d/) || 1 == $halfturn$$ ? (this.m.rotate(180, 0, 0), $turn$$ = 180) : $dial$$.match(/TRL\d/) ? (this.m.rotate(-90, 0, 0), $turn$$ = -90) : $dial$$.match(/TRR\d/) && ("undefined" != typeof $finalm$$ ? this.m = $finalm$$ : this.m.rotate(90, 0, 0), $turn$$ = 90));
      this.movelog("m-" + $dial$$ + "-" + (360 + $turn$$) % 360 + "-" + Math.floor($lenC$$));
      this.handledifficulty($difficulty$$);
      this.lastmaneuver = this.maneuver;
      this.hascollidedobstacle() && this.resolveocollision(this.ocollision.overlap, this.ocollision.template);
      if (0 < this.ocollision.mine.length) {
        for (i = 0;i < this.ocollision.mine.length;i++) {
          this.ocollision.mine[i].detonate(this, !1);
        }
      }
      this.collision && this.resolvecollision();
      this.endmaneuver();
    }.bind(this))) : (this.hasmoved = !0, this.log("cannot move"), this.handledifficulty($difficulty$$), this.lastmaneuver = this.maneuver, this.collision && this.resolvecollision(), this.endmaneuver());
  }
}, getmaneuverlist:function $Unit$$getmaneuverlist$() {
  var $m$$ = this.getmaneuver(), $rm$$ = {};
  $rm$$[$m$$.move] = $m$$;
  return "undefined" != typeof $m$$ ? $rm$$ : {};
}, resolvemaneuver:function $Unit$$resolvemaneuver$() {
  $("#activationdial").empty();
  if (!(0 > this.maneuver)) {
    var $p$$ = [], $q$$ = [], $ml$$ = this.getmaneuverlist(), $i$$;
    for ($i$$ in $ml$$) {
      if ($q$$.push($ml$$[$i$$]), $ml$$[$i$$].move.match(/TRR\d|TRL\d/)) {
        for (var $gtr$$ = this.gettallonrollmatrix(this.m, $ml$$[$i$$].move), $j$$ = 0;$j$$ < $gtr$$.length;$j$$++) {
          $p$$.push($gtr$$[$j$$]), 0 < $j$$ && $q$$.push($ml$$[$i$$]);
        }
      } else {
        1 != $ml$$[$i$$].halfturn || $ml$$[$i$$].move.match(/K\d|SR\d|SL\d/) ? $p$$.push(this.getpathmatrix(this.m, $ml$$[$i$$].move)) : $p$$.push(this.getpathmatrix(this.m, $ml$$[$i$$].move).rotate(180, 0, 0));
      }
    }
    this.resolveactionmove($p$$, function($t$$, $k$$) {
      -1 == $k$$ && ($k$$ = 0);
      var $dial$$ = $q$$[$k$$].move, $difficulty$$ = $q$$[$k$$].difficulty;
      1 != $q$$[$k$$].halfturn && ($q$$[$k$$].halfturn = !1);
      this.completemaneuver($dial$$, $difficulty$$, $q$$[$k$$].halfturn, $p$$[$k$$]);
    }.bind(this), !1, !0);
  }
}, endmaneuver:function $Unit$$endmaneuver$() {
  var $p$$ = this.ionized;
  if (this.hasionizationeffect()) {
    for (var $i$$ = 0;$i$$ < $p$$;$i$$++) {
      this.removeiontoken();
    }
  }
  this.maneuver = -1;
  this.hasmoved = !0;
  this.show();
  this.checkdead() ? this.shield = this.hull = 0 : this.doendmaneuveraction();
  this.cleanupmaneuver();
}, cleanupmaneuver:function $Unit$$cleanupmaneuver$() {
  this.actionbarrier();
}, unlock:function $Unit$$unlock$($v$$) {
  this.show();
  return this.deferred.resolve($v$$);
}, newlock:function $Unit$$newlock$() {
  this.deferred = $.Deferred();
  return this.deferred.promise();
}, enddecloak:function $Unit$$enddecloak$() {
  return this.newlock();
}, candomaneuver:function $Unit$$candomaneuver$() {
  return -1 < this.maneuver;
}, addafterattackeffect:function $Unit$$addafterattackeffect$($org$$, $f$$) {
  this.wrap_after("afterattackeffect", $org$$, $f$$);
}, addafterdefenseeffect:function $Unit$$addafterdefenseeffect$($org$$, $f$$) {
  this.wrap_after("afterdefenseeffect", $org$$, $f$$);
}, isattacktwice:function $Unit$$isattacktwice$() {
  return !1;
}, addattack:function $Unit$$addattack$($f$$, $org$$, $weaponlist$$, $effect$$, $targetselector$$, $wrapper$$, $global$$) {
  var $self$$ = this;
  "undefined" == typeof $wrapper$$ && ($wrapper$$ = "endattack");
  "undefined" == typeof $global$$ && ($global$$ = !1);
  ($global$$ ? Unit.prototype : this).wrap_after($wrapper$$, $org$$, function($c$$, $h$$, $attacker$$) {
    var $anyactiveweapon_fctattack$$ = !1;
    "removeshield" == $wrapper$$ || "warndeath" == $wrapper$$ || "endmaneuver" == $wrapper$$ ? $attacker$$ = activeunit : "undefined" == typeof $attacker$$ && ($attacker$$ = this);
    for (i in $weaponlist$$) {
      if ($weaponlist$$[i].isactive) {
        $anyactiveweapon_fctattack$$ = !0;
        break;
      }
    }
    if ($f$$.call($self$$, $c$$, $h$$, $attacker$$) && $self$$.noattack < round && $anyactiveweapon_fctattack$$ && !$self$$.iscloaked && !$self$$.isfireobstructed()) {
      var $latedeferred$$ = $attacker$$.deferred, $anyactiveweapon_fctattack$$ = function() {
        var $enemies$$, $wpl$$ = [];
        this.deferred = $latedeferred$$;
        $enemies$$ = "function" == typeof $targetselector$$ ? $targetselector$$.call(this) : this.selectnearbyenemy(3);
        for (var $i$$ in $weaponlist$$) {
          $weaponlist$$[$i$$].isactive && 0 < $weaponlist$$[$i$$].getenemiesinrange($enemies$$).length && $wpl$$.push($weaponlist$$[$i$$]);
        }
        0 == $wpl$$.length ? (this.log("no available target for %0", $org$$.name), this.cleanupattack()) : $f$$.call(this, $c$$, $h$$, $attacker$$) ? (this.log("+1 attack [%0]", $org$$.name), "function" == typeof $effect$$ && this.wrap_before("resolveattack", this, function() {
          $effect$$.call(this);
        }.bind(this)).unwrapper("cleanupattack"), this.maxfired++, this.doattack($wpl$$, $enemies$$)) : this.cleanupattack();
      }.bind($self$$);
      "endcombatphase" != $wrapper$$ && "warndeath" != $wrapper$$ && phase == COMBAT_PHASE ? $attacker$$.newlock().done($anyactiveweapon_fctattack$$) : $anyactiveweapon_fctattack$$();
    }
  });
}, candoendmaneuveraction:function $Unit$$candoendmaneuveraction$() {
  return this.candoaction() && !this.collision && !this.hascollidedobstacle();
}, doendmaneuveraction:function $Unit$$doendmaneuveraction$() {
  return this.doaction(this.getactionlist(!0), "", this.candoendmaneuveraction);
}, doselection:function $Unit$$doselection$($f$$, $org$$) {
  return this.enqueueaction($f$$, $org$$);
}, isactiondone:function $Unit$$isactiondone$($name$$) {
  return -1 != this.actionsdone.indexOf($name$$);
}, doaction:function $Unit$$doaction$($list$$, $str$$, $candoaction$$) {
  "undefined" == typeof $candoaction$$ && ($candoaction$$ = this.candoaction);
  return 0 == $list$$.length ? (this.log("no action available"), this.enqueueaction(function($n$$) {
    this.endnoaction($n$$);
  }.bind(this), this.name)) : this.enqueueaction(function($n$$) {
    var $i$$;
    $("#actiondial").empty();
    if ($candoaction$$.call(this)) {
      this.select();
      "undefined" != typeof $str$$ && "" != $str$$ && this.log($str$$);
      $("#actiondial").html($("<div>"));
      for ($i$$ = 0;$i$$ < $list$$.length;$i$$++) {
        this.isactiondone($list$$[$i$$].name) || function($k$$, $h$$) {
          var $e$$ = $("<div>").addClass("symbols").text(A[$k$$.type].key).click(function() {
            this.resolveaction($k$$, $n$$);
          }.bind(this));
          "BOMB" == $k$$.type && $e$$.addClass("bombs");
          $e$$.attr("title", $list$$[$i$$].name);
          "/2" == $list$$[$i$$].name.slice(-2) && $e$$.css("color", "yellow");
          $("#actiondial > div").append($e$$);
        }.call(this, $list$$[$i$$], $i$$);
      }
      var $e$jscomp$0$$ = $("<button>").addClass("m-skip").addClass("wbutton").click(function() {
        this.resolveaction(null, $n$$);
      }.bind(this));
      $("#actiondial > div").append($e$jscomp$0$$);
    } else {
      this.endaction($n$$, null);
    }
  }.bind(this), $list$$[0].name);
}, donoaction:function $Unit$$donoaction$($list$$, $str$$, $noskip$$, $skipaction$$) {
  return 0 == $list$$.length ? (this.log("no action available"), this.enqueueaction(function($n$$) {
    this.endnoaction($n$$);
  }.bind(this), this.name)) : this.enqueueaction(function($n$$) {
    var $e$jscomp$13_i$$;
    "undefined" != typeof $str$$ && "" != $str$$ && this.log($str$$);
    this.select();
    $("#actiondial").html($("<div>"));
    for ($e$jscomp$13_i$$ = 0;$e$jscomp$13_i$$ < $list$$.length;$e$jscomp$13_i$$++) {
      (function($k$$, $h$$) {
        var $e$$ = $("<div title='" + $k$$.name + "'>").addClass("symbols").text(A[$k$$.type].key).click(function() {
          this.resolvenoaction($k$$, $n$$);
        }.bind(this));
        $("#actiondial > div").append($e$$);
      }).call(this, $list$$[$e$jscomp$13_i$$], $e$jscomp$13_i$$);
    }
    1 == $noskip$$ && ($e$jscomp$13_i$$ = $("<button>").addClass("m-skip").addClass("wbutton").click(function() {
      "function" == typeof $skipaction$$ && $skipaction$$();
      this.resolvenoaction(null, $n$$);
    }.bind(this)), $("#actiondial > div").append($e$jscomp$13_i$$));
  }.bind(this), $list$$[0].name);
}, hasnostresseffect:function $Unit$$hasnostresseffect$() {
  return 0 == this.stress;
}, candoaction:function $Unit$$candoaction$() {
  return this.hasnostresseffect();
}, candecloak:function $Unit$$candecloak$() {
  return this.iscloaked && phase == ACTIVATION_PHASE && !this.hasdecloaked;
}, selecttargetforattack:function $Unit$$selecttargetforattack$($wp$$, $enemies$$) {
  var $p$$;
  ENGAGED = !0;
  $p$$ = this.weapons[$wp$$].getenemiesinrange($enemies$$);
  if (0 == $p$$.length) {
    return this.log("no target for %0", this.weapons[$wp$$].name), this.cleanupattack(), !1;
  }
  $("#attackdial").empty();
  this.selectunit($p$$, function($q$$, $k$$) {
    $q$$[$k$$] != this && this.declareattack($wp$$, $q$$[$k$$]) ? this.resolveattack($wp$$, $q$$[$k$$]) : this.cleanupattack();
  }, [""], !1);
  return !0;
}, showattack:function $Unit$$showattack$($weaponlist$$, $enemylist$$) {
  var $wn$$ = [], $i$jscomp$80_j$$, $w$$;
  $("#attackdial").show();
  "undefined" == typeof $weaponlist$$ && ($weaponlist$$ = this.weapons);
  var $r$$ = this.getenemiesinrange($weaponlist$$, $enemylist$$), $d$$ = $("<div>");
  for ($i$jscomp$80_j$$ = $w$$ = 0;$w$$ < $weaponlist$$.length;$w$$++) {
    0 < $r$$[$w$$].length && ($wn$$[$i$jscomp$80_j$$++] = this.weapons.indexOf($weaponlist$$[$w$$]));
  }
  var $self$$ = this;
  for ($i$jscomp$80_j$$ = 0;$i$jscomp$80_j$$ < $wn$$.length;$i$jscomp$80_j$$++) {
    (function($ww$$) {
      var $widx$$ = A[$self$$.weapons[$ww$$].type.toUpperCase()];
      $d$$.append($("<div>").attr({"class":"symbols " + $ww$$.color}).html($widx$$.key).click(function() {
        $self$$.selecttargetforattack($ww$$, $enemylist$$);
      }));
    })($wn$$[$i$jscomp$80_j$$]);
  }
  $d$$.append($("<button>").attr({"class":"m-skip wbutton"}).click(function() {
    this.addhasfired();
    this.show();
    this.cleanupattack();
  }.bind(this)));
  $("#attackdial").html($d$$);
}, candotarget:function $Unit$$candotarget$() {
  return 0 < this.gettargetableunits(3).length;
}, candofocus:function $Unit$$candofocus$() {
  return !0;
}, candoevade:function $Unit$$candoevade$() {
  return !0;
}, candropbomb:function $Unit$$candropbomb$() {
  return this.lastdrop != round && this.getskill() == skillturn;
}, addactivationdial:function $Unit$$addactivationdial$($pred$$, $action$$, $html$$, $elt$$) {
  this.activationdial.push({pred:$pred$$, action:$action$$, html:$html$$, elt:$elt$$});
}, actionbarrier:function $Unit$$actionbarrier$() {
  actionrlock = $.Deferred();
  this.areactionspending() ? actionrlock.done(function() {
    this.unlock();
  }.bind(this)) : (actionrlock.resolve(), this.unlock());
}, addafteractions:function $Unit$$addafteractions$($f$$) {
  actionrlock.done($f$$);
}, areactionspending:function $Unit$$areactionspending$() {
  for (var $i$$ = 0;$i$$ < actionr.length;$i$$++) {
    if ("pending" == actionr[$i$$].state()) {
      return !0;
    }
  }
  return !1;
}, dodecloak:function $Unit$$dodecloak$() {
  this.iscloaked ? this.resolvedecloak() : this.hasdecloaked = !0;
  this.actionbarrier();
}, getbomblocation:function $Unit$$getbomblocation$() {
  return ["F1"];
}, getbombposition:function $Unit$$getbombposition$($lm$$, $size$$) {
  for (var $p$$ = [], $i$$ = 0;$i$$ < $lm$$.length;$i$$++) {
    $p$$.push(this.getpathmatrix(this.m.clone().rotate(180, 0, 0), $lm$$[$i$$]).translate(0, (this.islarge ? 40 : 20) - $size$$));
  }
  return $p$$;
}, bombdropped:function $Unit$$bombdropped$() {
}, updateactivationdial:function $Unit$$updateactivationdial$() {
  var $self$$ = this;
  this.activationdial = [];
  if (!(this.candropbomb() && this.hasionizationeffect() || $self$$.lastdrop == round)) {
    switch(this.bombs.length) {
      case 3:
        this.bombs[2].canbedropped() && this.addactivationdial(function() {
          return $self$$.lastdrop != round && $self$$.bombs[2].canbedropped();
        }, function() {
          $self$$.lastdrop = round;
          $(".bombs").remove();
          $self$$.bombs[2].actiondrop();
        }, A.BOMB.key, $("<div>").attr({"class":"symbols bombs", title:$self$$.bombs[2].name}));
      case 2:
        this.bombs[1].canbedropped() && this.addactivationdial(function() {
          return $self$$.lastdrop != round && $self$$.bombs[1].canbedropped();
        }, function() {
          $self$$.lastdrop = round;
          $(".bombs").remove();
          $self$$.bombs[1].actiondrop();
        }, A.BOMB.key, $("<div>").attr({"class":"symbols bombs", title:$self$$.bombs[1].name}));
      case 1:
        this.bombs[0].canbedropped() && this.addactivationdial(function() {
          return $self$$.lastdrop != round && $self$$.bombs[0].canbedropped();
        }, function() {
          $self$$.lastdrop = round;
          $(".bombs").remove();
          $self$$.bombs[0].actiondrop();
        }, A.BOMB.key, $("<div>").attr({"class":"symbols bombs", title:$self$$.bombs[0].name}));
    }
  }
  return this.activationdial;
}, doactivation:function $Unit$$doactivation$() {
  this.showactivation();
}, showactivation:function $Unit$$showactivation$() {
  $("#activationdial").html("<div></div>");
  if (this.timeformaneuver() && !this.areactionspending()) {
    for (var $ad$$ = this.updateactivationdial(), $i$$ = 0;$i$$ < $ad$$.length;$i$$++) {
      (function($k$$) {
        var $adi$$ = $ad$$[$k$$];
        $adi$$.pred() && $adi$$.elt.appendTo("#activationdial > div").click(function() {
          $("#activationdial").html("<div></div>");
          $adi$$.action();
        }).html($adi$$.html);
      })($i$$);
    }
    $("<button>").addClass("m-move").addClass("wbutton").click(function() {
      this.resolvemaneuver();
    }.bind(this)).appendTo("#activationdial > div");
  }
}, movelog:function $Unit$$movelog$($s$$) {
  $s$$.match(/L-%%.*/) && this.setinfo(decodeURIComponent($s$$.substring(4, $s$$.length - 2))).delay(1500).fadeOut(400);
  ANIM += "_" + this.id + "-" + $s$$;
}, computepoints:function $Unit$$computepoints$() {
}, error:function $Unit$$error$($str$$) {
  $str$$ = formatstring($str$$);
  log("<div><span style='color:red;font-weight:bold;'>**ERROR** [" + this.name + "]</span> " + $str$$ + "</div>");
}, log:function $Unit$$log$($str$$, $a$$, $b$$, $c$$) {
  NOLOG || ("undefined" != typeof UI_translation[$str$$] && ($str$$ = UI_translation[$str$$]), "string" == typeof $a$$ && ($a$$ = translate($a$$)), $str$$ = $str$$.replace(/%0/g, $a$$), "string" == typeof $b$$ && ($b$$ = translate($b$$)), $str$$ = $str$$.replace(/%1/g, $b$$), "string" == typeof $c$$ && ($c$$ = translate($c$$)), $str$$ = $str$$.replace(/%2/g, $c$$), $str$$ = formatstring($str$$), log("<div><span style='color:" + this.color + "'>[" + this.name + "]</span> " + $str$$ + "</div>"));
}, candocloak:function $Unit$$candocloak$() {
  return !this.iscloaked;
}, clearaction:function $Unit$$clearaction$() {
  this.action = -1;
}, showaction:function $Unit$$showaction$() {
  if (this.action < this.actionList.length && -1 < this.action) {
    var $c$$ = A[this.actionList[this.action].type].color;
    this.actionicon.attr({fill:this == activeunit ? $c$$ : halftone($c$$)});
  } else {
    this.actionicon.attr({text:""});
  }
}, showinfo:function $Unit$$showinfo$() {
  var $i$$ = 0, $h$jscomp$17_u$$ = $("#" + this.id + " .usabletokens").html(), $gut$$ = this.getusabletokens();
  $("#" + this.id + " .usabletokens").html($gut$$);
  if ($h$jscomp$17_u$$ != $gut$$) {
    for (var $j$$ in squadron) {
      $h$jscomp$17_u$$ = squadron[$j$$], this.isally($h$jscomp$17_u$$) && this.getskill() >= $h$jscomp$17_u$$.getskill() && $h$jscomp$17_u$$.showoverflow();
    }
  }
  0 < this.focus && this.infoicon[$i$$++].attr({text:A.FOCUS.key, fill:A.FOCUS.color});
  0 < this.evade && this.infoicon[$i$$++].attr({text:A.EVADE.key, fill:A.EVADE.color});
  1 == this.iscloaked && this.infoicon[$i$$++].attr({text:A.CLOAK.key, fill:A.CLOAK.color});
  0 < this.targeting.length && 6 > $i$$ && this.infoicon[$i$$++].attr({text:A.TARGET.key, fill:A.TARGET.color});
  0 < this.istargeted.length && this.infoicon[$i$$++].attr({text:A.ISTARGETED.key, fill:A.ISTARGETED.color});
  0 < this.stress && 6 > $i$$ && this.infoicon[$i$$++].attr({text:A.STRESS.key, fill:A.STRESS.color});
  0 < this.ionized && 6 > $i$$ && this.infoicon[$i$$++].attr({text:"Z", fill:A.STRESS.color});
  0 < this.tractorbeam && 6 > $i$$ && this.infoicon[$i$$++].attr({text:"Y", fill:A.STRESS.color});
  for ($j$$ = $i$$;6 > $j$$;$j$$++) {
    this.infoicon[$i$$++].attr({text:""});
  }
}, showoutline:function $Unit$$showoutline$() {
  this.border.attr({stroke:activeunit == this ? this.color : halftone(this.color)});
}, dock:function $Unit$$dock$($parent$$) {
  this.isdocked = !0;
  $("#" + this.id).attr("onclick", "");
  $("#" + this.id).addClass("docked");
  $("#" + this.id).html("" + this);
  this.g.attr({display:"none"});
  this.geffect.attr({display:"none"});
  this.log("docked on %0", $parent$$.name);
  this.show();
  $parent$$.docked = this;
}, deploy:function $Unit$$deploy$($parent$$, $dm$$) {
  this.movelog("DPY");
  $("#" + this.id).removeClass("docked");
  $("#" + this.id).html("" + this);
  $("#" + this.id + " .outoverflow").each(function($index$$) {
    "auto" != $(this).css("top") && $(this).css("top", $(this).parent().offset().top + "px");
  });
  $("#" + this.id).click(function() {
    this.select();
  }.bind(this));
  this.g.attr({display:"block"});
  this.geffect.attr({display:"block"});
  this.m = $parent$$.m.clone();
  this.isdocked = !1;
  this.log("deploying from %0", $parent$$.name);
  this.show();
  $parent$$.docked = null;
  this.log("select maneuver for deployment");
  $parent$$.doselection(function($n$$) {
    this.resolveactionmove($dm$$, function($t$$, $k$$) {
      var $half$$ = this.getdial().length;
      $k$$ >= $half$$ ? (this.m.translate(0, -20), $k$$ -= $half$$) : this.m.translate(0, 20).rotate(180, 0, 0);
      this.maneuver = $k$$;
      this.resolvemaneuver();
    }.bind(this), !1, !0);
    $parent$$.endnoaction($n$$, "DEPLOY");
  }.bind(this));
}, endcombatphase:function $Unit$$endcombatphase$() {
  $(".fireline").remove();
}, endphase:function $Unit$$endphase$() {
}, beginplanningphase:function $Unit$$beginplanningphase$() {
  this.actionsdone = [];
  return this.newlock();
}, beginactivationphase:function $Unit$$beginactivationphase$() {
  return this.newlock();
}, timetoshowmaneuver:function $Unit$$timetoshowmaneuver$() {
  return -1 < this.maneuver && phase <= ACTIVATION_PHASE;
}, getmaneuver:function $Unit$$getmaneuver$() {
  return this.hasionizationeffect() ? {move:"F1", difficulty:"WHITE"} : this.getdial()[this.maneuver];
}, showmaneuver:function $Unit$$showmaneuver$() {
  if (this.timetoshowmaneuver()) {
    var $d$$ = this.getmaneuver(), $c$$ = C["undefined" != typeof this.forceddifficulty ? this.forceddifficulty : $d$$.difficulty];
    activeunit != this && ($c$$ = halftone($c$$));
    this.dialspeed.attr({text:P[$d$$.move].speed, fill:$c$$});
    this.dialdirection.attr({text:P[$d$$.move].key, fill:$c$$});
  }
}, clearmaneuver:function $Unit$$clearmaneuver$() {
  this.dialspeed.attr({text:""});
  this.dialdirection.attr({text:""});
}, beginactivation:function $Unit$$beginactivation$() {
  this.showmaneuver();
  this.show();
}, endactivationphase:function $Unit$$endactivationphase$() {
}, hasionizationeffect:function $Unit$$hasionizationeffect$() {
  return 0 < this.ionized && !this.islarge || 1 < this.ionized;
}, begincombatphase:function $Unit$$begincombatphase$() {
  return this.newlock();
}, beginattack:function $Unit$$beginattack$() {
}, toString:function $Unit$$toString$() {
  if (phase == SELECT_PHASE || phase == CREATION_PHASE) {
    return this.toString2();
  }
  var $a$jscomp$34_i$$, $n$$ = 8;
  $a$jscomp$34_i$$ = squadron.indexOf(this);
  str = -1 == $a$jscomp$34_i$$ ? "<div class='dead '>" : this.isdocked ? "<div class='docked'>" : "<div>";
  str += "<div><div class='statskill'>" + this.getskill() + "</div>";
  t = formatstring(getpilottexttranslation(this, this.faction));
  str += "<div class='name'>";
  "" != t && (str += "<div class='tooltip outoverflow'><span>" + t + "</span></div>");
  str += "<div>" + translate(this.name) + "</div></div>";
  text = SHIP_translation[this.ship.name];
  "undefined" == typeof text && (text = this.ship.name);
  str += "<div><div style='font-size:smaller'><code class='" + this.faction + "'></code>&nbsp;" + text + "</div></div>";
  $n$$ += 2 * this.upgrades.length;
  this.hull + this.shield <= $n$$ ? (str += "<div class='outoverflow stat'>", str += "<div class='hull'>" + repeat("u ", this.hull) + "</div>", str += "<div class='shield'>" + repeat("u ", this.shield) + "</div></div>") : this.hull > $n$$ ? (str += "<div class='outoverflow stat'>", str += "<div class='hull'>" + repeat("u ", $n$$) + "</div></div>", this.hull <= 2 * $n$$ ? (str += "<div class='outoverflow stat2'>", str += "<div class='hull'>" + repeat("u ", this.hull - $n$$) + "</div>", this.shield + 
  this.hull <= 2 * $n$$ ? str += "<div class='shield'>" + repeat("u ", this.shield) + "</div></div>" : (str += "<div class='shield'>" + repeat("u ", 2 * $n$$ - this.hull) + "</div></div>", str += "<div class='outoverflow stat3'>", str += "<div class='shield'>" + repeat("u ", this.shield - 2 * $n$$ + this.hull) + "</div></div>")) : (str += "<div class='outoverflow stat2'><div class='hull'>" + repeat("u ", $n$$) + "</div></div>", str += "<div class='outoverflow stat3'><div class='hull'>" + repeat("u ", 
  this.hull - 2 * $n$$) + "</div>", str += "<div class='shield'>" + repeat("u ", this.shield) + "</div></div>")) : (str += "<div class='outoverflow stat'><div class='hull'>" + repeat("u ", this.hull) + "</div>", str += "<div class='shield'>" + repeat("u ", $n$$ - this.hull) + "</div></div>", str += "<div class='outoverflow stat2'><div class='shield'>" + repeat("u ", this.shield - $n$$ + this.hull) + "</div></div>");
  str += "<div><div>";
  -1 < $a$jscomp$34_i$$ && (str += "<div class='usabletokens' style='width:100%'>" + this.getusabletokens() + "</div>");
  str += "</div></div>";
  var $stru$$ = $n$$ = "", $strc$$ = "";
  $a$jscomp$34_i$$ = "<td><button class='statevade' onclick='if (!squadron[" + $a$jscomp$34_i$$ + "].dead&&!squadron[" + $a$jscomp$34_i$$ + "].isdocked) squadron[" + $a$jscomp$34_i$$ + "].togglerange();'><span class='val'>" + this.getagility() + "</span><span class='symbols'>^</span></button></td>";
  $n$$ = 1 == this.team ? $n$$ + ("<tr><td></td>" + $a$jscomp$34_i$$ + "</tr>") : $n$$ + ("<tr>" + $a$jscomp$34_i$$ + "<td></td></tr>");
  for ($a$jscomp$34_i$$ = 0;$a$jscomp$34_i$$ < this.upgrades.length;$a$jscomp$34_i$$++) {
    $stru$$ += this.upgrades[$a$jscomp$34_i$$];
  }
  for ($a$jscomp$34_i$$ = 0;$a$jscomp$34_i$$ < this.criticals.length;$a$jscomp$34_i$$++) {
    $strc$$ += this.criticals[$a$jscomp$34_i$$];
  }
  return str += "<table class='details' style='width:100%'>" + $n$$ + $stru$$ + $strc$$ + "</table></div>";
}, canusefocus:function $Unit$$canusefocus$() {
  return 0 < this.focus;
}, canuseevade:function $Unit$$canuseevade$() {
  return 0 < this.evade;
}, canusetarget:function $Unit$$canusetarget$($sh$$) {
  return 0 < this.targeting.length && ("undefined" == typeof $sh$$ || -1 < this.targeting.indexOf($sh$$));
}, getusabletokens:function $Unit$$getusabletokens$() {
  this.focuses = 1 < this.focus ? [this.focus] : [];
  this.evades = 1 < this.evade ? [this.evade] : [];
  this.stresses = 1 < this.stress ? [this.stress] : [];
  this.ionizedes = 1 < this.ionized ? [this.ionized] : [];
  this.tractorbeames = 1 < this.tractorbeam ? [this.tractorbeam] : [];
  this.targetedname = [];
  this.targetingname = [];
  for (var $j$$ = 0;$j$$ < this.istargeted.length;$j$$++) {
    this.targetedname[$j$$] = this.istargeted[$j$$].name.replace(/\'/g, "&#39;");
  }
  for ($j$$ = 0;$j$$ < this.targeting.length;$j$$++) {
    this.targetingname[$j$$] = this.targeting[$j$$].name.replace(/\'/g, "&#39;");
  }
  return Mustache.render(TEMPLATES.usabletokens, this);
}, showskill:function $Unit$$showskill$() {
  var $s$$ = this.getskill();
  $("#unit" + this.id + " .statskill").html($s$$);
  $("#" + this.id + " .statskill").html($s$$);
}, showstats:function $Unit$$showstats$() {
  $("#unit" + this.id + " .statevade .val").html(this.getagility());
  if (phase == SELECT_PHASE || phase == CREATION_PHASE) {
    $("#unit" + this.id + " .stathull .val").html(this.ship.hull), $("#unit" + this.id + " .statshield .val").html(this.ship.shield);
  } else {
    this.skillbar.attr({text:repeat("u", this.getskill())});
    this.firebar.attr({text:repeat("u", this.weapons[0].getattack())});
    this.evadebar.attr({text:repeat("u", this.getagility())});
    this.hullbar.attr({text:repeat("u", this.hull)});
    this.shieldbar.attr({text:repeat("u", this.shield + this.hull)});
    var $n$$ = 8 + 2 * this.upgrades.length;
    this.hull + this.shield <= $n$$ ? ($("#" + this.id + " .stat .hull").html(repeat("u ", this.hull)), $("#" + this.id + " .stat .shield").html(repeat("u ", this.shield))) : this.hull > $n$$ ? ($("#" + this.id + " .stat .hull").html(repeat("u ", $n$$)), this.hull <= 2 * $n$$ ? ($("#" + this.id + " .stat2 .hull").html(repeat("u ", this.hull - $n$$)), this.shield + this.hull <= 2 * $n$$ ? $("#" + this.id + " .stat2 .shield").html(repeat("u ", this.shield)) : ($("#" + this.id + " .stat2 .shield").html(repeat("u ", 
    2 * $n$$ - this.hull)), $("#" + this.id + " .stat3 .shield").html(repeat("u ", this.shield - 2 * $n$$ + this.hull)))) : ($("#" + this.id + " .stat2 .hull").html(repeat("u ", $n$$)), $("#" + this.id + " .stat3 .hull").html(repeat("u ", this.hull - 2 * $n$$)), $("#" + this.id + " .stat3 .shield").html(repeat("u ", this.shield)))) : ($("#" + this.id + " .stat .hull").html(repeat("u ", this.hull)), $("#" + this.id + " .stat .shield").html(repeat("u ", $n$$ - this.hull)), $("#" + this.id + " .stat2 .shield").html(repeat("u ", 
    this.shield - $n$$ + this.hull)));
  }
}, showpanel:function $Unit$$showpanel$() {
  var $d$jscomp$12_m$$ = VIEWPORT.m.clone(), $bbox$jscomp$1_y$$ = this.g.getBBox(), $min$jscomp$1_w$$ = $("#svgout").width(), $h$$ = $("#svgout").height(), $startX$jscomp$1_x$$ = 0, $startY$$ = 0;
  $h$$ > $min$jscomp$1_w$$ ? $startY$$ = ($h$$ - $min$jscomp$1_w$$) / 2 : $startX$jscomp$1_x$$ = ($min$jscomp$1_w$$ - $h$$) / 2;
  $min$jscomp$1_w$$ = Math.min($min$jscomp$1_w$$ / 900., $h$$ / 900.);
  $startX$jscomp$1_x$$ += ($d$jscomp$12_m$$.x($bbox$jscomp$1_y$$.x, $bbox$jscomp$1_y$$.y) + $bbox$jscomp$1_y$$.width / 2) * $min$jscomp$1_w$$;
  $bbox$jscomp$1_y$$ = $startY$$ + $d$jscomp$12_m$$.y($bbox$jscomp$1_y$$.x, $bbox$jscomp$1_y$$.y) * $min$jscomp$1_w$$;
  $d$jscomp$12_m$$ = $d$jscomp$12_m$$.split().scalex;
  $(".phasepanel").css({left:$startX$jscomp$1_x$$ + $d$jscomp$12_m$$ * (this.islarge ? 40 : 20), top:$bbox$jscomp$1_y$$}).show();
}, timeformaneuver:function $Unit$$timeformaneuver$() {
  return this == activeunit && -1 < this.maneuver && !this.hasmoved && this.getskill() == skillturn && phase == ACTIVATION_PHASE && subphase == ACTIVATION_PHASE;
}, showoverflow:function $Unit$$showoverflow$() {
  this.dead || ($("#" + this.id).html("" + this), $("#" + this.id + " .outoverflow").each(function($index$$) {
    "auto" != $(this).css("top") && $(this).css("top", $(this).parent().offset().top + "px");
  }));
}, show:function $Unit$$show$() {
  phase == CREATION_PHASE ? $("#unit" + this.id).html(this.toString2()) : "undefined" != typeof this.g && (this.g.transform(this.m), this.g.appendTo(VIEWPORT), this.geffect.transform(this.m), this.geffect.appendTo(VIEWPORT), this.showoutline(), this.flameno++, this.showstats(), this.showinfo(), activeunit == this && (this.showpanel(), this.showdial(), this.showmaneuver(), phase == ACTIVATION_PHASE && this.showactivation(), ENGAGED || phase != COMBAT_PHASE || (!this.canfire() || this.areactionspending() || 
  INREPLAY ? $("#attackdial").empty() : this.showattack(this.activeweapons, this.activeenemies)), this.showoverflow()));
}, updatetohit:function $Unit$$updatetohit$($b$$, $wp$$) {
  var $w$$ = this.weapons[$wp$$], $e$$ = $w$$.getenemiesinrange();
  if ($b$$) {
    for ($i$$ in $e$$) {
      $e$$[$i$$].tohitstats[this.id] = {unit:this, weapon:$wp$$};
    }
  } else {
    for (var $i$$ in $e$$) {
      delete $e$$[$i$$].tohitstats[this.id];
    }
  }
  for ($i$$ in $e$$) {
    var $u$$ = $e$$[$i$$];
    NOLOG = !0;
    var $tohit$$ = 1, $meanhit$$ = 0, $meancrit$$ = 0, $focus$$ = $u$$.focus, $evade$$ = $u$$.evade, $p$$, $j$$;
    for ($j$$ in $u$$.tohitstats) {
      var $v$$ = $u$$.tohitstats[$j$$], $w$$ = $v$$.weapon;
      if ("undefined" != typeof $v$$.unit) {
        var $ss$$ = $v$$.unit.evaluatetohit($v$$.weapon, $u$$), $tohit$$ = $tohit$$ * (1 - $ss$$.tohit / 100.), $meanhit$$ = $meanhit$$ + $ss$$.meanhit, $meancrit$$ = $meancrit$$ + $ss$$.meancritical;
        0 < $u$$.focus && $u$$.focus--;
        0 < $u$$.evade && $u$$.evade--;
        for ($p$$ = [];"function" == typeof $v$$.unit.weapons[$w$$].followupattack && -1 == $p$$.indexOf($w$$);) {
          $p$$.push($w$$), $w$$ = $v$$.unit.weapons[$w$$].followupattack(), $ss$$ = $v$$.unit.evaluatetohit($w$$, $u$$), $tohit$$ *= 1 - $ss$$.tohit / 100., $meanhit$$ += $ss$$.meanhit, $meancrit$$ += $ss$$.meancritical, 0 < $u$$.focus && $u$$.focus--, 0 < $u$$.evade && $u$$.evade--;
        }
      }
    }
    $u$$.tohitstats.tohit = $tohit$$;
    $u$$.tohitstats.meanhit = $meanhit$$;
    $u$$.tohitstats.meancrit = $meancrit$$;
    $u$$.evade = $evade$$;
    $u$$.focus = $focus$$;
    NOLOG = !1;
  }
}, displaytohit:function $Unit$$displaytohit$($e$jscomp$16_wp$$) {
  $e$jscomp$16_wp$$ = this.weapons[$e$jscomp$16_wp$$].getenemiesinrange();
  for (var $i$$ in $e$jscomp$16_wp$$) {
    var $u$$ = $e$jscomp$16_wp$$[$i$$], $tohit$$ = 1 - $u$$.tohitstats.tohit, $hit$$ = $u$$.tohitstats.meanhit, $crit$$ = $u$$.tohitstats.meancrit;
    if (0 == $hit$$) {
      $u$$.gproba.attr({display:"none"});
    } else {
      var $r$$ = -$u$$.m.split().rotate;
      $u$$.gproba.transform("r " + $r$$ + " 0 0").attr({display:"block"});
      $u$$.tohit.attr({text:Math.floor(100 * $tohit$$) + "%"});
      $u$$.meanhit.attr({text:Math.floor(100 * $hit$$) / 100});
      $u$$.meancrit.attr({text:Math.floor(100 * $crit$$) / 100});
    }
    $u$$.show();
  }
}, showhitsector:function $Unit$$showhitsector$($b$$, $wp$$) {
  this.select();
  "undefined" == typeof $wp$$ && ($wp$$ = 0);
  var $aux$jscomp$1_w$$ = this.weapons[$wp$$];
  if ($b$$) {
    var $r0$$ = $aux$jscomp$1_w$$.getlowrange(), $r1$$ = $aux$jscomp$1_w$$.gethighrange();
    if ($aux$jscomp$1_w$$.isTurret() || this.isTurret($aux$jscomp$1_w$$)) {
      this.showrange($b$$, $r0$$, $r1$$);
    } else {
      var $i$$;
      if (1 == $r0$$) {
        for ($i$$ = $r0$$;$i$$ <= $r1$$;$i$$++) {
          this.sectors.push(s.path(this.getPrimarySectorString($i$$, this.m)).attr({fill:this.color, stroke:this.color, opacity:0.1, pointerEvents:"none"}).appendTo(VIEWPORT));
        }
        if ("undefined" != typeof $aux$jscomp$1_w$$.auxiliary) {
          for ($aux$jscomp$1_w$$ = $aux$jscomp$1_w$$.auxiliary, $i$$ = $r0$$;$i$$ <= $r1$$;$i$$++) {
            this.sectors.push(s.path($aux$jscomp$1_w$$.call(this, $i$$, this.m)).attr({fill:this.color, stroke:this.color, opacity:0.1, pointerEvents:"none"}).appendTo(VIEWPORT));
          }
        }
      } else {
        for ($i$$ = $r0$$;$i$$ <= $r1$$;$i$$++) {
          this.sectors.push(s.path(this.getPrimarySubSectorString($r0$$ - 1, $i$$, this.m)).attr({fill:this.color, stroke:this.color, opacity:0.1, pointerEvents:"none"}).appendTo(VIEWPORT));
        }
        if ("undefined" != typeof $aux$jscomp$1_w$$.subauxiliary) {
          for ($aux$jscomp$1_w$$ = $aux$jscomp$1_w$$.subauxiliary, $i$$ = $r0$$;$i$$ <= $r1$$;$i$$++) {
            this.sectors.push(s.path($aux$jscomp$1_w$$.call(this, $r0$$ - 1, $i$$, this.m.clone())).attr({fill:this.color, stroke:this.color, opacity:0.1, pointerEvents:"none"}).appendTo(VIEWPORT));
          }
        }
      }
    }
  } else {
    for ($i$$ = 0;$i$$ < this.sectors.length;$i$$++) {
      this.sectors[$i$$].remove();
    }
    for ($i$$ = 0;$i$$ < this.ranges.length;$i$$++) {
      this.ranges[$i$$].remove();
    }
    this.ranges = [];
    this.sectors = [];
  }
  this.updatetohit($b$$, $wp$$);
  this.displaytohit($wp$$);
}, showrange:function $Unit$$showrange$($b$jscomp$16_i$$, $r0$$, $r1$$) {
  this.select();
  if ($b$jscomp$16_i$$) {
    if (1 == $r0$$) {
      for ($b$jscomp$16_i$$ = $r0$$;$b$jscomp$16_i$$ <= $r1$$;$b$jscomp$16_i$$++) {
        this.ranges.push(s.path(this.getRangeString($b$jscomp$16_i$$, this.m)).attr({fill:this.color, stroke:this.color, opacity:0.1, pointerEvents:"none"}).appendTo(VIEWPORT));
      }
    } else {
      for ($b$jscomp$16_i$$ = $r0$$;$b$jscomp$16_i$$ <= $r1$$;$b$jscomp$16_i$$++) {
        this.ranges.push(s.path(this.getSubRangeString($r0$$ - 1, $b$jscomp$16_i$$, this.m)).attr({fill:this.color, stroke:this.color, opacity:0.1, pointerEvents:"none"}).appendTo(VIEWPORT));
      }
    }
  } else {
    for ($b$jscomp$16_i$$ = 0;$b$jscomp$16_i$$ < this.ranges.length;$b$jscomp$16_i$$++) {
      this.ranges[$b$jscomp$16_i$$].remove();
    }
    this.ranges = [];
  }
}, togglehitsector:function $Unit$$togglehitsector$($w$$) {
  this.showhitsector(0 < this.sectors.length + this.ranges.length ? !1 : !0, $w$$);
}, togglerange:function $Unit$$togglerange$() {
  this.showrange(0 < this.ranges.length ? !1 : !0, 1, 3);
}, isPointInside:function $Unit$$isPointInside$($path$$, $op$$) {
  for (var $i$$ = 0;$i$$ < $op$$.length;$i$$++) {
    if (Snap.path.isPointInside($path$$, $op$$[$i$$].x, $op$$[$i$$].y)) {
      return !0;
    }
  }
  return !1;
}, isinsector:function $Unit$$isinsector$($m$jscomp$46_o1$$, $n$$, $o2$jscomp$2_sh$$, $getSubSectorString$$, $getSectorString$$, $flag$$) {
  $o2$jscomp$2_sh$$ = $o2$jscomp$2_sh$$.getOutlineString($o2$jscomp$2_sh$$.m);
  $m$jscomp$46_o1$$ = 1 < $n$$ ? $getSubSectorString$$.call(this, $n$$ - 1, $n$$, $m$jscomp$46_o1$$) : $getSectorString$$.call(this, $n$$, $m$jscomp$46_o1$$);
  return null != $m$jscomp$46_o1$$ && (0 < Snap.path.intersection($o2$jscomp$2_sh$$.s, $m$jscomp$46_o1$$).length || this.isPointInside($m$jscomp$46_o1$$, $o2$jscomp$2_sh$$.p));
}, isinfiringarc:function $Unit$$isinfiringarc$($sh$$) {
  return 3 >= this.getsector($sh$$);
}, isinprimaryfiringarc:function $Unit$$isinprimaryfiringarc$($sh$$) {
  return 3 >= this.getprimarysector($sh$$);
}, getsector:function $Unit$$getsector$($sh$$, $m$$) {
  return this.weapons[0].getsector($sh$$);
}, getprimarysector:function $Unit$$getprimarysector$($sh$$, $m$$) {
  var $i$$;
  "undefined" == typeof $m$$ && ($m$$ = this.m);
  var $n$$ = this.getoutlinerange($m$$, $sh$$).d;
  for ($i$$ = $n$$;$i$$ <= $n$$ + 1 && 3 >= $i$$;$i$$++) {
    if (this.isinsector($m$$, $i$$, $sh$$, this.getPrimarySubSectorString, this.getPrimarySectorString)) {
      return $i$$;
    }
  }
  return 4;
}, isinoutline:function $Unit$$isinoutline$($o1$$, $sh$$, $m$$) {
  return this.isPointInside($o1$$, $sh$$.getOutlinePoints($m$$));
}, checkcollision:function $Unit$$checkcollision$($sh$$) {
  return -1 < this.touching.indexOf($sh$$);
}, resolvecollision:function $Unit$$resolvecollision$() {
  var $i$$;
  "undefined" == typeof this.touching && (this.touching = []);
  for ($i$$ = 0;$i$$ < this.touching.length;$i$$++) {
    var $u$$ = this.touching[$i$$];
    -1 == $u$$.touching.indexOf(this) && ($u$$.touching.push(this), $u$$.collidedby(this));
  }
}, collidedby:function $Unit$$collidedby$($sh$$) {
}, canhavehitocollision:function $Unit$$canhavehitocollision$() {
  return !0;
}, canhavecriticalocollision:function $Unit$$canhavecriticalocollision$() {
  return !0;
}, resolveocollision:function $Unit$$resolveocollision$($o$$, $t$$) {
  var $i$$;
  -1 == $t$$.indexOf($o$$) && -1 < $o$$ && $t$$.push($o$$);
  for ($i$$ = 0;$i$$ < $t$$.length;$i$$++) {
    var $roll$$ = this.rollattackdie(1, OBSTACLES[$t$$[$i$$]], "blank")[0];
    switch($roll$$) {
      case "focus":
        this.log("roll for collision: <span class='focusreddice'></span>");
        break;
      case "hit":
        this.log("roll for collision: <span class='hitreddice'></span>");
        break;
      case "blank":
        this.log("roll for collision: <span class='blankreddice'></span>");
        break;
      case "critical":
        this.log("roll for collision: <span class='criticalreddice'></span>");
    }
    OBSTACLES[$t$$[$i$$]].type == ROCK ? "hit" == $roll$$ && this.canhavehitocollision() ? (this.log("+1 %HIT% [collision]"), this.resolvehit(1), this.checkdead()) : "critical" == $roll$$ && this.canhavecriticalocollision() && (this.log("+1 %CRIT% [collision]"), this.resolvecritical(1), this.checkdead()) : OBSTACLES[$t$$[$i$$]].type == DEBRIS && (this.addstress(), "critical" == $roll$$ && (this.log("+1 %CRIT% [debris collision]"), this.resolvecritical(1), this.checkdead()));
  }
}, addshield:function $Unit$$addshield$($n$$) {
  this.movelog("S-" + $n$$);
  this.shield < this.ship.shield && this.animateaddtoken("cshield");
  this.shield += $n$$;
  return this.shield > this.ship.shield ? (this.shield = this.ship.shield, !0) : !1;
}, addhull:function $Unit$$addhull$($n$$) {
  this.movelog("H-" + $n$$);
  this.hull < this.ship.hull && this.animateaddtoken("chull");
  this.hull += $n$$;
  this.hull > this.ship.hull && (this.hull = this.ship.hull);
}, animateremovetoken:function $Unit$$animateremovetoken$($type$$) {
  if (!FAST) {
    var $m$jscomp$50_y$$ = VIEWPORT.m.clone(), $p$jscomp$34_w$$ = $("#svgout").width(), $h$jscomp$19_x$$ = $("#svgout").height(), $startX$$ = 0, $startY$$ = 0;
    $h$jscomp$19_x$$ > $p$jscomp$34_w$$ ? $startY$$ = ($h$jscomp$19_x$$ - $p$jscomp$34_w$$) / 2 : $startX$$ = ($p$jscomp$34_w$$ - $h$jscomp$19_x$$) / 2;
    var $max$$ = Math.max(900. / $p$jscomp$34_w$$, 900. / $h$jscomp$19_x$$), $bbox$$ = this.g.getBBox(), $p$jscomp$34_w$$ = $("#svgout").offset();
    $("#playmat").width();
    $("#playmat").height();
    $h$jscomp$19_x$$ = $m$jscomp$50_y$$.x($bbox$$.x, $bbox$$.y) / $max$$;
    $h$jscomp$19_x$$ += $p$jscomp$34_w$$.left + $startX$$;
    $m$jscomp$50_y$$ = $m$jscomp$50_y$$.y($bbox$$.x, $bbox$$.y) / $max$$;
    $m$jscomp$50_y$$ += $p$jscomp$34_w$$.top + $startY$$;
    $("<div>").addClass("upanim").css({left:$h$jscomp$19_x$$, top:$m$jscomp$50_y$$}).html("<code class='" + $type$$ + "'></code>").appendTo("body").show();
  }
}, animateaddtoken:function $Unit$$animateaddtoken$($type$$) {
  if (!FAST) {
    var $m$jscomp$51_y$$ = VIEWPORT.m.clone(), $p$jscomp$35_w$$ = $("#svgout").width(), $h$jscomp$20_x$$ = $("#svgout").height(), $startX$$ = 0, $startY$$ = 0;
    $h$jscomp$20_x$$ > $p$jscomp$35_w$$ ? $startY$$ = ($h$jscomp$20_x$$ - $p$jscomp$35_w$$) / 2 : $startX$$ = ($p$jscomp$35_w$$ - $h$jscomp$20_x$$) / 2;
    var $max$$ = Math.max(900. / $p$jscomp$35_w$$, 900. / $h$jscomp$20_x$$), $bbox$$ = this.g.getBBox(), $p$jscomp$35_w$$ = $("#svgout").offset();
    $("#playmat").width();
    $("#playmat").height();
    $h$jscomp$20_x$$ = $m$jscomp$51_y$$.x($bbox$$.x, $bbox$$.y) / $max$$;
    $h$jscomp$20_x$$ += $p$jscomp$35_w$$.left + $startX$$;
    $m$jscomp$51_y$$ = $m$jscomp$51_y$$.y($bbox$$.x, $bbox$$.y) / $max$$;
    $m$jscomp$51_y$$ += $p$jscomp$35_w$$.top + $startY$$;
    $("<div>").addClass("downanim").css({left:$h$jscomp$20_x$$, top:$m$jscomp$51_y$$}).html("<code class='" + $type$$ + "'></code>").appendTo("body").show();
  }
}, removeshield:function $Unit$$removeshield$($n$$) {
  0 < this.shield && this.animateremovetoken("cshield");
  this.shield -= $n$$;
  this.movelog("s-" + $n$$);
  0 > this.shield && (this.shield = 0);
  var $r$$ = TEAMS[this.team].history.rawdata;
  "undefined" == typeof $r$$[round] && ($r$$[round] = {hits:0, dead:""});
  $r$$[round].hits += $n$$;
}, resolvehit:function $Unit$$resolvehit$($n$$) {
  var $s$$ = 0;
  if (0 == $n$$) {
    return 0;
  }
  this.shield > $n$$ ? this.removeshield($n$$) : ($s$$ = $n$$ - this.shield, this.removeshield(this.shield), 0 < $s$$ && this.applydamage($s$$));
  this.show();
  return $s$$;
}, resolvecritical:function $Unit$$resolvecritical$($n$$) {
  var $s$$ = 0;
  if (0 == $n$$) {
    return 0;
  }
  this.shield > $n$$ ? this.removeshield($n$$) : ($s$$ = $n$$ - this.shield, this.removeshield(this.shield), 0 < $s$$ && this.applycritical($s$$));
  this.show();
  return $s$$;
}, removehull:function $Unit$$removehull$($n$$) {
  0 < this.hull && this.animateremovetoken("chull");
  this.hull -= $n$$;
  this.movelog("h-" + $n$$);
  var $r$$ = TEAMS[this.team].history.rawdata;
  "undefined" == typeof $r$$[round] && ($r$$[round] = {hits:0, dead:""});
  $r$$[round].hits += $n$$;
  this.log("-%0 %HULL%", $n$$);
  this.hull <= this.ship.hull / 2 && this.imgsmoke.attr({display:"block"});
  1 == this.hull && (this.imgsmoke.attr({display:"none"}), this.imgflame.attr({display:"block"}));
}, selectunit:function $Unit$$selectunit$($p$$, $f$$, $astr$$, $cancellable$$) {
  $cancellable$$ && $p$$.push(this);
  0 < $p$$.length && this.doselection(function($n$$) {
    "undefined" != typeof $astr$$ && "" != $astr$$[0] && this.log.apply(this, $astr$$);
    this.resolveactionselection($p$$, function($k$$) {
      $cancellable$$ && this == $p$$[$k$$] || $f$$.call(this, $p$$, $k$$);
      this.endnoaction($n$$, "SELECT");
    }.bind(this));
  }.bind(this), "selectunit");
}, selectcritical:function $Unit$$selectcritical$($crits$$, $endselect$$) {
  var $resolve$$ = function($c$$, $n$$) {
    $("#actiondial").empty();
    $endselect$$($c$$);
    this.endnoaction($n$$, "CRITICAL");
  }.bind(this);
  this.doselection(function($n$$) {
    var $i$$;
    $("#actiondial").empty();
    for ($i$$ = 0;$i$$ < $crits$$.length;$i$$++) {
      (function($k$$) {
        var $e$$ = $("<button>").text(CRITICAL_DECK[$crits$$[$k$$]].name).click(function() {
          $resolve$$($crits$$[$k$$], $n$$);
        }.bind(this));
        $("#actiondial").append($e$$);
      }).call(this, $i$$);
    }
    $("#actiondial").show();
  }.bind(this), "critical");
}, selectupgradetodesactivate:function $Unit$$selectupgradetodesactivate$($upglist$$, $self$$) {
  var $resolve$$ = function($u$$, $n$$) {
    $("#actiondial").empty();
    null != $u$$ && ($u$$.desactivate(), $u$$.unit.show(), $self$$.desactivate(), this.log("desactivating %0 [%1]", $u$$.name, this.name));
    this.endnoaction($n$$, "CREW");
  }.bind(this);
  this.doselection(function($n$$) {
    var $e$jscomp$18_i$$;
    $("#actiondial").empty();
    for ($e$jscomp$18_i$$ = 0;$e$jscomp$18_i$$ < $upglist$$.length;$e$jscomp$18_i$$++) {
      (function($k$$) {
        var $e$$ = $("<button>").text($upglist$$[$k$$].name).click(function() {
          $resolve$$($upglist$$[$k$$], $n$$);
        });
        $("#actiondial").append($e$$);
      }).call(this, $e$jscomp$18_i$$);
    }
    $e$jscomp$18_i$$ = $("<button>").addClass("m-skip").addClass("wbutton").click(function() {
      $resolve$$(null, $n$$);
    });
    $("#actiondial").append($e$jscomp$18_i$$);
    $("#actiondial").show();
  }.bind(this), "upgrade");
}, selectdamage:function $Unit$$selectdamage$() {
  var $i$$, $m$jscomp$52_s$$ = 0;
  for ($i$$ = 0;$i$$ < CRITICAL_DECK.length;$i$$++) {
    -1 < CRITICAL_DECK[$i$$].version.indexOf(CURRENT_DECK) && ($m$jscomp$52_s$$ += CRITICAL_DECK[$i$$].count);
  }
  var $r$$ = this.rand($m$jscomp$52_s$$);
  for ($i$$ = $m$jscomp$52_s$$ = 0;$i$$ < CRITICAL_DECK.length;$i$$++) {
    if (-1 < CRITICAL_DECK[$i$$].version.indexOf(CURRENT_DECK) && ($m$jscomp$52_s$$ += CRITICAL_DECK[$i$$].count, $m$jscomp$52_s$$ > $r$$)) {
      return $i$$;
    }
  }
  return 0;
}, applydamage:function $Unit$$applydamage$($n$$) {
  var $s$$, $j$$;
  for ($j$$ = 0;$j$$ < $n$$;$j$$++) {
    $s$$ = this.selectdamage();
    CRITICAL_DECK[$s$$].count--;
    var $cr$$ = new Critical(this, $s$$);
    this.deal($cr$$, FACEDOWN).then(function($c$$) {
      switch($c$$.face) {
        case FACEUP:
          $c$$.crit.faceup(), this.movelog("c-" + $s$$);
        case FACEDOWN:
          this.removehull(1);
          break;
        case DISCARD:
          this.criticals.slice(this.criticals.indexOf($cr$$), 1);
      }
      this.show();
    }.bind(this));
  }
}, applycritical:function $Unit$$applycritical$($n$$) {
  var $s$$, $j$$;
  for ($j$$ = 0;$j$$ < $n$$;$j$$++) {
    $s$$ = this.selectdamage();
    CRITICAL_DECK[$s$$].count--;
    var $cr$$ = new Critical(this, $s$$);
    this.deal($cr$$, FACEUP).then(function($c$$) {
      switch($c$$.face) {
        case FACEUP:
          $c$$.crit.faceup(), this.movelog("c-" + $s$$);
        case FACEDOWN:
          this.removehull(1);
          break;
        case DISCARD:
          this.criticals.slice(this.criticals.indexOf($cr$$), 1);
      }
      this.show();
    }.bind(this));
  }
}, deal:function $Unit$$deal$($crit$$, $face$$) {
  return $.Deferred().resolve({crit:$crit$$, face:$face$$}).promise();
}, gethitrange:function $Unit$$gethitrange$($w$$, $sh$$) {
  return this.isally($sh$$) ? 0 : this.weapons[$w$$].getrange($sh$$);
}, getenemiesinrange:function $Unit$$getenemiesinrange$($weaponlist$$, $enemylist$$) {
  var $i$$, $range$$ = [];
  "undefined" == typeof $weaponlist$$ && ($weaponlist$$ = this.weapons);
  for ($i$$ = 0;$i$$ < $weaponlist$$.length;$i$$++) {
    $range$$[$i$$] = $weaponlist$$[$i$$].getenemiesinrange($enemylist$$);
  }
  return $range$$;
}, getrange:function $Unit$$getrange$($sh$$) {
  return this.getoutlinerange(this.m, $sh$$).d;
}, getdist:function $Unit$$getdist$($mm$$, $sh$$) {
  var $ro$$ = this.getOutlinePoints($mm$$), $rsh$$ = $sh$$.getOutlinePoints($sh$$.m), $min$$ = -1, $i$$, $j$$;
  for ($i$$ = 0;$i$$ < $ro$$.length;$i$$++) {
    for ($j$$ = 0;$j$$ < $rsh$$.length;$j$$++) {
      var $d$$ = dist($rsh$$[$j$$], $ro$$[$i$$]);
      if ($d$$ < $min$$ || -1 == $min$$) {
        $min$$ = $d$$;
      }
    }
  }
  return $min$$;
}, getoutlinerange:function $Unit$$getoutlinerange$($m$$, $sh$$) {
  var $result$$ = util.getOutlineRange(this, $sh$$, OBSTACLES);
  return {d:$result$$.distance, o:$result$$.obstructed};
}, getrangeallunits:function $Unit$$getrangeallunits$() {
  var $range$$ = [[], [], [], [], []], $i$$;
  for ($i$$ in squadron) {
    var $k$jscomp$37_sh$$ = squadron[$i$$];
    $k$jscomp$37_sh$$ != this && ($k$jscomp$37_sh$$ = this.getrange($k$jscomp$37_sh$$), $range$$[$k$jscomp$37_sh$$].push({unit:$i$$}));
  }
  return $range$$;
}};
var IACOMPUTING = 0;
function IAUnit() {
}
IAUnit.prototype = {confirm:function $IAUnit$$confirm$($a$$) {
  return !0;
}, guessevades:function $IAUnit$$guessevades$($roll$$, $promise$$) {
  this.rand($roll$$.dice + 1) == FE_evade($roll$$.roll) && (this.log("guessed correctly the number of evades ! +1 %EVADE% [%0]", self.name), $roll$$.roll += FE_EVADE, $roll$$.dice += 1);
  $promise$$.resolve($roll$$);
}, computemaneuver:function $IAUnit$$computemaneuver$() {
  var $i$jscomp$0$$, $d$jscomp$14_q$jscomp$3_s$$ = 0, $d$jscomp$14_q$jscomp$3_s$$ = [], $gd$jscomp$0$$ = this.getdial(), $d$jscomp$14_q$jscomp$3_s$$ = this.getskill();
  for ($i$jscomp$0$$ in squadron) {
    var $u$$ = squadron[$i$jscomp$0$$], $us$$ = $u$$.getskill();
    $u$$.oldm = $u$$.m;
    $us$$ < $d$jscomp$14_q$jscomp$3_s$$ && ($u$$.team != this.team ? ($u$$.meanmround != round && $u$$.evaluatemoves(!1, !1), $u$$.m = $u$$.meanm) : ("undefined" == typeof $u$$.futurem && ($u$$.futurem = $u$$.m), $u$$.m = $u$$.futurem));
  }
  this.evaluatemoves(!0, !0);
  $d$jscomp$14_q$jscomp$3_s$$ = function($gd$$) {
    var $q$$ = [], $i$$, $COLOR$$ = [GREEN, WHITE, YELLOW, RED];
    for ($i$$ = 0;$i$$ < $gd$$.length;$i$$++) {
      var $d$$ = $gd$$[$i$$];
      if ($d$$.color != BLACK) {
        var $mm$$ = this.getpathmatrix(this.m, $gd$$[$i$$].move), $n$$ = 24 - 8 * $COLOR$$.indexOf($d$$.color);
        $d$$.color == RED && ($n$$ -= 20);
        $d$$.color == BLACK && ($n$$ = -100);
        var $oldm$$ = this.m;
        this.m = $mm$$;
        $n$$ += this.evaluateposition();
        "RED" == $d$$.difficulty && ($n$$ -= 1.5);
        this.m = $oldm$$;
        $q$$.push({n:$n$$, m:$i$$});
      }
    }
    return $q$$;
  }.call(this, $gd$jscomp$0$$);
  for ($i$jscomp$0$$ in squadron) {
    squadron[$i$jscomp$0$$].m = squadron[$i$jscomp$0$$].oldm;
  }
  if (0 < $d$jscomp$14_q$jscomp$3_s$$.length) {
    $d$jscomp$14_q$jscomp$3_s$$.sort(function($a$$, $b$$) {
      return $b$$.n - $a$$.n;
    }), $d$jscomp$14_q$jscomp$3_s$$ = $d$jscomp$14_q$jscomp$3_s$$[0].m;
  } else {
    for ($i$jscomp$0$$ = 0;$i$jscomp$0$$ < $gd$jscomp$0$$.length && "RED" == $gd$jscomp$0$$[$i$jscomp$0$$].difficulty && !$gd$jscomp$0$$[$i$jscomp$0$$].move.match(/F\d/);$i$jscomp$0$$++) {
    }
    $d$jscomp$14_q$jscomp$3_s$$ = $i$jscomp$0$$;
  }
  this.futurem = this.getpathmatrix(this.m, $gd$jscomp$0$$[$d$jscomp$14_q$jscomp$3_s$$].move);
  this.log("Maneuver set");
  return $d$jscomp$14_q$jscomp$3_s$$;
}, resolveactionselection:function $IAUnit$$resolveactionselection$($units$$, $cleanup$$) {
  $cleanup$$(0);
}, selectcritical:function $IAUnit$$selectcritical$($crits$$, $endselect$$) {
  for (var $i$$ = 0;$i$$ < $crits$$.length;$i$$++) {
    if (0 == CRITICAL_DECK[$crits$$[$i$$]].lethal) {
      $endselect$$($crits$$[$i$$]);
      return;
    }
  }
  $endselect$$($crits$$[0]);
}, resolveactionmove:function $IAUnit$$resolveactionmove$($mine$jscomp$2_moves$$, $cleanup$$, $automove$jscomp$1_gpm$$, $possible$$, $scoring_tpm$$) {
  var $i$$, $ready$$ = !1, $score$$ = -1000;
  $possible$$ = -1;
  var $old$$ = this.m;
  for ($i$$ = 0;$i$$ < $mine$jscomp$2_moves$$.length;$i$$++) {
    if (this.getmovecolor($mine$jscomp$2_moves$$[$i$$], !0, !0) == GREEN) {
      var $e$$, $ready$$ = !0;
      "array" == typeof $scoring_tpm$$ ? $e$$ = $scoring_tpm$$[$i$$] : (this.m = $mine$jscomp$2_moves$$[$i$$], $e$$ = this.evaluateposition());
      $score$$ < $e$$ && ($score$$ = $e$$, $possible$$ = $i$$);
    }
  }
  this.m = $old$$;
  if ($ready$$ && -1 < $possible$$) {
    $automove$jscomp$1_gpm$$ && ($automove$jscomp$1_gpm$$ = $mine$jscomp$2_moves$$[$possible$$].split(), $scoring_tpm$$ = this.m.split(), s.path("M " + $scoring_tpm$$.dx + " " + $scoring_tpm$$.dy + " L " + $automove$jscomp$1_gpm$$.dx + " " + $automove$jscomp$1_gpm$$.dy).appendTo(VIEWPORT).attr({stroke:this.color, display:TRACE ? "block" : "none", strokeWidth:"20px", strokeLinecap:"round", strokeDasharray:"1, 30", opacity:0.2, fill:"rgba(0,0,0,0)"}).addClass("trace"), this.show(), this.m = $mine$jscomp$2_moves$$[$possible$$], 
    $automove$jscomp$1_gpm$$ = this.m.split(), this.movelog("am-" + Math.floor(300 + $automove$jscomp$1_gpm$$.dx) + "-" + Math.floor(300 + $automove$jscomp$1_gpm$$.dy) + "-" + Math.floor((360 + Math.floor($automove$jscomp$1_gpm$$.rotate)) % 360)));
    $mine$jscomp$2_moves$$ = this.getmcollisions(this.m);
    if (0 < $mine$jscomp$2_moves$$.length) {
      for ($i$$ = 0;$i$$ < $mine$jscomp$2_moves$$.length;$i$$++) {
        "function" == typeof OBSTACLES[$mine$jscomp$2_moves$$[$i$$]].detonate ? OBSTACLES[$mine$jscomp$2_moves$$[$i$$]].detonate(this) : (this.log("colliding with obstacle"), this.resolveocollision(1, []));
      }
    }
    $cleanup$$(this, $possible$$);
  } else {
    this.m = $old$$, $cleanup$$(this, -1);
  }
}, doplan:function $IAUnit$$doplan$() {
  $("#move").css({display:"none"});
  $("#maneuverdial").empty();
  if (phase == PLANNING_PHASE && -1 == this.maneuver) {
    IACOMPUTING++;
    1 == IACOMPUTING && $("#npimg").html("<img style='width:10px' src='png/waiting.gif'/>");
    var $p$$;
    $p$$ = setInterval(function() {
      var $m$$ = this.computemaneuver();
      IACOMPUTING--;
      0 == IACOMPUTING && $("#npimg").html("&gt;");
      this.newm = this.getpathmatrix(this.m, this.getdial()[$m$$].move);
      this.setmaneuver($m$$);
      clearInterval($p$$);
    }.bind(this), 0);
  }
  return this.deferred;
}, showdial:function $IAUnit$$showdial$() {
  $("#maneuverdial").empty();
  phase >= PLANNING_PHASE && (-1 == this.maneuver || this.hasmoved) && this.clearmaneuver();
}, resolvedecloak:function $IAUnit$$resolvedecloak$() {
  for (var $p$$ = this.getdecloakmatrix(this.m), $move$$ = this.getdial()[this.maneuver].move, $scoring$$ = [], $old$$ = this.m, $i$$ = 0;$i$$ < $p$$.length;$i$$++) {
    this.m = this.getpathmatrix($p$$[$i$$], $move$$), $scoring$$[$i$$] = this.evaluateposition();
  }
  this.m = $old$$;
  this.resolveactionmove($p$$, function($t$$, $k$$) {
    0 < $k$$ && (this.removecloaktoken(), $t$$.show());
    this.hasdecloaked = !0;
  }.bind(this), !0, $scoring$$);
}, showactivation:function $IAUnit$$showactivation$() {
}, timetoshowmaneuver:function $IAUnit$$timetoshowmaneuver$() {
  return -1 < this.maneuver && skillturn >= this.getskill() && phase == ACTIVATION_PHASE && subphase == ACTIVATION_PHASE;
}, doactivation:function $IAUnit$$doactivation$() {
  this.updateactivationdial();
  this.timeformaneuver() ? this.resolvemaneuver() : this.log("no resolvemaneuver");
}, showaction:function $IAUnit$$showaction$() {
  $("#actiondial").empty();
  if (-1 < this.action && this.action < this.actionList.length) {
    var $c$$ = A[this.actionList[this.action]].color;
    this.actionicon.attr({fill:this == activeunit ? $c$$ : halftone($c$$)});
  } else {
    this.actionicon.attr({text:""});
  }
}, donoaction:function $IAUnit$$donoaction$($list$$, $str$$) {
  $list$$.sort(function($a$$, $b$$) {
    return "CRITICAL" == $a$$.type ? -1 : "CRITICAL" == $b$$.type ? 1 : "EVADE" == $a$$.type ? -1 : "EVADE" == $b$$.type ? 1 : "FOCUS" == $a$$.type ? -1 : "FOCUS" == $b$$.type ? 1 : 0;
  });
  return this.enqueueaction(function($n$$) {
    this.select();
    "undefined" != typeof $str$$ && "" != $str$$ && this.log($str$$);
    var $a$$ = null;
    for (i = 0;i < $list$$.length;i++) {
      if ("CRITICAL" == $list$$[i].type) {
        $a$$ = $list$$[i];
        break;
      } else {
        if ("EVADE" == $list$$[i].type && this.candoevade()) {
          var $noone$$ = !0, $grlu$$ = this.getenemiesinrange();
          for (i = 0;i < $grlu$$.length;i++) {
            if (0 < $grlu$$[i].length) {
              $noone$$ = !1;
              break;
            }
          }
          if ($noone$$) {
            $a$$ = $list$$[i];
            break;
          }
        } else {
          if ("FOCUS" == $list$$[i].type) {
            if (this.candofocus()) {
              $a$$ = $list$$[i];
              break;
            }
          } else {
            $a$$ = $list$$[i];
            break;
          }
        }
      }
    }
    this.resolvenoaction($a$$, $n$$);
  }.bind(this), "donoaction ia");
}, doaction:function $IAUnit$$doaction$($list$$, $str$$, $cando$$) {
  var $i$jscomp$0$$;
  "undefined" == typeof $cando$$ && ($cando$$ = this.candoaction);
  for ($i$jscomp$0$$ = 0;$i$jscomp$0$$ < $list$$.length;$i$jscomp$0$$++) {
    this.setpriority($list$$[$i$jscomp$0$$]);
  }
  $list$$.sort(function($a$$, $b$$) {
    return $b$$.priority - $a$$.priority;
  });
  return 0 == $list$$.length ? this.enqueueaction(function($n$$) {
    this.endnoaction($n$$);
  }.bind(this)) : this.enqueueaction(function($n$$) {
    var $i$$;
    if ($cando$$.call(this)) {
      this.select();
      "undefined" != typeof $str$$ && "" != $str$$ && this.log($str$$);
      var $a$$ = null;
      for ($i$$ = 0;$i$$ < $list$$.length;$i$$++) {
        if ("CRITICAL" == $list$$[$i$$].type) {
          $a$$ = $list$$[$i$$];
          break;
        } else {
          if ("CLOAK" == $list$$[$i$$].type && this.candocloak()) {
            $a$$ = $list$$[$i$$];
            break;
          } else {
            if ("EVADE" == $list$$[$i$$].type && this.candoevade()) {
              $a$$ = $list$$[$i$$];
              break;
            } else {
              if ("FOCUS" == $list$$[$i$$].type) {
                if (this.candofocus()) {
                  $a$$ = $list$$[$i$$];
                  break;
                }
              } else {
                $a$$ = $list$$[$i$$];
                break;
              }
            }
          }
        }
      }
      null == $a$$ && this.log("no possible action");
      null != $a$$ ? this.log("action chosen: " + $a$$.type) : this.log("null action chosen");
      this.resolveaction($a$$, $n$$);
    } else {
      this.endaction($n$$);
    }
  }.bind(this), "doaction ia");
}, showattack:function $IAUnit$$showattack$() {
}, doattack:function $IAUnit$$doattack$($weaponlist$$, $enemies$$) {
  var $power$$ = 0, $tp$$ = null, $i$$, $w$$, $wp$$;
  "undefined" == typeof $weaponlist$$ && ($weaponlist$$ = this.weapons);
  var $r$$ = this.getenemiesinrange($weaponlist$$, $enemies$$);
  for ($w$$ = 0;$w$$ < $weaponlist$$.length;$w$$++) {
    var $el$$ = $r$$[$w$$];
    $wp$$ = this.weapons.indexOf($weaponlist$$[$w$$]);
    for ($i$$ = 0;$i$$ < $el$$.length;$i$$++) {
      var $p$$ = this.evaluatetohit($wp$$, $el$$[$i$$]).tohit;
      $p$$ > $power$$ && !$el$$[$i$$].isdocked && ($tp$$ = $el$$[$i$$], $power$$ = $p$$, this.activeweapon = $wp$$);
    }
  }
  if (null != $tp$$) {
    return this.selecttargetforattack(this.activeweapon, [$tp$$]);
  }
  this.addhasfired();
  this.cleanupattack();
  return !1;
}, getresultmodifiers:function $IAUnit$$getresultmodifiers$($m$$, $n$$, $from$$, $to$$) {
  var $mods$$ = this.getdicemodifiers();
  NOLOG = !1;
  for (var $i$$ = 0;$i$$ < $mods$$.length;$i$$++) {
    var $d$$ = $mods$$[$i$$];
    $d$$.from == $from$$ && $d$$.to == $to$$ && ($d$$.type == MOD_M && $d$$.req($m$$, $n$$) && ("function" == typeof $d$$.aiactivate && 1 != $d$$.aiactivate($m$$, $n$$) || modroll($d$$.f, $i$$, $to$$)), $d$$.type == ADD_M && $d$$.req($m$$, $n$$) && ("function" == typeof $d$$.aiactivate && 1 != $d$$.aiactivate($m$$, $n$$) || addroll($d$$.f, $i$$, $to$$)), $d$$.type != REROLL_M || !$d$$.req(activeunit, activeunit.weapons[activeunit.activeweapon], targetunit) || "function" == typeof $d$$.aiactivate && 
    1 != $d$$.aiactivate($m$$, $n$$) || ("function" == typeof $d$$.f && $d$$.f(), reroll($n$$, $from$$, $to$$, $d$$, $i$$)));
  }
  return [];
}};
var sabine_fct = function $sabine_fct$() {
  var $p$$ = [];
  !this.hasionizationeffect() && this.candoaction() && (this.candoboost() && $p$$.push(this.newaction(this.resolveboost, "BOOST")), this.candoroll() && $p$$.push(this.newaction(this.resolveroll, "ROLL")), this.doaction($p$$, "free %BOOST% or %ROLL% action"));
}, zeb_fct = function $zeb_fct$($r$$, $t$$) {
  this.log("cancel %CRIT% first");
  $r$$ = this.cancelcritical($r$$, $t$$);
  return $r$$ = Unit.prototype.cancelhit($r$$, $t$$);
}, maarek_fct = function $maarek_fct$() {
  var $unit$$ = this;
  Unit.prototype.wrap_after("deal", this, function($c$$, $f$$, $p$$) {
    var $pp$$ = $.Deferred();
    $p$$.then(function($cf_s1$$) {
      if ($cf_s1$$.face == FACEUP && activeunit == $unit$$ && targetunit == this) {
        $cf_s1$$ = this.selectdamage();
        CRITICAL_DECK[$cf_s1$$].count--;
        var $s2$$ = this.selectdamage();
        CRITICAL_DECK[$s2$$].count--;
        var $s3$$ = this.selectdamage();
        CRITICAL_DECK[$s3$$].count--;
        sc = [$cf_s1$$, $s2$$, $s3$$];
        $unit$$.log("select one critical");
        $unit$$.selectcritical(sc, function($m$$) {
          $pp$$.resolve({crit:new Critical(this, $m$$), face:FACEUP});
        }.bind(this));
      } else {
        $pp$$.resolve($cf_s1$$);
      }
    }.bind(this));
    return $pp$$.promise();
  });
}, poe_fct = function $poe_fct$() {
  this.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return 0 < this.focus;
  }.bind(this), aiactivate:function($m$$, $n$$) {
    return 0 < FCH_focus($m$$);
  }, f:function($m$$, $n$$) {
    return 0 < FCH_focus($m$$) ? (this.log("1 %FOCUS% -> 1 %HIT%"), $m$$ - FCH_FOCUS + FCH_HIT) : $m$$;
  }.bind(this), str:"focus"});
  this.adddicemodifier(DEFENSE_M, MOD_M, DEFENSE_M, this, {req:function($m$$, $n$$) {
    return 0 < this.focus;
  }.bind(this), aiactivate:function($m$$, $n$$) {
    return 0 < FE_focus($m$$);
  }, f:function($m$$, $n$$) {
    return 0 < FE_focus($m$$) ? (this.log("1 %FOCUS% -> 1 %EVADE%"), $m$$ - FE_FOCUS + FE_EVADE) : $m$$;
  }.bind(this), str:"focus"});
}, hera_fct = function $hera_fct$() {
  var $m$$ = this.getmaneuver(), $p$$ = {}, $gd$$ = this.getdial();
  $p$$[$m$$.move] = $m$$;
  if (("RED" == $m$$.difficulty || "GREEN" == $m$$.difficulty) && (2 > this.ionized && this.islarge || 0 == this.ionized)) {
    for (var $i$$ = 0;$i$$ < $gd$$.length;$i$$++) {
      $gd$$[$i$$].difficulty == $m$$.difficulty && "undefined" == typeof $p$$[$gd$$[$i$$].move] && ($p$$[$gd$$[$i$$].move] = $gd$$[$i$$]);
    }
  }
  return $p$$;
}, PILOTS = [{name:"Contracted Scout", faction:SCUM, pilotid:0, done:!0, unit:"JumpMaster 5000", skill:3, points:25, upgrades:[ELITE, TORPEDO, TORPEDO, CREW, SALVAGED, ILLICIT]}, {name:"Wedge Antilles", done:!0, unique:!0, faction:REBEL, unit:"X-Wing", skill:9, init:function() {
  this.wrap_before("resolveattack", this, function($w$$, $target$$) {
    $target$$.log("-1 defense [%0]", this.name);
    $target$$.wrap_after("getagility", this, function($a$$) {
      return 0 < $a$$ ? $a$$ - 1 : $a$$;
    }).unwrapper("cleanupattack");
    $target$$.showstats();
  });
}, pilotid:1, points:29, upgrades:[ELITE, TORPEDO, ASTROMECH]}, {name:"Garven Dreis", done:!0, faction:REBEL, unique:!0, unit:"X-Wing", init:function() {
  this.wrap_after("removefocustoken", this, function() {
    this.selectunit(this.selectnearbyally(2), function($p$$, $k$$) {
      $p$$[$k$$].log("+1 %FOCUS%");
      $p$$[$k$$].addfocustoken();
    }.bind(this), ["select unit for free %FOCUS%"], !1);
  });
}, pilotid:2, skill:6, points:26, upgrades:[TORPEDO, ASTROMECH]}, {name:"Red Squadron Pilot", done:!0, unit:"X-Wing", faction:REBEL, skill:4, points:23, pilotid:3, upgrades:[TORPEDO, ASTROMECH]}, {name:"Rookie Pilot", done:!0, unit:"X-Wing", faction:REBEL, skill:2, points:21, pilotid:4, upgrades:[TORPEDO, ASTROMECH]}, {name:"Turbolaser", done:!0, unit:"Turbolaser", faction:EMPIRE, skill:0, points:5, pilotid:5, upgrades:[]}, {name:"Thermal Exhaust Port", done:!0, unit:"Exhaust Port", faction:EMPIRE, 
skill:0, points:100, pilotid:6, upgrades:[]}, {name:"Biggs Darklighter", done:!0, pilotid:7, init:function() {
  var $biggs$$ = this;
  Weapon.prototype.wrap_after("getenemiesinrange", this, function($enemylist$$, $r$$) {
    "undefined" == typeof $r$$ && ($r$$ = $enemylist$$, this.unit.selectnearbyenemy(3));
    if (1 == this.unit.foundbiggs) {
      for (var $p$$ = [], $i$$ = 0;$i$$ < $r$$.length;$i$$++) {
        var $u$$ = $r$$[$i$$];
        ($u$$ == $biggs$$ || 1 < $u$$.getrange($biggs$$)) && $p$$.push($u$$);
      }
      $r$$ = $p$$;
    }
    return $r$$;
  });
  Unit.prototype.wrap_after("getenemiesinrange", this, function($weaponlist$$, $enemies$jscomp$5_p$$, $r$$) {
    this.foundbiggs = !1;
    $enemies$jscomp$5_p$$ = [];
    for (var $i$$ = 0;$i$$ < $weaponlist$$.length;$i$$++) {
      if (-1 < $r$$[$i$$].indexOf($biggs$$)) {
        this.foundbiggs = !0;
        break;
      }
    }
    if (this.foundbiggs) {
      for ($i$$ = 0;$i$$ < $weaponlist$$.length;$i$$++) {
        $enemies$jscomp$5_p$$[$i$$] = [];
        for (var $j$$ = 0;$j$$ < $r$$[$i$$].length;$j$$++) {
          var $u$$ = $r$$[$i$$][$j$$];
          ($u$$ == $biggs$$ || 1 < $u$$.getrange($biggs$$)) && $enemies$jscomp$5_p$$[$i$$].push($u$$);
        }
      }
    } else {
      $enemies$jscomp$5_p$$ = $r$$;
    }
    return $enemies$jscomp$5_p$$;
  });
}, unique:!0, unit:"X-Wing", faction:REBEL, skill:5, points:25, upgrades:[TORPEDO, ASTROMECH]}, {name:"Luke Skywalker", done:!0, pilotid:8, faction:REBEL, init:function() {
  this.adddicemodifier(DEFENSE_M, MOD_M, DEFENSE_M, this, {req:function($m$$, $n$$) {
    return !0;
  }, aiactivate:function($m$$, $n$$) {
    return 0 < FE_focus($m$$);
  }, f:function($m$$, $n$$) {
    0 < FE_focus($m$$) && (this.log("1 %FOCUS% -> 1 %EVADE%"), $m$$ = $m$$ - FE_FOCUS + FE_EVADE);
    return $m$$;
  }.bind(this), str:"focus"});
}, unique:!0, unit:"X-Wing", skill:8, points:28, upgrades:[ELITE, TORPEDO, ASTROMECH]}, {name:"Gray Squadron Pilot", done:!0, faction:REBEL, unit:"Y-Wing", skill:4, pilotid:9, points:20, upgrades:[TURRET, TORPEDO, TORPEDO, ASTROMECH]}, {name:"'Dutch' Vander", done:!0, pilotid:10, init:function() {
  this.wrap_after("addtarget", this, function($t$$) {
    this.selectunit(this.selectnearbyally(2), function($p$$, $k$$) {
      $p$$[$k$$].selectunit($p$$[$k$$].gettargetableunits(3), function($pp$$, $kk$$) {
        -1 < this.gettargetableunits(3).indexOf($pp$$[$kk$$]) && this.addtarget($pp$$[$kk$$]);
      }, ["select target to lock"], !1);
    }, ["select unit for free %TARGET% (or self to cancel)"], !0);
  });
}, faction:REBEL, unique:!0, unit:"Y-Wing", skill:6, points:23, upgrades:[TURRET, TORPEDO, TORPEDO, ASTROMECH]}, {name:"Horton Salm", done:!0, pilotid:11, faction:REBEL, unique:!0, unit:"Y-Wing", skill:8, points:25, init:function() {
  unit = this;
  this.adddicemodifier(ATTACK_M, REROLL_M, ATTACK_M, this, {dice:["blank"], n:function() {
    return 9;
  }, req:function($attack$jscomp$3_r$$, $w$$, $defender$$) {
    $attack$jscomp$3_r$$ = this.getrange($defender$$);
    return 2 <= $attack$jscomp$3_r$$ && 3 >= $attack$jscomp$3_r$$ ? (this.log("reroll any blank result"), !0) : !1;
  }.bind(this)});
}, upgrades:[TURRET, TORPEDO, TORPEDO, ASTROMECH]}, {name:"Gold Squadron Pilot", done:!0, pilotid:12, unit:"Y-Wing", faction:REBEL, skill:2, points:18, upgrades:[TURRET, TORPEDO, TORPEDO, ASTROMECH]}, {name:"Academy Pilot", done:!0, pilotid:13, unit:"TIE Fighter", faction:EMPIRE, skill:1, points:12, upgrades:[]}, {name:"Obsidian Squadron Pilot", done:!0, pilotid:14, unit:"TIE Fighter", faction:EMPIRE, skill:3, points:13, upgrades:[]}, {name:"Black Squadron Pilot", done:!0, pilotid:15, unit:"TIE Fighter", 
faction:EMPIRE, skill:4, points:14, upgrades:[ELITE]}, {name:"'Scourge'", unique:!0, beta:!0, done:!0, pilotid:16, unit:"TIE Fighter", faction:EMPIRE, skill:7, points:17, init:function() {
  this.wrap_after("getattackstrength", this, function($i$$, $sh$$, $gas$$) {
    return 0 < $sh$$.criticals.length ? (this.log("+1 attack die for attacking damaged unit"), $gas$$ + 1) : $gas$$;
  });
}, upgrades:[ELITE]}, {name:"'Winged Gundark'", faction:EMPIRE, pilotid:17, init:function() {
  this.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return 1 == this.getrange(targetunit);
  }.bind(this), aiactivate:function($m$$, $n$$) {
    return 0 < FCH_hit($m$$);
  }, f:function($m$$, $n$$) {
    0 < FCH_hit($m$$) && (this.log("1 %HIT% -> 1 %CRIT%"), $m$$ = $m$$ - FCH_HIT + FCH_CRIT);
    return $m$$;
  }.bind(this), str:"hit"});
}, done:!0, unique:!0, unit:"TIE Fighter", skill:5, points:15, upgrades:[]}, {name:"'Night Beast'", faction:EMPIRE, done:!0, pilotid:18, init:function() {
  this.wrap_after("handledifficulty", this, function($difficulty$$) {
    "GREEN" == $difficulty$$ && this.candofocus() && this.candoaction() && this.doaction([this.newaction(this.addfocus, "FOCUS")], "green maneuver -> free focus action");
  });
}, unique:!0, unit:"TIE Fighter", skill:5, points:15, upgrades:[]}, {name:"'Backstabber'", unique:!0, done:!0, pilotid:19, faction:EMPIRE, init:function() {
  this.wrap_after("getattackstrength", this, function($w$$, $sh$$, $a$$) {
    $sh$$.isinfiringarc(this) || ($a$$ += 1, this.log("+1 attack against %0", $sh$$.name));
    return $a$$;
  });
}, unit:"TIE Fighter", skill:6, points:16, upgrades:[]}, {name:"'Dark Curse'", done:!0, pilotid:20, faction:EMPIRE, unique:!0, init:function() {
  var $self$$ = this;
  this.wrap_after("isattackedby", this, function($w$$, $a$$) {
    $a$$.wrap_after("canusefocus", $self$$, function() {
      return !1;
    }).unwrapper("afterdefenseeffect");
    $a$$.wrap_after("canusetarget", $self$$, function($t$$) {
      return !1;
    }).unwrapper("afterdefenseeffect");
    $a$$.wrap_after("getdicemodifiers", $self$$, function($mods$$) {
      for (var $p$$ = [], $i$$ = 0;$i$$ < $mods$$.length;$i$$++) {
        $mods$$[$i$$].type != REROLL_M && $p$$.push($mods$$[$i$$]);
      }
      return $p$$;
    }).unwrapper("afterdefenseeffect");
  });
}, unit:"TIE Fighter", skill:6, points:16, upgrades:[]}, {name:"'Mauler Mithel'", faction:EMPIRE, done:!0, pilotid:21, init:function() {
  this.wrap_after("getattackstrength", this, function($w$$, $sh$$, $a$$) {
    1 == this.gethitrange($w$$, $sh$$) && (this.log("+1 attack against %0", $sh$$.name), $a$$ += 1);
    return $a$$;
  });
}, unique:!0, unit:"TIE Fighter", skill:7, points:17, upgrades:[ELITE]}, {name:"'Howlrunner'", unique:!0, done:!0, pilotid:22, faction:EMPIRE, unit:"TIE Fighter", skill:8, init:function() {
  Unit.prototype.adddicemodifier(ATTACK_M, REROLL_M, ATTACK_M, this, {dice:["blank", "focus"], n:function() {
    return 1;
  }, req:function($attacker$$, $w$$, $defender$$) {
    return $attacker$$ != this && !this.dead && 1 == $attacker$$.getrange(this) && $attacker$$.isally(this) && $w$$.isprimary ? ($attacker$$.log("+%1 reroll(s) [%0]", this.name, 1), !0) : !1;
  }.bind(this)});
}, points:18, upgrades:[ELITE]}, {name:"Maarek Stele", unique:!0, done:!0, pilotid:23, ambiguous:!0, faction:EMPIRE, edition:"TIE Advanced", unit:"TIE Advanced", skill:7, points:27, init:maarek_fct, upgrades:[ELITE, MISSILE]}, {name:"Maarek Stele", unique:!0, done:!0, pilotid:24, ambiguous:!0, edition:"TIE Defender", faction:EMPIRE, unit:"TIE Defender", skill:7, points:35, init:maarek_fct, shipimg:"tie-defender-red.png", upgrades:[ELITE, CANNON, MISSILE]}, {name:"Tempest Squadron Pilot", faction:EMPIRE, 
done:!0, pilotid:25, unit:"TIE Advanced", skill:2, points:21, upgrades:[MISSILE]}, {name:"Storm Squadron Pilot", faction:EMPIRE, done:!0, pilotid:26, unit:"TIE Advanced", skill:4, points:23, upgrades:[MISSILE]}, {name:"Darth Vader", faction:EMPIRE, unique:!0, done:!0, pilotid:27, unit:"TIE Advanced", skill:9, init:function() {
  this.wrap_before("doendmaneuveraction", this, function() {
    this.log("+1 action [%0]", this.name);
    this.doaction(this.getactionlist(), "", this.candoendmaneuveraction);
  });
}, secaction:-1, points:29, upgrades:[ELITE, MISSILE]}, {name:"Alpha Squadron Pilot", faction:EMPIRE, done:!0, pilotid:28, unit:"TIE Interceptor", skill:1, points:18, upgrades:[]}, {name:"Avenger Squadron Pilot", faction:EMPIRE, done:!0, pilotid:29, unit:"TIE Interceptor", skill:3, points:20, upgrades:[]}, {name:"Saber Squadron Pilot", faction:EMPIRE, done:!0, pilotid:30, unit:"TIE Interceptor", skill:4, points:21, upgrades:["Elite"]}, {name:"'Fel's Wrath'", faction:EMPIRE, unique:!0, unit:"TIE Interceptor", 
skill:5, pilotid:31, done:!0, init:function() {
  this.wrap_after("endcombatphase", this, function() {
    this.hasfired = 0;
    this.checkdead();
  });
  this.wrap_after("canbedestroyed", this, function($skillturn$$, $b$$) {
    return -1 == $skillturn$$;
  });
}, points:23, upgrades:[]}, {name:"Turr Phennir", faction:EMPIRE, unique:!0, done:!0, pilotid:32, unit:"TIE Interceptor", skill:7, init:function() {
  this.addafterattackeffect(this, function() {
    var $p$$ = [];
    this.candoboost() && $p$$.push(this.newaction(this.resolveboost, "BOOST"));
    this.candoroll() && $p$$.push(this.newaction(this.resolveroll, "ROLL"));
    this.doaction($p$$, "free %BOOST% or %ROLL% action");
  });
}, points:25, upgrades:[ELITE]}, {name:"Soontir Fel", faction:EMPIRE, unique:!0, done:!0, pilotid:33, init:function() {
  this.wrap_after("addstress", this, function() {
    this.log("+1 %STRESS% -> +1 %FOCUS%");
    this.addfocustoken();
  });
}, unit:"TIE Interceptor", skill:9, points:27, upgrades:[ELITE]}, {name:"Tycho Celchu", faction:REBEL, unique:!0, pilotid:34, done:!0, init:function() {
  this.wrap_after("hasnostresseffect", this, function() {
    return !0;
  });
}, unit:"A-Wing", skill:8, points:26, upgrades:[ELITE, MISSILE]}, {name:"Arvel Crynyd", faction:REBEL, pilotid:35, unique:!0, done:!0, unit:"A-Wing", init:function() {
  this.wrap_after("checkcollision", this, function($sh$$) {
    return !1;
  });
}, skill:6, points:23, upgrades:[MISSILE]}, {name:"Green Squadron Pilot", faction:REBEL, done:!0, unit:"A-Wing", skill:3, pilotid:36, points:19, upgrades:[ELITE, MISSILE]}, {name:"Prototype Pilot", faction:REBEL, done:!0, pilotid:37, unit:"A-Wing", skill:1, points:17, upgrades:[MISSILE]}, {name:"Outer Rim Smuggler", faction:REBEL, unit:"YT-1300", done:!0, pilotid:38, install:function() {
  this.hull = 6;
  this.shield = 4;
  this.weapons[0].attack = 2;
}, uninstall:function() {
  this.hull = 8;
  this.shield = 5;
  this.weapons[0].attack = 3;
}, skill:1, points:27, upgrades:[CREW, CREW]}, {name:"Chewbacca", unique:!0, done:!0, ambiguous:!0, faction:REBEL, unit:"YT-1300", skill:5, pilotid:39, points:42, deal:function($c$$, $f$$) {
  var $p$$ = $.Deferred();
  return $f$$ == FACEUP ? (this.log("turn faceup damage facedown"), $p$$.resolve({crit:$c$$, face:FACEDOWN}).promise()) : $p$$.resolve({crit:$c$$, face:$f$$}).promise();
}, upgrades:[ELITE, MISSILE, CREW, CREW]}, {name:"Lando Calrissian", faction:REBEL, unique:!0, unit:"YT-1300", skill:7, pilotid:40, points:44, init:function() {
  this.wrap_after("handledifficulty", this, function($d$$) {
    "GREEN" == $d$$ && this.selectunit(this.selectnearbyally(1), function($p$$, $k$$) {
      $p$$[$k$$].log("+1 action [%0]", this.name);
      $p$$[$k$$].doaction($p$$[$k$$].getactionbarlist(), "");
    }.bind(this), ["select unit (or self to cancel) [%0]", this.name], !0);
  });
}, done:!0, upgrades:[ELITE, MISSILE, CREW, CREW]}, {name:"Han Solo", unique:!0, done:!0, faction:REBEL, unit:"YT-1300", skill:9, pilotid:41, points:46, init:function() {
  this.adddicemodifier(ATTACK_M, REROLL_M, ATTACK_M, this, {dice:["blank", "focus", "hit", "critical"], n:function() {
    return 9;
  }, req:function($attack$$, $w$$, $defender$$) {
    return !0;
  }, mustreroll:!0});
}, upgrades:[ELITE, MISSILE, CREW, CREW]}, {name:"Kath Scarlet", unique:!0, faction:EMPIRE, unit:"Firespray-31", skill:7, pilotid:42, done:!0, init:function() {
  this.wrap_before("resolveattack", this, function($w$$, $target$$) {
    var $self$$ = this;
    $target$$.wrap_after("cancelcritical", $self$$, function($r$$, $org$$, $r2$$) {
      FCH_crit($r$$.ch) > FCH_crit($r2$$.ch) && (this.log("+1 %STRESS% for cancelling %CRIT% [%0]", $self$$.name), this.addstress());
      return $r2$$;
    }).unwrapper("afterdefenseeffect");
  });
}, points:38, upgrades:[ELITE, CANNON, BOMB, CREW, MISSILE]}, {name:"Boba Fett", unique:!0, done:!0, pilotid:43, faction:EMPIRE, init:function() {
  this.wrap_after("getmaneuverlist", this, function($p$$) {
    if (this.hasionizationeffect()) {
      return $p$$;
    }
    for (var $i$$ = 1;3 >= $i$$;$i$$++) {
      "undefined" != typeof $p$$["BL" + $i$$] ? (this.log("select %BANKLEFT% or %BANKRIGHT% turn"), $p$$["BR" + $i$$] = {move:"BR" + $i$$, difficulty:$p$$["BL" + $i$$].difficulty}) : "undefined" != typeof $p$$["BR" + $i$$] && (this.log("select %BANKLEFT% or %BANKRIGHT% turn"), $p$$["BL" + $i$$] = {move:"BL" + $i$$, difficulty:$p$$["BR" + $i$$].difficulty});
    }
    return $p$$;
  });
}, unit:"Firespray-31", skill:8, points:39, upgrades:[ELITE, CANNON, BOMB, CREW, MISSILE]}, {name:"Krassis Trelix", unique:!0, done:!0, pilotid:44, faction:EMPIRE, unit:"Firespray-31", init:function() {
  this.adddicemodifier(ATTACK_M, REROLL_M, ATTACK_M, this, {dice:["blank", "focus"], n:function() {
    return 1;
  }, req:function($attack$$, $w$$, $defender$$) {
    return $w$$.isprimary ? !1 : ($attack$$.log("+%1 reroll(s) [%0]", $attack$$.name, 1), !0);
  }});
}, skill:5, points:36, upgrades:[CANNON, BOMB, CREW, MISSILE]}, {name:"Bounty Hunter", unit:"Firespray-31", skill:3, pilotid:45, done:!0, faction:EMPIRE, points:33, upgrades:[CANNON, BOMB, CREW, MISSILE]}, {name:"Ten Numb", faction:REBEL, unique:!0, done:!0, pilotid:46, unit:"B-Wing", skill:8, shipimg:"b-wing-1.png", init:function() {
  var $self$$ = this;
  this.wrap_before("resolveattack", this, function($w$$, $target$$) {
    $target$$.wrap_after("cancelcritical", $self$$, function($r$$, $org$$, $r2$$) {
      return 0 < FCH_crit($r$$.ch) && 0 == FCH_crit($r2$$.ch) ? ($target$$.log("cannot cancel 1 %CRIT% [%0]", this.name), {ch:$r2$$.ch + FCH_CRIT, e:$r2$$.e + 1}) : $r2$$;
    }.bind(this)).unwrapper("afterdefenseeffect");
  });
}, points:31, upgrades:[ELITE, SYSTEM, CANNON, TORPEDO, TORPEDO]}, {name:"Ibtisam", unique:!0, done:!0, faction:REBEL, unit:"B-Wing", skill:6, pilotid:47, points:28, shipimg:"b-wing-1.png", init:function() {
  var $m$$ = {dice:["blank", "focus"], n:function() {
    return 1;
  }, req:function($attacker$$, $w$$, $defender$$) {
    return 0 < this.stress ? (this.log("+%0 reroll", 1), !0) : !1;
  }.bind(this)};
  this.adddicemodifier(DEFENSE_M, REROLL_M, DEFENSE_M, this, $m$$);
  this.adddicemodifier(ATTACK_M, REROLL_M, ATTACK_M, this, $.extend({}, $m$$));
}, upgrades:[ELITE, SYSTEM, CANNON, TORPEDO, TORPEDO]}, {name:"Dagger Squadron Pilot", unit:"B-Wing", done:!0, pilotid:48, faction:REBEL, skill:4, points:24, upgrades:[SYSTEM, CANNON, TORPEDO, TORPEDO]}, {name:"Blue Squadron Pilot", unit:"B-Wing", done:!0, faction:REBEL, skill:2, pilotid:49, points:22, upgrades:[SYSTEM, CANNON, TORPEDO, TORPEDO]}, {name:"Rebel Operative", unit:"HWK-290", done:!0, faction:REBEL, skill:2, pilotid:50, points:16, upgrades:[TURRET, CREW]}, {name:"Roark Garnet", unique:!0, 
faction:REBEL, unit:"HWK-290", skill:4, pilotid:51, init:function() {
  this.wrap_after("begincombatphase", this, function($l$$) {
    var $self$$ = this;
    this.selectunit(this.selectnearbyally(3), function($p$$, $k$$) {
      $p$$[$k$$].log("has PS of 12");
      $p$$[$k$$].wrap_after("getskill", $self$$, function($s$$) {
        return 12;
      }).unwrapper("endcombatphase");
    }, ["select unit [%0]", this.name], !1);
    return $l$$;
  });
}, done:!0, points:19, upgrades:[TURRET, CREW]}, {name:"Kyle Katarn", faction:REBEL, unique:!0, done:!0, unit:"HWK-290", skill:6, pilotid:52, points:21, init:function() {
  this.wrap_after("begincombatphase", this, function($l$$) {
    this.canusefocus() && this.selectunit(this.selectnearbyally(3), function($p$$, $k$$) {
      this.removefocustoken();
      $p$$[$k$$].addfocustoken();
      $p$$[$k$$].log("+1 %FOCUS%");
    }, ["select unit for free %FOCUS% (or self to cancel)"], !0);
    return $l$$;
  });
}, upgrades:[ELITE, TURRET, CREW]}, {name:"Jan Ors", faction:REBEL, unique:!0, done:!0, pilotid:53, unit:"HWK-290", skill:8, init:function() {
  var $self$$ = this;
  Unit.prototype.adddicemodifier(ATTACK_M, ADD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return 0 == $self$$.stress && !$self$$.dead && activeunit.isally($self$$) & activeunit != $self$$ && 3 >= $self$$.getrange(activeunit);
  }, f:function($m$$, $n$$) {
    var $f$$ = $self$$.rollattackdie(1, $self$$, "critical")[0];
    $self$$.addstress();
    activeunit.log("+1 attack die [%0]", $self$$.name);
    return "focus" == $f$$ ? {m:$m$$ + FCH_FOCUS, n:$n$$ + 1} : "hit" == $f$$ ? {m:$m$$ + FCH_HIT, n:$n$$ + 1} : "critical" == $f$$ ? {m:$m$$ + FCH_CRIT, n:$n$$ + 1} : {m:$m$$, n:$n$$ + 1};
  }, str:"hit"});
}, points:25, upgrades:[ELITE, TURRET, CREW]}, {name:"Scimitar Squadron Pilot", done:!0, unit:"TIE Bomber", skill:2, pilotid:54, faction:EMPIRE, points:16, upgrades:[TORPEDO, TORPEDO, MISSILE, MISSILE, BOMB]}, {name:"Gamma Squadron Pilot", done:!0, pilotid:55, unit:"TIE Bomber", faction:EMPIRE, skill:4, points:18, upgrades:[TORPEDO, TORPEDO, MISSILE, MISSILE, BOMB]}, {name:"Captain Jonus", faction:EMPIRE, done:!0, pilotid:56, init:function() {
  Unit.prototype.adddicemodifier(ATTACK_M, REROLL_M, ATTACK_M, this, {dice:["blank", "focus"], n:function() {
    return 2;
  }, req:function($attacker$$, $w$$, $defender$$) {
    return $attacker$$ != this && !this.dead && 1 == $attacker$$.getrange(this) && $attacker$$.isally(this) && 1 != $w$$.isprimary ? ($attacker$$.log("+%1 reroll(s) [%0]", this.name, 2), !0) : !1;
  }.bind(this)});
}, unique:!0, unit:"TIE Bomber", skill:6, points:22, upgrades:[ELITE, TORPEDO, TORPEDO, MISSILE, MISSILE, BOMB]}, {name:"Major Rhymer", done:!0, pilotid:57, faction:EMPIRE, init:function() {
  for (var $i$$ = 0;$i$$ < this.weapons.length;$i$$++) {
    this.weapons[$i$$].wrap_after("getlowrange", this, function($n$$) {
      1 < $n$$ && --$n$$;
      return $n$$;
    }), this.weapons[$i$$].wrap_after("gethighrange", this, function($n$$) {
      3 > $n$$ && ($n$$ += 1);
      return $n$$;
    });
  }
  this.log("extending weapon ranges");
}, unique:!0, unit:"TIE Bomber", skill:7, points:26, upgrades:[ELITE, TORPEDO, TORPEDO, MISSILE, MISSILE, BOMB]}, {name:"Captain Kagi", faction:EMPIRE, unique:!0, done:!0, pilotid:58, init:function() {
  var $self$$ = this;
  Unit.prototype.wrap_after("gettargetableunits", this, function($n$$, $p$$) {
    -1 < $p$$.indexOf($self$$) && !$self$$.dead && ($p$$ = [$self$$]);
    return $p$$;
  });
}, unit:"Lambda-Class Shuttle", skill:8, points:27, upgrades:[SYSTEM, CANNON, CREW, CREW]}, {name:"Colonel Jendon", faction:EMPIRE, pilotid:59, init:function() {
  this.wrap_after("begincombatphase", this, function($l$$) {
    0 < this.targeting.length && this.selectunit(this.selectnearbyally(1), function($p$$, $k$$) {
      var $t$$ = this.targeting[0];
      $p$$[$k$$].addtarget($t$$);
      this.removetarget($t$$);
      $p$$[$k$$].log("+%1 %TARGET% / %0", $t$$.name, 1);
    }, ["select unit to move %TARGET% (or self to cancel)"], !0);
    return $l$$;
  });
}, done:!0, unique:!0, unit:"Lambda-Class Shuttle", skill:6, points:26, upgrades:[SYSTEM, CANNON, CREW, CREW]}, {name:"Captain Yorr", faction:EMPIRE, pilotid:60, unique:!0, done:!0, unit:"Lambda-Class Shuttle", skill:4, init:function() {
  var $self$$ = this;
  Unit.prototype.wrap_after("addstress", this, function() {
    -1 < this.selectnearbyally(2).indexOf($self$$) && 2 >= $self$$.stress && !$self$$.dead && (this.log("%STRESS% -> %0 [%0]", $self$$.name), this.removestresstoken(), this.showinfo(), $self$$.addstress(), $self$$.showinfo());
  });
}, points:24, upgrades:[SYSTEM, CANNON, CREW, CREW]}, {name:"Omicron Group Pilot", faction:EMPIRE, done:!0, unit:"Lambda-Class Shuttle", skill:2, pilotid:61, points:21, upgrades:[SYSTEM, CANNON, CREW, CREW]}, {name:"Lieutenant Lorrir", faction:EMPIRE, unique:!0, done:!0, pilotid:62, unit:"TIE Interceptor", skill:5, points:23, resolveroll:function($n$$) {
  for (var $p$$ = [], $i$$ = -20;20 >= $i$$;$i$$ += 20) {
    var $mm$$ = this.m.clone().translate(0, $i$$).rotate(90, 0, 0), $mn$$ = this.m.clone().translate(0, $i$$).rotate(-90, 0, 0), $p$$ = $p$$.concat([this.getpathmatrix($mm$$, "BR1").rotate(-90, 0, 0), this.getpathmatrix($mn$$, "BR1").rotate(90, 0, 0), this.getpathmatrix($mm$$, "BL1").rotate(-90, 0, 0), this.getpathmatrix($mn$$, "BL1").rotate(90, 0, 0)]);
  }
  $p$$ = $p$$.concat(this.getrollmatrix(this.m));
  this.resolveactionmove($p$$, function($t$$, $k$$) {
    12 > $k$$ && $t$$.addstress();
    $t$$.endaction($n$$, "ROLL");
  }, !0, this.canmoveonobstacles("ROLL"));
  return !0;
}, upgrades:[]}, {name:"Royal Guard Pilot", faction:EMPIRE, shipimg:"tie-interceptor-1.png", done:!0, pilotid:63, unit:"TIE Interceptor", skill:6, points:22, upgrades:[ELITE]}, {name:"Tetran Cowall", faction:EMPIRE, unique:!0, done:!0, pilotid:64, init:function() {
  this.wrap_after("getmaneuverlist", this, function($p$$) {
    var $found$$ = !1, $m$$, $i$$;
    for ($i$$ in $p$$) {
      if ($i$$.match(/K/)) {
        $found$$ = !0;
        $m$$ = $p$$[$i$$];
        break;
      }
    }
    if ($found$$ && !this.hasionizationeffect()) {
      for (this.log("select %UTURN% speed"), $i$$ = 1;5 >= $i$$;$i$$ += 2) {
        "undefined" == typeof $p$$["K" + $i$$] && ($p$$["K" + $i$$] = {move:"K" + $i$$, difficulty:$m$$.difficulty, halfturn:!1});
      }
    }
    return $p$$;
  });
}, unit:"TIE Interceptor", skill:7, points:24, upgrades:[ELITE]}, {name:"Kir Kanos", faction:EMPIRE, shipimg:"tie-interceptor-1.png", pilotid:65, init:function() {
  this.adddicemodifier(ATTACK_M, ADD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    var $r$$ = this.getrange(targetunit);
    return 3 >= $r$$ && 2 <= $r$$ && this.canuseevade();
  }.bind(this), f:function($m$$, $n$$) {
    this.removeevadetoken();
    this.log("+1 %HIT% for attacking at range 2-3");
    return {m:$m$$ + FCH_HIT, n:$n$$ + 1};
  }.bind(this), str:"evade"});
}, done:!0, unique:!0, unit:"TIE Interceptor", skill:6, points:24, upgrades:[]}, {name:"Carnor Jax", faction:EMPIRE, pilotid:66, init:function() {
  var $unit$$ = this;
  Unit.prototype.wrap_after("canusefocus", this, function($b$$) {
    return 1 == this.getrange($unit$$) && this.isenemy($unit$$) && !$unit$$.dead ? !1 : $b$$;
  });
  Unit.prototype.wrap_after("canuseevade", this, function($b$$) {
    return 1 == this.getrange($unit$$) && this.isenemy($unit$$) && !$unit$$.dead ? !1 : $b$$;
  });
  Unit.prototype.wrap_after("candofocus", this, function($b$$) {
    return 1 == this.getrange($unit$$) && this.isenemy($unit$$) && !$unit$$.dead ? !1 : $b$$;
  });
  Unit.prototype.wrap_after("candoevade", this, function($b$$) {
    return 1 == this.getrange($unit$$) && this.isenemy($unit$$) && !$unit$$.dead ? !1 : $b$$;
  });
}, unique:!0, done:!0, unit:"TIE Interceptor", shipimg:"tie-interceptor-1.png", skill:8, points:26, upgrades:[ELITE]}, {name:"Bandit Squadron Pilot", faction:REBEL, pilotid:67, done:!0, unit:"Z-95 Headhunter", skill:2, points:12, upgrades:[MISSILE]}, {name:"Tala Squadron Pilot", faction:REBEL, pilotid:68, done:!0, unit:"Z-95 Headhunter", skill:4, points:13, upgrades:[MISSILE]}, {name:"Lieutenant Blount", faction:REBEL, pilotid:69, done:!0, init:function() {
  this.wrap_after("hashit", this, function($t$$, $b$$) {
    0 == this.criticalresolved + this.hitresolved && this.log("%0 is hit", targetunit.name);
    return !0;
  });
}, unique:!0, unit:"Z-95 Headhunter", skill:6, points:17, upgrades:[ELITE, MISSILE]}, {name:"Airen Cracken", faction:REBEL, pilotid:70, done:!0, init:function() {
  this.addafterattackeffect(this, function() {
    var $p$$ = this.selectnearbyally(1, function($t$$, $s$$) {
      return $s$$.candoaction();
    });
    0 < $p$$.length && this.doselection(function($n$$) {
      this.log("select unit for a free action" + $p$$.length);
      this.resolveactionselection($p$$, function($k$$) {
        var $al$$ = $p$$[$k$$].getactionlist();
        0 < $al$$.length ? $p$$[$k$$].doaction($al$$, "").done(function() {
          this.select();
        }.bind(this)) : this.select();
        this.endnoaction($n$$, "");
      }.bind(this));
    }.bind(this));
  });
}, unique:!0, unit:"Z-95 Headhunter", skill:8, points:19, upgrades:[ELITE, MISSILE]}, {name:"Delta Squadron Pilot", faction:EMPIRE, pilotid:71, done:!0, unit:"TIE Defender", skill:1, points:30, upgrades:[CANNON, MISSILE]}, {name:"Glaive Squadron Pilot", faction:EMPIRE, done:!0, pilotid:72, unit:"TIE Defender", skill:6, points:34, upgrades:[ELITE, CANNON, MISSILE], shipimg:"tie-defender-red.png"}, {name:"Onyx Squadron Pilot", done:!0, faction:EMPIRE, pilotid:73, unit:"TIE Defender", skill:3, points:32, 
upgrades:[CANNON, MISSILE]}, {name:"Colonel Vessery", done:!0, pilotid:74, faction:EMPIRE, init:function() {
  this.wrap_after("attackroll", this, function($n$$, $r$$) {
    0 < targetunit.istargeted.length && 0 == this.targeting.length && (this.addtarget(targetunit), this.log("+%1 %TARGET% / %0", targetunit.name, 1));
    return $r$$;
  });
}, unique:!0, unit:"TIE Defender", skill:6, points:35, upgrades:[ELITE, CANNON, MISSILE]}, {name:"Rexler Brath", faction:EMPIRE, done:!0, pilotid:75, init:function() {
  this.addafterattackeffect(this, function($c$$, $h$$) {
    this.canusefocus() && 0 < this.hitresolved && (this.log("-1 %FOCUS%, %0 damage -> %0 critical(s)", $h$$), this.donoaction([{name:this.name, org:this, type:"FOCUS", action:function($n$$) {
      var $l$$ = targetunit.criticals.length - 1;
      this.removefocustoken();
      for (var $i$$ = 0;$i$$ < this.hitresolved;$i$$++) {
        this.log(targetunit.criticals[$l$$ - $i$$ - this.criticalresolved].name), targetunit.criticals[$l$$ - $i$$ - this.criticalresolved].faceup();
      }
      targetunit.checkdead();
      targetunit.show();
      this.endnoaction($n$$, "");
    }.bind(this)}], "", !0));
  });
}, unique:!0, unit:"TIE Defender", skill:8, points:37, upgrades:[ELITE, CANNON, MISSILE]}, {name:"Knave Squadron Pilot", faction:REBEL, done:!0, pilotid:76, unit:"E-Wing", skill:1, points:27, upgrades:[SYSTEM, TORPEDO, ASTROMECH]}, {name:"Blackmoon Squadron Pilot", pilotid:77, faction:REBEL, done:!0, unit:"E-Wing", skill:3, points:29, upgrades:[SYSTEM, TORPEDO, ASTROMECH]}, {name:"Etahn A'baht", done:!0, pilotid:78, faction:REBEL, init:function() {
  var $self$$ = this;
  Unit.prototype.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return $self$$.isally(activeunit) && !$self$$.dead && $self$$.isinfiringarc(targetunit);
  }, aiactivate:function($m$$, $n$$) {
    return FCH_hit($m$$);
  }, f:function($m$$, $n$$) {
    return 0 < FCH_hit($m$$) ? (this.log("1 %HIT% -> 1 %CRIT% [%0]", $self$$.name), $m$$ + FCH_CRIT - FCH_HIT) : $m$$;
  }, str:"hit"});
}, unique:!0, unit:"E-Wing", skill:5, points:32, upgrades:[ELITE, SYSTEM, TORPEDO, ASTROMECH]}, {name:"Corran Horn", faction:REBEL, done:!0, pilotid:79, init:function() {
  this.addattack(function() {
    return !0;
  }, this, this.weapons, function() {
    this.log("no attack next round");
    this.noattack = round + 1;
  }, null, "endcombatphase");
}, unique:!0, unit:"E-Wing", skill:8, points:35, upgrades:[ELITE, SYSTEM, TORPEDO, ASTROMECH]}, {name:"Sigma Squadron Pilot", faction:EMPIRE, pilotid:80, done:!0, unit:"TIE Phantom", skill:3, points:25, upgrades:[SYSTEM, CREW]}, {name:"Shadow Squadron Pilot", done:!0, faction:EMPIRE, pilotid:81, unit:"TIE Phantom", skill:5, points:27, upgrades:[SYSTEM, CREW]}, {name:"'Echo'", faction:EMPIRE, done:!0, pilotid:82, getdecloakmatrix:function($m$$) {
  var $i$jscomp$120_m0$$;
  $i$jscomp$120_m0$$ = this.getpathmatrix($m$$, "BL2");
  var $m1$jscomp$2_p$$ = this.getpathmatrix($m$$, "BR2"), $m1$jscomp$2_p$$ = [this.m, $i$jscomp$120_m0$$, $m1$jscomp$2_p$$];
  for ($i$jscomp$120_m0$$ = -20;20 >= $i$jscomp$120_m0$$;$i$jscomp$120_m0$$ += 20) {
    var $mm$$ = $m$$.clone().translate(0, $i$jscomp$120_m0$$).rotate(90, 0, 0), $mn$$ = $m$$.clone().translate(0, $i$jscomp$120_m0$$).rotate(-90, 0, 0), $m1$jscomp$2_p$$ = $m1$jscomp$2_p$$.concat([this.getpathmatrix($mm$$, "BL2").rotate(-90, 0, 0), this.getpathmatrix($mm$$, "BR2").rotate(-90, 0, 0), this.getpathmatrix($mn$$, "BL2").rotate(90, 0, 0), this.getpathmatrix($mn$$, "BR2").rotate(90, 0, 0)]);
  }
  return $m1$jscomp$2_p$$;
}, unique:!0, unit:"TIE Phantom", skill:6, points:30, upgrades:[ELITE, SYSTEM, CREW]}, {name:"'Whisper'", faction:EMPIRE, done:!0, pilotid:83, init:function() {
  this.wrap_after("hashit", this, function($t$$, $h$$) {
    $h$$ && (this.log("+1 %FOCUS%"), this.addfocustoken());
    return $h$$;
  });
}, unique:!0, unit:"TIE Phantom", skill:7, points:32, upgrades:[ELITE, SYSTEM, CREW]}, {name:"Wes Janson", done:!0, pilotid:84, init:function() {
  this.wrap_before("cleanupattack", this, function() {
    0 < targetunit.targeting.length ? (targetunit.log("-1 %TARGET% [%0]", this.name), targetunit.removetarget(targetunit.targeting[0])) : 0 < targetunit.focus ? (targetunit.log("-1 %FOCUS% [%0]", this.name), targetunit.removefocustoken()) : 0 < targetunit.evade && (targetunit.log("-1 %EVADE% [%0]", this.name), targetunit.removeevadetoken());
  });
}, faction:REBEL, unique:!0, unit:"X-Wing", skill:8, points:29, upgrades:[ELITE, TORPEDO, ASTROMECH]}, {name:"Jek Porkins", done:!0, pilotid:85, init:function() {
  this.wrap_after("addstress", this, function() {
    this.removestresstoken();
    var $roll$$ = this.rollattackdie(1, this, "blank")[0];
    this.log("-1 %STRESS%, roll 1 attack dice");
    "hit" == $roll$$ && (this.applyhit(1), this.checkdead());
  });
}, faction:REBEL, unique:!0, unit:"X-Wing", skill:7, points:26, upgrades:[ELITE, TORPEDO, ASTROMECH]}, {name:"'Hobbie' Klivian", faction:REBEL, done:!0, pilotid:86, init:function() {
  this.wrap_before("removetarget", this, function($t$$) {
    this.stress && (this.log("-1 %TARGET% -> -1 %STRESS%"), this.removestresstoken());
  });
  this.wrap_before("addtarget", this, function($t$$) {
    this.stress && (this.removestresstoken(), this.log("+1 %TARGET% -> -1 %STRESS%"));
  });
}, unique:!0, unit:"X-Wing", skill:5, points:25, upgrades:[TORPEDO, ASTROMECH]}, {name:"Tarn Mison", done:!0, pilotid:87, init:function() {
  this.wrap_after("isattackedby", this, function($w$$, $a$$) {
    if (0 == this.targeting.length || this.getskill() < $a$$.getskill()) {
      this.log("+%1 %TARGET% / %0", $a$$.name, 1), this.addtarget($a$$);
    }
  });
}, faction:REBEL, unique:!0, unit:"X-Wing", skill:3, points:23, upgrades:[TORPEDO, ASTROMECH]}, {name:"Jake Farrell", faction:REBEL, done:!0, pilotid:88, freemove:function() {
  var $p$$ = [];
  this.candoboost() && $p$$.push(this.newaction(this.resolveboost, "BOOST"));
  this.candoroll() && $p$$.push(this.newaction(this.resolveroll, "ROLL"));
  this.doaction($p$$, "free %BOOST% or %ROLL% action");
}, init:function() {
  this.wrap_before("addfocustoken", this, function() {
    this.candoaction() && this.freemove();
  });
}, unique:!0, unit:"A-Wing", skill:7, points:24, upgrades:[ELITE, MISSILE]}, {name:"Gemmer Sojan", done:!0, pilotid:89, init:function() {
  this.wrap_after("getagility", this, function($a$$) {
    return 0 < this.selectnearbyenemy(1).length ? $a$$ + 1 : $a$$;
  });
}, faction:REBEL, unique:!0, unit:"A-Wing", skill:5, points:22, upgrades:[MISSILE]}, {name:"Keyan Farlander", faction:REBEL, done:!0, pilotid:90, shipimg:"b-wing-1.png", init:function() {
  this.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return 0 < this.stress;
  }.bind(this), aiactivate:function($m$$, $n$$) {
    return !0;
  }, f:function($m$$, $n$$) {
    var $f$$ = FCH_focus($m$$);
    this.removestresstoken();
    return 0 < $f$$ ? (this.log("%0 %FOCUS% -> %0 %HIT%, -1 %STRESS%", $f$$), $m$$ - FCH_FOCUS * $f$$ + FCH_HIT * $f$$) : $m$$;
  }.bind(this), str:"stress", noreroll:"focus"});
}, unique:!0, unit:"B-Wing", skill:7, points:29, upgrades:[ELITE, SYSTEM, CANNON, TORPEDO, TORPEDO]}, {name:"Nera Dantels", faction:REBEL, done:!0, pilotid:91, shipimg:"b-wing-1.png", init:function() {
  this.log("can fire %TORPEDO% at 360 degrees");
  this.wrap_after("isTurret", this, function($w$$, $b$$) {
    return $w$$.type == TORPEDO ? !0 : $b$$;
  });
}, unique:!0, unit:"B-Wing", skill:5, points:26, upgrades:[ELITE, SYSTEM, CANNON, TORPEDO, TORPEDO]}, {name:"Wild Space Fringer", done:!0, pilotid:92, faction:REBEL, unit:"YT-2400", skill:2, points:30, upgrades:[CANNON, MISSILE, CREW]}, {name:"Eaden Vrill", done:!0, pilotid:93, init:function() {
  this.wrap_after("getattackstrength", this, function($w$$, $sh$$, $a$$) {
    return 0 < $sh$$.stress && this.weapons[$w$$].isprimary ? (this.log("+1 attack die"), $a$$ + 1) : $a$$;
  });
}, faction:REBEL, unit:"YT-2400", unique:!0, skill:3, points:32, upgrades:[CANNON, MISSILE, CREW]}, {name:"'Leebo'", faction:REBEL, done:!0, pilotid:94, init:function() {
  this.wrap_after("deal", this, function($c$$, $f$$, $p$$) {
    var $pp$$ = $.Deferred();
    $p$$.then(function($cf$jscomp$1_s1$jscomp$1_sc$$) {
      if ($cf$jscomp$1_s1$jscomp$1_sc$$.face == FACEUP) {
        $cf$jscomp$1_s1$jscomp$1_sc$$ = this.selectdamage();
        CRITICAL_DECK[$cf$jscomp$1_s1$jscomp$1_sc$$].count--;
        var $s2$$ = this.selectdamage();
        CRITICAL_DECK[$s2$$].count--;
        $cf$jscomp$1_s1$jscomp$1_sc$$ = [$cf$jscomp$1_s1$jscomp$1_sc$$, $s2$$];
        this.log("select one critical");
        this.selectcritical($cf$jscomp$1_s1$jscomp$1_sc$$, function($m$$) {
          $pp$$.resolve({crit:new Critical(this, $m$$), face:FACEUP});
        }.bind(this));
      } else {
        $pp$$.resolve($cf$jscomp$1_s1$jscomp$1_sc$$);
      }
    }.bind(this));
    return $pp$$.promise();
  });
}, unit:"YT-2400", unique:!0, skill:5, points:34, upgrades:[ELITE, CANNON, MISSILE, CREW]}, {name:"Dash Rendar", faction:REBEL, pilotid:95, unit:"YT-2400", unique:!0, skill:7, done:!0, init:function() {
  this.wrap_after("hascollidedobstacle", this, function($b$$) {
    return !1;
  });
  this.wrap_after("canmoveonobstacles", this, function() {
    return !0;
  });
}, points:36, upgrades:[ELITE, CANNON, MISSILE, CREW]}, {name:"Patrol Leader", faction:EMPIRE, done:!0, pilotid:96, unit:"VT-49 Decimator", skill:3, points:40, upgrades:[TORPEDO, CREW, CREW, CREW, BOMB]}, {name:"Captain Oicunn", faction:EMPIRE, unit:"VT-49 Decimator", skill:4, points:42, pilotid:97, unique:!0, done:!0, init:function() {
  this.wrap_before("resolvecollision", this, function() {
    for (var $i$$ = 0;$i$$ < this.touching.length;$i$$++) {
      var $u$$ = this.touching[$i$$];
      $u$$.isenemy(this) && ($u$$.log("+1 %HIT% [%0]", this.name), $u$$.resolvehit(1), $u$$.checkdead());
    }
  });
}, upgrades:[ELITE, TORPEDO, CREW, CREW, CREW, BOMB]}, {name:"Commander Kenkirk", faction:EMPIRE, pilotid:98, init:function() {
  this.wrap_after("getagility", this, function($a$$) {
    return 0 < this.criticals.length ? $a$$ + 1 : $a$$;
  });
}, done:!0, unit:"VT-49 Decimator", skill:6, points:44, unique:!0, upgrades:[ELITE, TORPEDO, CREW, CREW, CREW, BOMB]}, {name:"Rear Admiral Chiraneau", pilotid:99, init:function() {
  this.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return 2 >= this.getrange(targetunit);
  }.bind(this), aiactivate:function($m$$, $n$$) {
    return FCH_focus($m$$);
  }, f:function($m$$, $n$$) {
    return 0 < FCH_focus($m$$) ? (this.log("1 %FOCUS% -> 1 %CRIT%"), $m$$ - FCH_FOCUS + FCH_CRIT) : $m$$;
  }.bind(this), str:"hit"});
}, faction:EMPIRE, unit:"VT-49 Decimator", skill:8, points:46, done:!0, unique:!0, upgrades:[ELITE, TORPEDO, CREW, CREW, CREW, BOMB]}, {name:"Prince Xizor", faction:SCUM, pilotid:100, modifydamageassigned:function($ch$$, $attacker$$) {
  var $p$$ = [];
  if (0 == $ch$$) {
    return 0;
  }
  $p$$ = this.selectnearbyally(1);
  if (0 < $p$$.length) {
    $p$$.sort(function($a$$, $b$$) {
      hpa = $a$$.hull + $a$$.shield;
      hpb = $b$$.hull + $b$$.shield;
      return hpa < hpb ? 1 : hpa > hpb ? -1 : 0;
    });
    if (10 <= $ch$$) {
      return $p$$[0].resolvecritical(1), this.log("-1 %CRIT%"), $p$$[0].log("+1 %CRIT% [%0]", this.name), $ch$$ - 10;
    }
    $p$$[0].resolvehit(1);
    $p$$[0].checkdead();
    this.log("-1 %HIT%");
    $p$$[0].log("+%1 %HIT% [%0]", this.name, 1);
    return $ch$$ - 1;
  }
  return $ch$$;
}, unique:!0, done:!0, unit:"StarViper", skill:7, points:31, upgrades:[ELITE, TORPEDO]}, {name:"Guri", faction:SCUM, pilotid:101, init:function() {
  this.wrap_after("begincombatphase", this, function($l$$) {
    0 < this.selectnearbyenemy(1).length && (this.log("+1 %FOCUS%, ennemy at range 1"), this.addfocustoken());
    return $l$$;
  });
}, done:!0, unique:!0, unit:"StarViper", skill:5, points:30, upgrades:[ELITE, TORPEDO]}, {name:"Black Sun Vigo", faction:SCUM, done:!0, pilotid:102, unit:"StarViper", skill:3, points:27, upgrades:[TORPEDO]}, {name:"Black Sun Enforcer", faction:SCUM, pilotid:103, done:!0, unit:"StarViper", skill:1, points:25, upgrades:[TORPEDO]}, {name:"Serissu", faction:SCUM, pilotid:104, done:!0, init:function() {
  var $self$$ = this;
  Unit.prototype.adddicemodifier(DEFENSE_M, REROLL_M, DEFENSE_M, this, {dice:["blank", "focus"], n:function() {
    return 1;
  }, req:function($attacker$$, $w$$, $defender$$) {
    return $defender$$ == this || $self$$.dead || this.dead || 1 != $defender$$.getrange(this) || !$defender$$.isally(this) ? !1 : ($defender$$.log("+%1 reroll(s) [%0]", this.name, 1), !0);
  }.bind(this)});
}, unit:"M3-A Interceptor", skill:8, points:20, unique:!0, upgrades:[ELITE]}, {name:"Laetin A'shera", faction:SCUM, pilotid:105, init:function() {
  this.addafterdefenseeffect(this, function($c$$, $h$$, $t$$) {
    0 == $c$$ + $h$$ && (this.log("0 %HIT%, +1 %EVADE%"), this.addevadetoken());
  });
}, done:!0, unit:"M3-A Interceptor", skill:6, points:18, unique:!0, upgrades:[]}, {name:"Tansarii Point Veteran", faction:SCUM, pilotid:106, done:!0, unit:"M3-A Interceptor", skill:5, points:17, upgrades:[ELITE]}, {name:"Cartel Spacer", faction:SCUM, pilotid:107, done:!0, unit:"M3-A Interceptor", skill:2, points:14, upgrades:[]}, {name:"IG-88A", faction:SCUM, pilotid:108, unique:!0, unit:"Aggressor", skill:6, points:36, init:function($from$$) {
  this.addafterattackeffect(this, function($c$$, $h$$) {
    ("undefined" == typeof $from$$ || !$from$$.dead) && targetunit.dead && this.shield < this.ship.shield && (this.addshield(1), this.showstats(), this.log("+1 %SHIELD% for a kill"));
  });
}, done:!0, upgrades:[ELITE, SYSTEM, CANNON, CANNON, BOMB, ILLICIT]}, {name:"IG-88B", faction:SCUM, pilotid:109, done:!0, init:function($from$$) {
  var $wn$$ = [];
  this.ig88battack = -1;
  for (var $i$$ = 0;$i$$ < this.weapons.length;$i$$++) {
    var $w$$ = this.weapons[$i$$];
    "Cannon" == $w$$.type && $w$$.isWeapon() && $wn$$.push($w$$);
  }
  if (0 != $wn$$.length) {
    for ($i$$ in this.weapons.indexOf($wn$$[0]), this.weapons) {
      this.addattack(function($c$$, $h$$) {
        return 0 == $c$$ + $h$$ && this.ig88battack < round && ("undefined" == typeof $from$$ || !$from$$.dead);
      }, {name:"IG-88B"}, $wn$$, function() {
        this.ig88battack = round;
      }, function() {
        return squadron;
      });
    }
  }
}, unique:!0, unit:"Aggressor", skill:6, points:36, upgrades:[ELITE, SYSTEM, CANNON, CANNON, BOMB, ILLICIT]}, {name:"IG-88C", faction:SCUM, pilotid:110, init:function($from$$) {
  this.wrap_before("resolveboost", this, function() {
    "undefined" != typeof $from$$ && $from$$.dead || (this.log("free %EVADE% action [%0]", "IG-88C"), this.doselection(function($n$$) {
      this.addevade($n$$);
    }.bind(this)));
  });
}, done:!0, unique:!0, unit:"Aggressor", skill:6, points:36, upgrades:[ELITE, SYSTEM, CANNON, CANNON, BOMB, ILLICIT]}, {name:"IG-88D", faction:SCUM, pilotid:111, init:function($from$$) {
  this.wrap_after("getmaneuverlist", this, function($dial$$) {
    "undefined" == typeof $dial$$.SL3 || "undefined" != typeof $from$$ && $from$$.dead || (this.log("%SLOOPLEFT% or %TURNLEFT% maneuver"), $dial$$.TL3 = {move:"TL3", halfturn:!0, difficulty:$dial$$.SL3.difficulty});
    "undefined" != typeof $dial$$.SR3 && (this.log("%SLOOPRIGHT% or %TURNRIGHT% maneuver"), $dial$$.TR3 = {move:"TR3", halfturn:!0, difficulty:$dial$$.SR3.difficulty});
    return $dial$$;
  });
}, unique:!0, done:!0, unit:"Aggressor", skill:6, points:36, upgrades:[ELITE, SYSTEM, CANNON, CANNON, BOMB, ILLICIT]}, {name:"N'Dru Suhlak", unique:!0, done:!0, pilotid:112, faction:SCUM, init:function() {
  var $g$$ = this.getattackstrength;
  this.getattackstrength = function($w$$, $sh$$) {
    var $a$$ = $g$$.call(this, $w$$, $sh$$);
    return 0 == this.selectnearbyally(2).length ? (this.log("+1 attack against %0, at range >=3 of friendly ships", $sh$$.name), $a$$ + 1) : $a$$;
  }.bind(this);
}, unit:"Z-95 Headhunter", skill:7, points:17, upgrades:[ELITE, MISSILE, ILLICIT]}, {name:"Kaa'To Leeachos", unique:!0, pilotid:113, faction:SCUM, done:!0, init:function() {
  this.wrap_after("begincombatphase", this, function($l$$) {
    var $p$jscomp$0$$ = this.selectnearbyally(2);
    this.selectunit($p$jscomp$0$$, function($p$$, $k$$) {
      0 < $p$$[$k$$].evade ? ($p$$[$k$$].removeevadetoken(), this.addevadetoken(), $p$$[$k$$].log("-1 %EVADE% [%0]", this.name), this.log("+1 %EVADE%")) : 0 < $p$$[$k$$].focus && ($p$$[$k$$].removefocustoken(), this.addfocustoken(), $p$$[$k$$].log("-1 %FOCUS% [%0]", this.name), this.log("+1 %FOCUS%"));
    }, ["select %FOCUS%/%EVADE% to take (or self to cancel)"], !0);
    return $l$$;
  });
}, unit:"Z-95 Headhunter", skill:5, points:15, upgrades:[ELITE, MISSILE, ILLICIT]}, {name:"Black Sun Soldier", faction:SCUM, pilotid:114, done:!0, unit:"Z-95 Headhunter", skill:3, points:13, upgrades:[MISSILE, ILLICIT]}, {name:"Binayre Pirate", faction:SCUM, pilotid:115, done:!0, unit:"Z-95 Headhunter", skill:1, points:12, upgrades:[MISSILE, ILLICIT]}, {name:"Boba Fett", faction:SCUM, pilotid:116, unit:"Firespray-31", skill:8, points:39, init:function() {
  var $m$$ = {dice:["blank", "focus"], n:function() {
    var $n$$ = 0, $i$$;
    for ($i$$ in squadron) {
      var $s$$ = squadron[$i$$];
      1 == this.getrange($s$$) && this.isenemy($s$$) && $n$$++;
    }
    return $n$$;
  }.bind(this), req:function($attacker$$, $w$$, $defender$$) {
    return !0;
  }};
  this.adddicemodifier(ATTACK_M, REROLL_M, ATTACK_M, this, $m$$);
  this.adddicemodifier(DEFENSE_M, REROLL_M, DEFENSE_M, this, $.extend({}, $m$$));
}, done:!0, unique:!0, upgrades:[ELITE, CANNON, BOMB, CREW, MISSILE, ILLICIT]}, {name:"Kath Scarlet", done:!0, pilotid:117, init:function() {
  this.wrap_after("getattackstrength", this, function($w$$, $sh$$, $a$$) {
    this.isinfiringarc($sh$$) && 4 == this.getprimarysector($sh$$) && (this.log("+1 attack die against %0 in auxiliary arc", $sh$$.name), $a$$ += 1);
    return $a$$;
  });
}, unique:!0, faction:SCUM, unit:"Firespray-31", skill:7, points:38, upgrades:[ELITE, CANNON, BOMB, CREW, MISSILE, ILLICIT]}, {name:"Emon Azzameen", done:!0, unique:!0, pilotid:118, getbomblocation:function() {
  return ["F1", "TL3", "TR3", "F3"];
}, faction:SCUM, unit:"Firespray-31", skill:6, points:36, upgrades:[CANNON, BOMB, CREW, MISSILE, ILLICIT]}, {name:"Mandalorian Mercenary", faction:SCUM, pilotid:119, done:!0, unit:"Firespray-31", skill:5, points:35, upgrades:[ELITE, CANNON, BOMB, CREW, MISSILE, ILLICIT]}, {name:"Kavil", unique:!0, done:!0, pilotid:120, init:function() {
  this.wrap_after("getattackstrength", this, function($w$$, $sh$$, $a$$) {
    return this.isinfiringarc($sh$$) ? $a$$ : (this.log("+1 attack die against %0 outside firing arc", $sh$$.name), $a$$ + 1);
  });
}, faction:SCUM, unit:"Y-Wing", skill:7, points:24, upgrades:[ELITE, TURRET, TORPEDO, TORPEDO, SALVAGED]}, {name:"Drea Renthal", unique:!0, pilotid:121, faction:SCUM, unit:"Y-Wing", skill:5, done:!0, init:function() {
  this.wrap_before("removetarget", this, function($t$$) {
    this.selectunit(this.gettargetableunits(3), function($p$$, $k$$) {
      -1 == this.targeting.indexOf($p$$[$k$$]) && (this.addtarget($p$$[$k$$]), this.addstress());
    }, ["select unit to target, +1 %STRESS% (or self to cancel)"], !0);
  });
}, points:22, upgrades:[TURRET, TORPEDO, TORPEDO, SALVAGED]}, {name:"Hired Gun", faction:SCUM, pilotid:122, done:!0, unit:"Y-Wing", skill:4, points:20, upgrades:[TURRET, TORPEDO, TORPEDO, SALVAGED]}, {name:"Syndicate Thug", faction:SCUM, pilotid:123, done:!0, unit:"Y-Wing", skill:2, points:18, upgrades:[TURRET, TORPEDO, TORPEDO, SALVAGED]}, {name:"Dace Bonearm", unique:!0, pilotid:124, faction:SCUM, unit:"HWK-290", done:!0, init:function() {
  var $unit$$ = this;
  Unit.prototype.wrap_after("addiontoken", this, function() {
    !$unit$$.dead && 3 >= this.getrange($unit$$) && $unit$$.isenemy(this) && 0 == $unit$$.stress && ($unit$$.addstress(), this.resolvehit(1), $unit$$.log("+1 %STRESS%"), this.log("+%1 %HIT% [%0]", $unit$$.name, 1), this.checkdead());
  });
}, skill:7, points:23, upgrades:[ELITE, TURRET, CREW, ILLICIT]}, {name:"Palob Godalhi", unique:!0, pilotid:125, faction:SCUM, unit:"HWK-290", init:function() {
  this.wrap_after("begincombatphase", this, function($l$$) {
    this.selectunit(this.selectnearbyenemy(2), function($p$$, $k$$) {
      0 < $p$$[$k$$].evade ? ($p$$[$k$$].removeevadetoken(), this.addevadetoken(), $p$$[$k$$].log("-1 %EVADE% [%0]", this.name), this.log("+1 %EVADE%")) : 0 < $p$$[$k$$].focus && ($p$$[$k$$].removefocustoken(), this.addfocustoken(), $p$$[$k$$].log("-1 %FOCUS% [%0]", this.name), this.log("+1 %FOCUS%"));
    }, ["select %FOCUS%/%EVADE% to take (or self to cancel)"], !0);
    return $l$$;
  });
}, done:!0, skill:5, points:20, upgrades:[ELITE, TURRET, CREW, ILLICIT]}, {name:"Torkil Mux", unique:!0, pilotid:126, done:!0, init:function() {
  this.wrap_after("endactivationphase", this, function() {
    this.selectunit(this.selectnearbyenemy(2), function($p$$, $k$$) {
      $p$$[$k$$].wrap_after("getskill", this, function($s$$) {
        return 0;
      }).unwrapper("endcombatphase");
    }, ["select unit for a 0 PS"], !1);
  });
}, faction:SCUM, unit:"HWK-290", skill:3, points:19, upgrades:[TURRET, CREW, ILLICIT]}, {name:"Spice Runner", faction:SCUM, pilotid:127, done:!0, unit:"HWK-290", skill:1, points:16, upgrades:[TURRET, CREW, ILLICIT]}, {name:"Commander Alozen", faction:EMPIRE, pilotid:128, unit:"TIE Advanced", unique:!0, done:!0, skill:5, points:25, init:function() {
  this.wrap_after("begincombatphase", this, function($l$$) {
    this.selectunit(this.gettargetableunits(1), function($p$$, $k$$) {
      this.addtarget($p$$[$k$$]);
      this.log("+%1 %TARGET% / %0", $p$$[$k$$].name, 1);
    }, ["select unit to lock (or self to cancel)"], !0);
    return $l$$;
  });
}, upgrades:[ELITE, MISSILE]}, {name:"Juno Eclipse", unique:!0, pilotid:129, done:!0, faction:EMPIRE, unit:"TIE Advanced", skill:8, points:28, getmaneuverlist:function() {
  var $m$$ = this.getmaneuver(), $p$$ = {};
  $p$$[$m$$.move] = $m$$;
  if (this.hasionizationeffect()) {
    return $p$$;
  }
  for (var $speed$$ = parseInt($m$$.move.substr(-1), 10), $i$$ = -1;1 >= $i$$;$i$$++) {
    var $r$$ = $m$$.move.replace(/\d/, $speed$$ + $i$$ + "");
    "undefined" != typeof P[$r$$] && ($p$$[$r$$] = {move:$r$$, difficulty:$m$$.difficulty, halfturn:$m$$.halfturn});
  }
  return $p$$;
}, upgrades:[ELITE, MISSILE]}, {name:"Zertik Strom", unique:!0, pilotid:130, done:!0, faction:EMPIRE, unit:"TIE Advanced", skill:6, init:function() {
  var $unit$$ = this;
  Weapon.prototype.wrap_after("getrangeattackbonus", this, function($sh$$, $g$$) {
    return this.unit.isenemy($unit$$) && 1 == $unit$$.getrange(this.unit) ? (this.unit.log("0 attack range bonus [%0]", $unit$$.name), 0) : $g$$;
  });
  Weapon.prototype.wrap_after("getrangedefensebonus", this, function($sh$$, $g$$) {
    return this.unit.isenemy($unit$$) && 1 == $unit$$.getrange(this.unit) ? (this.unit.log("0 defense range bonus [%0]", $unit$$.name), 0) : $g$$;
  });
}, points:26, upgrades:[ELITE, MISSILE]}, {name:"Lieutenant Colzet", unique:!0, pilotid:131, faction:EMPIRE, unit:"TIE Advanced", skill:3, points:23, upgrades:[MISSILE], done:!0, init:function() {
  this.wrap_after("endcombatphase", this, function() {
    this.selectunit(this.targeting, function($p$$, $k$$) {
      if (this.canusetarget($p$$[$k$$])) {
        var $c$$ = $p$$[$k$$].criticals;
        this.removetarget($p$$[$k$$]);
        0 < $c$$.length && $c$$[rand($c$$.length)].faceup();
      }
    }, ["select unit (or self to cancel)"], !0);
  });
}}, {name:"Bossk", faction:SCUM, pilotid:132, unit:"YV-666", unique:!0, skill:7, points:35, done:!0, init:function() {
  this.wrap_after("hashit", this, function($t$$, $b$$) {
    var $p$$ = this.criticalresolved + this.hitresolved;
    $b$$ && 0 < this.criticalresolved && ($p$$ <= $t$$.shield || 2 >= $t$$.hull && $p$$ > $t$$.shield ? (this.criticalresolved--, this.hitresolved += 2, this.log("1 %CRIT% -> 2 %HIT%")) : this.log("%0 %SHIELD% are down, more than 2 %HULL%: keeping critical", $t$$.name));
    return $b$$;
  });
}, upgrades:[ELITE, CANNON, MISSILE, CREW, CREW, CREW, ILLICIT]}, {name:"Moralo Eval", faction:SCUM, pilotid:133, unit:"YV-666", unique:!0, skill:6, points:34, done:!0, init:function() {
  for (var $i$$ = 0;$i$$ < this.weapons.length;$i$$++) {
    "Cannon" == this.weapons[$i$$].type && (this.log("can fire %0 in auxiliary firing arc", this.weapons[$i$$].name), this.weapons[$i$$].auxiliary = this.weapons[0].auxiliary, this.weapons[$i$$].subauxiliary = this.weapons[0].subauxiliary);
  }
}, upgrades:[CANNON, MISSILE, CREW, CREW, CREW, ILLICIT]}, {name:"Latts Razzi", faction:SCUM, pilotid:134, unit:"YV-666", unique:!0, skill:5, points:33, done:!0, init:function() {
  var $self$$ = this;
  Unit.prototype.wrap_after("declareattack", this, function($wp$$, $t$$, $b$$) {
    if (!$b$$) {
      return $b$$;
    }
    !$self$$.dead && $self$$.isally(this) && $self$$.canusetarget($t$$) && $self$$.donoaction([this.newaction(function($n$$) {
      this.removetarget($t$$);
      $t$$.wrap_after("getdefensestrength", $self$$, function($i$$, $sh$$, $d$$) {
        return 0 < $d$$ ? $d$$ - 1 : $d$$;
      }).unwrapper("afterdefenseeffect");
      this.endnoaction($n$$, "TARGET");
    }.bind($self$$), "TARGET")], $self$$.name + ": -1 agility for " + $t$$.name, !0);
    return $b$$;
  });
}, upgrades:[CANNON, MISSILE, CREW, CREW, CREW, ILLICIT]}, {name:"Trandoshan Slaver", faction:SCUM, pilotid:135, unit:"YV-666", done:!0, skill:2, points:29, upgrades:[CANNON, MISSILE, CREW, CREW, CREW, ILLICIT]}, {name:"Talonbane Cobra", unique:!0, faction:SCUM, pilotid:136, unit:"Kihraxz Fighter", skill:9, upgrades:[ELITE, MISSILE, ILLICIT], done:!0, init:function() {
  this.wrap_after("getattackstrength", this, function($i$$, $sh$$, $a$$) {
    return $a$$ + this.weapons[$i$$].getrangeattackbonus($sh$$);
  });
  this.wrap_after("getdefensestrength", this, function($i$$, $sh$$, $a$$) {
    return $a$$ + $sh$$.weapons[$i$$].getrangedefensebonus(this);
  });
}, points:28}, {name:"Graz the Hunter", unique:!0, pilotid:137, faction:SCUM, unit:"Kihraxz Fighter", skill:6, upgrades:[MISSILE, ILLICIT], init:function() {
  this.wrap_after("getdefensestrength", this, function($i$$, $sh$$, $a$$) {
    3 >= this.weapons[$i$$].getsector($sh$$) && ($a$$ += 1, this.log("+1 defense die for defending in firing arc"));
    return $a$$;
  });
}, done:!0, points:25}, {name:"Black Sun Ace", faction:SCUM, pilotid:138, unit:"Kihraxz Fighter", done:!0, skill:5, upgrades:[ELITE, MISSILE, ILLICIT], points:23}, {name:"Cartel Marauder", done:!0, pilotid:139, faction:SCUM, unit:"Kihraxz Fighter", skill:2, upgrades:[MISSILE, ILLICIT], points:20}, {name:"Miranda Doni", unique:!0, pilotid:140, done:!0, faction:REBEL, unit:"K-Wing", skill:8, upgrades:[TURRET, TORPEDO, TORPEDO, MISSILE, CREW, BOMB, BOMB], mirandaturn:-1, preattackroll:function($w$$, 
$t$$) {
  if (this.mirandaturn != round) {
    var $a1$$ = {org:this, name:this.name, type:"SHIELD", action:function($n$$) {
      this.mirandaturn = round;
      this.log("-1 attack die");
      this.wrap_after("getattackstrength", this, function($i$$, $sh$$, $a$$) {
        $i$$ = this.weapons[$i$$].getrangeattackbonus($sh$$);
        0 < $a$$ - $i$$ && --$a$$;
        return $a$$;
      }).unwrapper("attackroll");
      this.shield < this.ship.shield && (this.addshield(1), this.log("+1 %SHIELD%"));
      this.endnoaction($n$$, "SHIELD");
    }.bind(this)}, $a2$$ = {org:this, name:this.name, type:"HIT", action:function($n$$) {
      this.log("-1 %SHIELD%");
      this.log("+1 attack die");
      this.mirandaturn = round;
      this.wrap_after("getattackstrength", this, function($i$$, $sh$$, $a$$) {
        return 1 + $a$$;
      }).unwrapper("attackroll");
      this.removeshield(1);
      this.endnoaction($n$$, "HIT");
    }.bind(this)}, $list$$ = [];
    0 < this.shield && $list$$.push($a2$$);
    this.shield < this.ship.shield && $list$$.push($a1$$);
    this.donoaction($list$$, "select to add shield/roll 1 fewer die or remove shield/roll 1 additional die", !0);
  }
}, points:29}, {name:"Esege Tuketu", unique:!0, pilotid:141, faction:REBEL, unit:"K-Wing", skill:6, upgrades:[TURRET, TORPEDO, TORPEDO, MISSILE, CREW, BOMB, BOMB], points:28, done:!0, init:function() {
  var $self$$ = this;
  Unit.prototype.wrap_before("beginattack", this, function() {
    !$self$$.dead && this != $self$$ && this.isally($self$$) && (this.wrap_after("canusefocus", $self$$, function($b$$) {
      return $b$$ || $self$$.canusefocus() && 2 >= this.getrange($self$$);
    }).unwrapper("endattack"), this.wrap_before("removefocustoken", $self$$, function() {
      2 >= this.getrange($self$$) && (this.focus++, $self$$.log("-1 %FOCUS% [%0]", this.name), $self$$.removefocustoken());
    }).unwrapper("endattack"));
  });
}}, {name:"Guardian Squadron Pilot", faction:REBEL, pilotid:142, done:!0, unit:"K-Wing", skill:4, upgrades:[TURRET, TORPEDO, TORPEDO, MISSILE, CREW, BOMB, BOMB], points:25}, {name:"Warden Squadron Pilot", faction:REBEL, pilotid:143, done:!0, unit:"K-Wing", skill:2, upgrades:[TURRET, TORPEDO, TORPEDO, MISSILE, CREW, BOMB, BOMB], points:23}, {name:"'Redline'", unique:!0, pilotid:144, faction:EMPIRE, unit:"TIE Punisher", skill:7, done:!0, init:function() {
  this.wrap_after("addtarget", this, function($sh$$) {
    this.log("+%1 %TARGET% / %0", $sh$$.name, 2);
    this.targeting.push($sh$$);
    $sh$$.istargeted.push(this);
    this.movelog("T-" + $sh$$.id);
    $sh$$.show();
    this.show();
  });
}, boundtargets:function($i$jscomp$133_sh$$) {
  var $p$$ = this.targeting;
  if (-1 < this.targeting.indexOf($i$jscomp$133_sh$$)) {
    return !0;
  }
  for ($i$jscomp$133_sh$$ = $p$$.length - 2;0 <= $i$jscomp$133_sh$$;$i$jscomp$133_sh$$++) {
    this.removetarget($p$$[$i$jscomp$133_sh$$]);
  }
  return !1;
}, upgrades:[SYSTEM, TORPEDO, TORPEDO, MISSILE, MISSILE, BOMB, BOMB], points:27}, {name:"'Deathrain'", unique:!0, pilotid:145, faction:EMPIRE, unit:"TIE Punisher", skill:6, done:!0, init:function() {
  this.wrap_after("getbombposition", this, function($lm$$, $size$$, $p$$) {
    for (var $i$$ = 0;$i$$ < $lm$$.length;$i$$++) {
      $p$$.push(this.getpathmatrix(this.m.clone(), $lm$$[$i$$]).translate(0, -$size$$ + 20));
    }
    return $p$$;
  });
  this.wrap_after("bombdropped", this, function() {
    this.candoroll() && this.candoaction() && ($("#activationdial").hide(), this.doaction([this.newaction(this.resolveroll, "ROLL")], "free %ROLL% action"));
  });
}, upgrades:[SYSTEM, TORPEDO, TORPEDO, MISSILE, MISSILE, BOMB, BOMB], points:26}, {name:"Black Eight Squadron Pilot", faction:EMPIRE, pilotid:146, done:!0, unit:"TIE Punisher", skill:4, upgrades:[SYSTEM, TORPEDO, TORPEDO, MISSILE, MISSILE, BOMB, BOMB], points:23}, {name:"Cutlass Squadron Pilot", faction:EMPIRE, done:!0, pilotid:147, unit:"TIE Punisher", skill:2, upgrades:[SYSTEM, TORPEDO, TORPEDO, MISSILE, MISSILE, BOMB, BOMB], points:21}, {name:"Poe Dameron", faction:REBEL, pilotid:148, unit:"T-70 X-Wing", 
unique:!0, done:!0, ambiguous:!0, skill:8, upgrades:[ELITE, TORPEDO, ASTROMECH, TECH], init:poe_fct, points:31}, {name:"'Blue Ace'", faction:REBEL, done:!0, pilotid:149, unit:"T-70 X-Wing", skill:5, unique:!0, getboostmatrix:function($m$$) {
  return [this.getpathmatrix(this.m, "TR1"), this.getpathmatrix(this.m, "TL1")].concat(Unit.prototype.getboostmatrix.call(this, $m$$));
}, upgrades:[TORPEDO, ASTROMECH, TECH], points:27}, {name:"Ello Asty", faction:REBEL, done:!0, pilotid:150, beta:!0, unit:"T-70 X-Wing", skill:7, unique:!0, init:function() {
  var $save$$ = [];
  this.wrap_after("getdial", this, function($gd$$) {
    if (0 == $save$$.length) {
      for (var $i$$ = 0;$i$$ < $gd$$.length;$i$$++) {
        var $move$$ = $gd$$[$i$$].move, $d$$ = $gd$$[$i$$].difficulty;
        $move$$.match(/TR[RL]\d/) && ($d$$ = "WHITE");
        $save$$[$i$$] = {move:$move$$, difficulty:$d$$};
      }
    }
    return 0 == this.stress ? $save$$ : $gd$$;
  });
}, upgrades:[ELITE, TORPEDO, ASTROMECH, TECH], points:30}, {name:"'Red Ace'", faction:REBEL, done:!0, pilotid:151, beta:!0, unit:"T-70 X-Wing", skill:6, unique:!0, init:function() {
  this.sr = -1;
  this.wrap_after("removeshield", this, function($n$$) {
    this.sr < round && (this.log("+1 %SHIELD%"), this.sr = round, this.addevadetoken());
  });
}, upgrades:[TORPEDO, ASTROMECH, TECH], points:29}, {name:"Blue Squadron Novice", faction:REBEL, done:!0, unit:"T-70 X-Wing", skill:2, pilotid:152, upgrades:[TORPEDO, ASTROMECH, TECH], points:24}, {name:"Red Squadron Veteran", faction:REBEL, pilotid:153, done:!0, unit:"T-70 X-Wing", skill:4, upgrades:[ELITE, TORPEDO, ASTROMECH, TECH], points:26}, {name:"Omega Squadron Pilot", faction:EMPIRE, done:!0, pilotid:154, unit:"TIE/FO Fighter", skill:4, upgrades:[TECH, ELITE], points:17}, {name:"Zeta Squadron Pilot", 
faction:EMPIRE, done:!0, pilotid:155, unit:"TIE/FO Fighter", skill:3, upgrades:[TECH], points:16}, {name:"Epsilon Squadron Pilot", faction:EMPIRE, done:!0, pilotid:156, unit:"TIE/FO Fighter", skill:1, upgrades:[TECH], points:15}, {name:"'Zeta Ace'", faction:EMPIRE, done:!0, pilotid:157, unique:!0, unit:"TIE/FO Fighter", skill:5, getrollmatrix:function($m$$) {
  var $m0$$ = this.getpathmatrix(this.m.clone().rotate(90, 0, 0), "F2").translate(0, this.islarge ? 20 : 0).rotate(-90, 0, 0), $m1$$ = this.getpathmatrix(this.m.clone().rotate(-90, 0, 0), "F2").translate(0, this.islarge ? 20 : 0).rotate(90, 0, 0);
  return [$m0$$.clone().translate(0, -20), $m0$$, $m0$$.clone().translate(0, 20), $m1$$.clone().translate(0, -20), $m1$$, $m1$$.clone().translate(0, 20)].concat(Unit.prototype.getrollmatrix.call(this, $m$$));
}, upgrades:[ELITE, TECH], points:18}, {name:"'Epsilon Leader'", faction:EMPIRE, done:!0, pilotid:158, unique:!0, unit:"TIE/FO Fighter", skill:6, init:function() {
  this.wrap_after("begincombatphase", this, function($l$$) {
    var $p$$ = this.selectnearbyally(1);
    $p$$.push(this);
    for (var $i$$ = 0;$i$$ < $p$$.length;$i$$++) {
      $p$$[$i$$].removestresstoken();
    }
    return $l$$;
  });
}, upgrades:[TECH], points:19}, {name:"'Epsilon Ace'", faction:EMPIRE, done:!0, pilotid:159, unique:!0, unit:"TIE/FO Fighter", skill:4, init:function() {
  this.wrap_after("getskill", this, function($s$$) {
    return 0 == this.criticals.length ? 12 : $s$$;
  });
}, upgrades:[TECH], points:17}, {name:"'Omega Ace'", faction:EMPIRE, done:!0, pilotid:160, unique:!0, unit:"TIE/FO Fighter", skill:7, init:function() {
  this.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return this.canusefocus() && -1 < this.targeting.indexOf(targetunit);
  }.bind(this), f:function($m$$, $n$$) {
    this.removefocustoken();
    this.removetarget(targetunit);
    this.log("all results are %CRIT%");
    return $n$$ * FCH_CRIT;
  }.bind(this), str:"critical"});
}, upgrades:[ELITE, TECH], points:20}, {name:"'Omega Leader'", faction:EMPIRE, beta:!0, pilotid:161, unique:!0, unit:"TIE/FO Fighter", skill:8, upgrades:[ELITE, TECH], points:21, done:!0, init:function() {
  var $self$$ = this;
  this.wrap_after("isattackedby", this, function($w$$, $a$$) {
    -1 < $self$$.targeting.indexOf($a$$) && $a$$.wrap_after("getdicemodifiers", $self$$, function($mods$$) {
      for (var $p$$ = [], $i$$ = 0;$i$$ < $mods$$.length;$i$$++) {
        $mods$$[$i$$].from != ATTACK_M && $p$$.push($mods$$[$i$$]);
      }
      return $mods$$;
    }).unwrapper("endattack");
  });
  this.wrap_before("resolveattack", this, function($w$$, $t$$) {
    -1 < this.targeting.indexOf($t$$) && $t$$.wrap_after("getdicemodifiers", this, function($mods$$) {
      for (var $p$$ = [], $i$$ = 0;$i$$ < $mods$$.length;$i$$++) {
        $mods$$[$i$$].from != DEFENSE_M && $p$$.push($mods$$[$i$$]);
      }
      return $mods$$;
    }).unwrapper("endbeingattacked");
  });
  this.wrap_after("setpriority", this, function($a$$) {
    "TARGET" == $a$$.type && this.candotarget() && 0 == this.targeting.length && ($a$$.priority += 10);
  });
}}, {name:"Hera Syndulla", unique:!0, faction:REBEL, unit:"VCX-100", skill:7, pilotid:162, edition:"VCX-100", points:40, done:!0, getmaneuverlist:hera_fct, upgrades:[SYSTEM, TURRET, TORPEDO, TORPEDO, CREW, CREW], init:function() {
  for (var $i$$ = 0;$i$$ < this.weapons.length;$i$$++) {
    var $w$$ = this.weapons[$i$$];
    $w$$.type == TORPEDO && ($w$$.auxiliary = AUXILIARY, $w$$.subauxiliary = SUBAUXILIARY);
  }
}}, {name:"'Chopper'", unique:!0, pilotid:163, faction:REBEL, unit:"VCX-100", skill:4, points:37, done:!0, init:function() {
  this.wrap_after("begincombatphase", this, function($l$$) {
    for (var $i$$ = 0;$i$$ < this.touching.length;$i$$++) {
      this.touching[$i$$].isenemy(this.team) && (this.touching[$i$$].addstress(), this.touching[$i$$].log("+1 %STRESS% [%0]", this.name));
    }
    return $l$$;
  });
  for (var $i$jscomp$0$$ = 0;$i$jscomp$0$$ < this.weapons.length;$i$jscomp$0$$++) {
    var $w$$ = this.weapons[$i$jscomp$0$$];
    $w$$.type == TORPEDO && ($w$$.auxiliary = AUXILIARY, $w$$.subauxiliary = SUBAUXILIARY);
  }
}, upgrades:[SYSTEM, TURRET, TORPEDO, TORPEDO, CREW, CREW]}, {name:"Ezra Bridger", faction:REBEL, unique:!0, done:!0, pilotid:164, unit:"Attack Shuttle", skill:4, points:20, init:function() {
  this.adddicemodifier(DEFENSE_M, MOD_M, DEFENSE_M, this, {req:function($m$$, $n$$) {
    return 0 < this.stress;
  }.bind(this), f:function($m$$, $n$$) {
    var $f$$ = FE_focus($m$$);
    2 < $f$$ && ($f$$ = 2);
    return 0 < $f$$ ? (this.log("%0 %FOCUS% -> %0 %EVADE%", $f$$), $m$$ - $f$$ * FE_FOCUS + $f$$ * FE_EVADE) : $m$$;
  }.bind(this), str:"focus"});
}, upgrades:[ELITE, TURRET, CREW]}, {name:"Hera Syndulla", faction:REBEL, unique:!0, done:!0, pilotid:165, unit:"Attack Shuttle", skill:7, ambiguous:!0, edition:"Attack Shuttle", points:22, getmaneuverlist:hera_fct, upgrades:[ELITE, TURRET, CREW]}, {name:"Sabine Wren", faction:REBEL, unique:!0, done:!0, pilotid:166, unit:"Attack Shuttle", skill:5, points:21, ambiguous:!0, edition:"Attack Shuttle", init:function() {
  this.wrap_after("beginactivation", this, sabine_fct);
}, upgrades:[ELITE, TURRET, CREW]}, {name:"'Zeb' Orrelios", faction:REBEL, unique:!0, unit:"Attack Shuttle", skill:3, pilotid:167, points:18, done:!0, cancelhit:function($r$$, $t$$) {
  this.log("cancel %CRIT% first");
  $r$$ = this.cancelcritical($r$$, $t$$);
  return $r$$ = Unit.prototype.cancelhit($r$$, $t$$);
}, upgrades:[TURRET, CREW]}, {name:"Kanan Jarrus", faction:REBEL, unique:!0, pilotid:168, unit:"VCX-100", skill:5, points:38, upgrades:[SYSTEM, TURRET, TORPEDO, TORPEDO, CREW, CREW], done:!0, init:function() {
  for (var $self$$ = this, $i$$ = 0;$i$$ < this.weapons.length;$i$$++) {
    var $w$jscomp$0$$ = this.weapons[$i$$];
    $w$jscomp$0$$.type == TORPEDO && ($w$jscomp$0$$.auxiliary = AUXILIARY, $w$jscomp$0$$.subauxiliary = SUBAUXILIARY);
  }
  Unit.prototype.wrap_after("preattackroll", this, function($w$$, $t$jscomp$0$$) {
    var $p$$ = this.selectnearbyenemy(2);
    $self$$.canusefocus() && -1 < $p$$.indexOf($self$$) && !$self$$.dead && $self$$.donoaction([{org:$self$$, name:$self$$.name, type:"FOCUS", action:function($n$$) {
      this.wrap_after("getattackstrength", $self$$, function($i$jscomp$143_ra$$, $t$$, $a$$) {
        NOLOG = !0;
        $i$jscomp$143_ra$$ = this.weapons[$i$jscomp$143_ra$$].getrangeattackbonus($t$$);
        $a$$ -= $i$jscomp$143_ra$$;
        NOLOG = !1;
        0 < $a$$ && --$a$$;
        return $a$$ + $i$jscomp$143_ra$$;
      }).unwrapper("attackroll");
      $self$$.removefocustoken();
      this.log("-1 attack against %0", $self$$.name);
      this.select();
      $self$$.endnoaction($n$$, "FOCUS");
    }.bind(this)}], "", !0);
  });
}}, {name:"'Wampa'", faction:EMPIRE, unique:!0, pilotid:169, unit:"TIE Fighter", skill:4, points:14, done:!0, init:function() {
  this.adddicemodifier(ATTACKCOMPARE_M, ADD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return 0 < $n$$;
  }, f:function($m$$, $n$$) {
    this.log("cancel all dice");
    0 < FCH_crit($m$$) && (targetunit.log("+1 damage card [%0]", this.name), targetunit.applydamage(1));
    return {m:0, n:0};
  }.bind(this), str:"critical"});
}, upgrades:[]}, {name:"'Youngster'", faction:EMPIRE, unique:!0, pilotid:170, unit:"TIE Fighter", skill:6, points:15, done:!0, init:function() {
  var $elite$$ = null, $self$$ = this;
  for (i = 0;i < this.upgrades.length;i++) {
    this.upgrades[i].type == ELITE && "function" == typeof this.upgrades[i].action && ($elite$$ = $.extend({}, this.upgrades[i]), $elite$$.clone = !0, $elite$$.isactive = !0);
  }
  null != $elite$$ && (this.log("share %0 upgrade", $elite$$.name), Unit.prototype.wrap_after("getupgactionlist", $self$$, function($l$$) {
    var $p$$ = this.selectnearbyally(3);
    !$self$$.dead && this.ship.name.match(/.*TIE.*Fighter.*/) && -1 < $p$$.indexOf($self$$) && $elite$$.candoaction() && $elite$$.isactive && (this.log("elite action from %0 available", $self$$.name), $elite$$.unit = this, $l$$.push({org:$elite$$, action:$elite$$.action, type:$elite$$.type.toUpperCase(), name:$elite$$.name}));
    return $l$$;
  }));
}, upgrades:[ELITE]}, {name:"'Chaser'", faction:EMPIRE, unique:!0, pilotid:171, done:!0, unit:"TIE Fighter", skill:3, points:14, init:function() {
  var $self$$ = this;
  Unit.prototype.wrap_after("removefocustoken", this, function() {
    !$self$$.dead && this.isally($self$$) && this != $self$$ && 1 >= this.getrange($self$$) && ($self$$.log("+1 %FOCUS%"), $self$$.addfocustoken());
  });
}, upgrades:[]}, {name:"Gamma Squadron Veteran", faction:EMPIRE, pilotid:172, done:!0, unit:"TIE Bomber", skill:5, points:19, upgrades:[ELITE, TORPEDO, TORPEDO, MISSILE, MISSILE, BOMB]}, {name:"The Inquisitor", faction:EMPIRE, pilotid:173, unit:"TIE Adv. Prototype", skill:8, unique:!0, done:!0, points:25, init:function() {
  this.weapons[0].wrap_after("getrangedefensebonus", this, function($sh$$, $b$$) {
    1 == $b$$ && this.unit.log("defense range nullified");
    return 0;
  });
  this.wrap_after("getattackstrength", this, function($i$$, $sh$$, $a$$) {
    return 0 == $i$$ && 1 < this.weapons[0].getrange($sh$$) ? (this.log("+1 attack die with primary weapon [%0]", this.name), $a$$ + 1) : $a$$;
  });
}, upgrades:[ELITE, MISSILE]}, {name:"Valen Rudor", faction:EMPIRE, unique:!0, pilotid:174, unit:"TIE Adv. Prototype", skill:6, points:22, done:!0, init:function() {
  this.addafterdefenseeffect(this, function($c$$, $h$$, $t$$) {
    this.candoaction() && (this.log("+1 free action [%0]", this.name), this.doaction(this.getactionlist(), ""));
  });
}, upgrades:[ELITE, MISSILE]}, {name:"Sienar Test Pilot", faction:EMPIRE, pilotid:175, done:!0, unit:"TIE Adv. Prototype", skill:2, points:16, upgrades:[MISSILE]}, {name:"Zuckuss", faction:SCUM, pilotid:176, unique:!0, unit:"G-1A Starfighter", skill:7, points:28, done:!0, upgrades:[ELITE, CREW, SYSTEM, ILLICIT], preattackroll:function($w$$, $t$$) {
  var $a1$$ = {org:this, name:this.name, type:"HIT", action:function($n$$) {
    this.log("+1 attack die");
    this.wrap_after("getattackstrength", this, function($i$$, $sh$$, $a$$) {
      return 1 + $a$$;
    }).unwrapper("attackroll");
    targetunit.wrap_after("getdefensestrength", this, function($i$$, $sh$$, $d$$) {
      return 1 + $d$$;
    }).unwrapper("defenseroll");
    this.endnoaction($n$$, "HIT");
  }.bind(this)};
  this.donoaction([$a1$$], "select to add +1 attack roll", !0);
}}, {name:"4-LOM", faction:SCUM, pilotid:177, unique:!0, done:!0, unit:"G-1A Starfighter", skill:6, points:27, init:function() {
  this.wrap_before("endphase", this, function() {
    var $p$jscomp$0$$ = this.selectnearbyunits(1, function() {
      return !0;
    });
    0 < this.stress && this.selectunit($p$jscomp$0$$, function($p$$, $k$$) {
      $p$$[$k$$].addstress();
      this.removestresstoken();
      $p$$[$k$$].log("+1 %STRESS% [%0]", this.name);
      this.log("-1 %STRESS%");
    }, ["select unit (or self to cancel)"], !0);
  });
}, upgrades:[ELITE, CREW, SYSTEM, ILLICIT]}, {name:"Nashtah Pup Pilot", faction:SCUM, done:!0, pilotid:178, unique:!0, unit:"Z-95 Headhunter", skill:2, points:0, upgrades:[]}, {name:"Dengar", faction:SCUM, unique:!0, pilotid:179, unit:"JumpMaster 5000", skill:9, points:33, done:!0, init:function() {
  this.dengarattack = -1;
  this.addattack(function($c$$, $h$$, $t$$) {
    this.retaliationtarget = $t$$;
    return this.dengarattack < round && $t$$ != this && this.isinprimaryfiringarc($t$$);
  }, this, this.weapons, function() {
    this.dengarattack = round;
  }, function() {
    return [this.retaliationtarget];
  }, "endbeingattacked");
}, upgrades:[ELITE, TORPEDO, TORPEDO, CREW, SALVAGED, ILLICIT]}, {name:"Tel Trevura", faction:SCUM, unique:!0, pilotid:180, unit:"JumpMaster 5000", skill:7, points:30, done:!0, init:function() {
  this.resurrected = !1;
  this.wrap_before("checkdead", this, function() {
    0 >= this.hull && !this.dead && !this.resurrected && (this.addhull(this.ship.hull - this.hull), this.criticals = [], SOUNDS.explode.play(), this.resurrected = !0, this.log("resists!"), this.applydamage(4), this.showoverflow());
  });
}, upgrades:[ELITE, TORPEDO, TORPEDO, CREW, SALVAGED, ILLICIT]}, {name:"Manaroo", faction:SCUM, pilotid:181, unit:"JumpMaster 5000", skill:4, unique:!0, points:27, done:!0, init:function() {
  this.wrap_before("begincombatphase", this, function() {
    this.selectunit(this.selectnearbyally(1), function($p$$, $k$$) {
      for (var $f$jscomp$29_t$$ = this.focus, $e$jscomp$21_u$$ = this.evade, $i$$ = 0;$i$$ < $f$jscomp$29_t$$;$i$$++) {
        this.removefocustoken(), $p$$[$k$$].addfocustoken();
      }
      for ($i$$ = 0;$i$$ < $e$jscomp$21_u$$;$i$$++) {
        this.removeevadetoken(), $p$$[$k$$].addevadetoken();
      }
      $f$jscomp$29_t$$ = this.targeting;
      for ($i$$ = $f$jscomp$29_t$$.length - 1;0 <= $i$$;$i$$--) {
        $e$jscomp$21_u$$ = $f$jscomp$29_t$$[$i$$], this.removetarget($e$jscomp$21_u$$), $p$$[$k$$].addtarget($e$jscomp$21_u$$);
      }
      $f$jscomp$29_t$$ = this.istargeted;
      for ($i$$ = $f$jscomp$29_t$$.length - 1;0 <= $i$$;$i$$--) {
        $e$jscomp$21_u$$ = $f$jscomp$29_t$$[$i$$], $e$jscomp$21_u$$.removetarget(this), $e$jscomp$21_u$$.addtarget($p$$[$k$$]);
      }
    }, ["select unit (or self to cancel) [%0]", this.name], !0);
  });
}, upgrades:[ELITE, TORPEDO, TORPEDO, CREW, SALVAGED, ILLICIT]}, {name:"Tomax Bren", faction:EMPIRE, pilotid:182, unit:"TIE Bomber", skill:8, unique:!0, done:!0, points:24, upgrades:[ELITE, TORPEDO, TORPEDO, MISSILE, MISSILE, BOMB], init:function() {
  var $self$$ = this;
  $self$$.flip = -1;
  for (var $i$$ = 0;$i$$ < this.upgrades.length;$i$$++) {
    var $upg$jscomp$0$$ = this.upgrades[$i$$];
    $upg$jscomp$0$$.type == ELITE && function($upg$$) {
      $upg$$.wrap_after("desactivate", this, function() {
        $self$$.flip < round && $self$$.donoaction([{org:$self$$, name:$self$$.name, type:"ELITE", action:function($n$$) {
          $upg$$.isactive = !0;
          $self$$.log("name reactivated:" + $upg$$.name);
          $self$$.flip = round;
          $self$$.endnoaction($n$$, "ELITE");
        }}], "Choose to reactivate an elite upgrade (or not)", !0);
      });
    }($upg$jscomp$0$$);
  }
}}, {name:"Lothal Rebel", faction:REBEL, done:!0, unit:"VCX-100", skill:3, pilotid:183, points:35, upgrades:[SYSTEM, TURRET, TORPEDO, TORPEDO, CREW, CREW], init:function() {
  for (var $i$$ = 0;$i$$ < this.weapons.length;$i$$++) {
    var $w$$ = this.weapons[$i$$];
    $w$$.type == TORPEDO && ($w$$.auxiliary = AUXILIARY, $w$$.subauxiliary = SUBAUXILIARY);
  }
}}, {name:"Baron of the Empire", faction:EMPIRE, pilotid:184, done:!0, unit:"TIE Adv. Prototype", skill:4, points:19, upgrades:[ELITE, MISSILE]}, {name:"Gand Findsman", faction:SCUM, pilotid:185, done:!0, unit:"G-1A Starfighter", skill:5, points:25, upgrades:[ELITE, CREW, SYSTEM, ILLICIT]}, {name:"Ruthless Freelancer", faction:SCUM, pilotid:186, done:!0, unit:"G-1A Starfighter", skill:3, points:23, upgrades:[CREW, SYSTEM, ILLICIT]}, {name:"'Zeta Leader'", faction:EMPIRE, pilotid:187, done:!0, unique:!0, 
unit:"TIE/FO Fighter", skill:7, points:20, upgrades:[ELITE, TECH], preattackroll:function($w$$, $t$$) {
  var $a1$$ = {org:this, name:this.name, type:"STRESS", action:function($n$$) {
    this.log("+1 attack die");
    this.wrap_after("getattackstrength", this, function($i$$, $sh$$, $a$$) {
      return 1 + $a$$;
    }).unwrapper("attackroll");
    this.addstress();
    this.endnoaction($n$$, "STRESS");
  }.bind(this)};
  0 == this.stress && this.donoaction([$a1$$], "select to add +1 attack roll", !0);
}}, {name:"Countess Ryad", faction:EMPIRE, pilotid:188, done:!0, unique:!0, unit:"TIE Defender", skill:5, points:34, shipimg:"tie-defender-red.png", upgrades:[ELITE, CANNON, MISSILE], init:function() {
  this.wrap_after("getmaneuverlist", this, function($p$$) {
    if (this.hasionizationeffect()) {
      return $p$$;
    }
    for (var $i$$ = 1;5 >= $i$$;$i$$++) {
      "undefined" != typeof $p$$["F" + $i$$] && ($p$$["K" + $i$$] = {move:"K" + $i$$, difficulty:$p$$["F" + $i$$].difficulty});
    }
    return $p$$;
  });
}}, {name:"'Deathfire'", faction:EMPIRE, pilotid:189, done:!0, unique:!0, unit:"TIE Bomber", skill:3, points:17, upgrades:[TORPEDO, TORPEDO, MISSILE, MISSILE, BOMB], init:function() {
  var $i$$;
  for ($i$$ = 0;$i$$ < this.upgrades.length;$i$$++) {
    var $upg$$ = this.upgrades[$i$$];
    "function" == typeof $upg$$.action && $upg$$.type == BOMB && $upg$$.wrap_after("canbedropped", this, Bomb.prototype.canbedropped);
  }
}}, {name:"Rey", faction:REBEL, pilotid:190, done:!0, unique:!0, unit:"YT-1300", skill:8, points:45, upgrades:[ELITE, MISSILE, CREW, CREW], init:function() {
  this.adddicemodifier(ATTACK_M, REROLL_M, ATTACK_M, this, {dice:["blank"], n:function() {
    return 2;
  }, req:function($attacker$$, $w$$, $defender$$) {
    return $attacker$$.isinfiringarc($defender$$);
  }});
  this.adddicemodifier(DEFENSE_M, REROLL_M, DEFENSE_M, this, {dice:["blank"], n:function() {
    return 2;
  }, req:function($attacker$$, $w$$, $defender$$) {
    return $defender$$.isinfiringarc($attacker$$);
  }});
}}, {name:"Poe Dameron", faction:REBEL, pilotid:191, unit:"T-70 X-Wing", unique:!0, done:!0, ambiguous:!0, edition:"HoR", init:poe_fct, skill:9, upgrades:[ELITE, TORPEDO, ASTROMECH, TECH], points:33}, {name:"'Quickdraw'", faction:EMPIRE, pilotid:192, unit:"TIE/SF Fighter", unique:!0, done:!0, skill:9, upgrades:[ELITE, SYSTEM, MISSILE, TECH], points:29, init:function() {
  this.qdattack = -1;
  this.addattack(function($c$$, $h$$) {
    return this.qdattack < round;
  }, this, [this.weapons[0]], function() {
    this.qdattack = round;
  }, function() {
    return squadron;
  }, "removeshield");
}}, {name:"'Backdraft'", faction:EMPIRE, pilotid:193, unit:"TIE/SF Fighter", unique:!0, done:!0, skill:7, upgrades:[ELITE, SYSTEM, MISSILE, TECH], points:27, init:function() {
  this.adddicemodifier(ATTACK_M, ADD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return !targetunit.dead && 0 == this.activeweapon && 3 >= this.weapons[0].getauxiliarysector(targetunit);
  }.bind(this), f:function($m$$, $n$$) {
    this.log("%0 in auxiliary arc -> +1 %CRIT%", targetunit.name);
    return {m:$m$$ + FCH_CRIT, n:$n$$ + 1};
  }.bind(this), str:"critical"});
}}, {name:"Zeta Specialist", faction:EMPIRE, pilotid:194, done:!0, unit:"TIE/SF Fighter", skill:3, upgrades:[SYSTEM, MISSILE, TECH], points:23}, {name:"Ketsu Onyo", faction:SCUM, pilotid:195, unit:"Lancer-class Pursuit Craft", unique:!0, skill:7, done:!0, upgrades:[ELITE, CREW, ILLICIT, ILLICIT], points:38, init:function() {
  var $self$$ = this;
  this.wrap_before("begincombatphase", this, function() {
    this.selectunit(this.selectnearbyenemy(1, function($s$$, $t$$) {
      var $w$$ = $self$$.weapons[0];
      return 3 >= $w$$.getprimarysector($t$$) && 3 >= $w$$.getauxiliarysector($t$$);
    }), function($p$$, $k$$) {
      $p$$[$k$$].log("+1 tractor beam token [%0]", $self$$.name);
      $p$$[$k$$].addtractorbeam($self$$);
    }, ["select unit for tractor beam token [%0]", $self$$.name], !1);
  });
}}, {name:"Asajj Ventress", faction:SCUM, pilotid:196, unit:"Lancer-class Pursuit Craft", unique:!0, done:!0, skill:6, upgrades:[ELITE, CREW, ILLICIT, ILLICIT], points:37, init:function() {
  var $self$$ = this;
  this.wrap_before("begincombatphase", this, function() {
    this.selectunit(this.selectnearbyenemy(2, function($s$$, $t$$) {
      return 3 >= $self$$.weapons[0].getauxiliarysector($t$$);
    }), function($p$$, $k$$) {
      $p$$[$k$$].log("+1 stress [%0]", $self$$.name);
      $p$$[$k$$].addstress($self$$);
    }, ["select unit [%0]", $self$$.name], !1);
  });
}}, {name:"Sabine Wren", faction:SCUM, pilotid:197, unit:"Lancer-class Pursuit Craft", unique:!0, done:!0, skill:5, upgrades:[CREW, ILLICIT, ILLICIT], points:35, init:function() {
  this.adddicemodifier(DEFENSE_M, ADD_M, DEFENSE_M, this, {req:function($m$$, $n$$) {
    return 2 >= this.weapons[0].getauxiliarysector(activeunit);
  }.bind(this), f:function($m$$, $n$$) {
    this.log("Attacker inside Range 1-2 of mobile arc -> +1 %FOCUS%");
    return {m:$m$$ + FE_FOCUS, n:$n$$ + 1};
  }.bind(this), str:"focus"});
}}, {name:"Shadowport Hunter", faction:SCUM, pilotid:198, done:!0, unit:"Lancer-class Pursuit Craft", skill:2, upgrades:[CREW, ILLICIT, ILLICIT], points:33}, {name:"Zealous Recruit", faction:SCUM, pilotid:199, done:!0, unit:"Protectorate Starfighter", skill:1, upgrades:[TORPEDO], points:20}, {name:"Concord Dawn Veteran", faction:SCUM, pilotid:200, done:!0, unit:"Protectorate Starfighter", skill:3, upgrades:[ELITE, TORPEDO], points:22}, {name:"Concord Dawn Ace", faction:SCUM, pilotid:201, done:!0, 
unit:"Protectorate Starfighter", skill:5, upgrades:[ELITE, TORPEDO], points:23}, {name:"Kad Solus", faction:SCUM, pilotid:202, unique:!0, done:!0, unit:"Protectorate Starfighter", skill:6, upgrades:[ELITE, TORPEDO], points:25, init:function() {
  this.wrap_after("handledifficulty", this, function($difficulty$$) {
    "RED" == $difficulty$$ && (this.addfocustoken(), this.addfocustoken(), this.log("red maneuver -> +2 %FOCUS% [%0]", this.name));
  });
}}, {name:"Old Teroch", faction:SCUM, pilotid:203, unique:!0, done:!0, unit:"Protectorate Starfighter", skill:7, upgrades:[ELITE, TORPEDO], points:26, init:function() {
  var $self$$ = this;
  this.wrap_before("begincombatphase", this, function() {
    this.selectunit(this.selectnearbyenemy(1, function($s$$, $t$$) {
      return !0;
    }), function($p$$, $k$$) {
      var $i$$, $f$$ = $p$$[$k$$].focus, $e$$ = $p$$[$k$$].evade;
      if (0 < $f$$) {
        for ($p$$[$k$$].log("-%0 %FOCUS% [%1]", $f$$, $self$$.name), $i$$ = 0;$i$$ < $f$$;$i$$++) {
          $p$$[$k$$].removefocustoken();
        }
      }
      if (0 < $e$$) {
        for ($p$$[$k$$].log("-%0 %EVADE% [%1]", $f$$, $self$$.name), $i$$ = 0;$i$$ < $e$$;$i$$++) {
          $p$$[$k$$].removeevadetoken();
        }
      }
    }, ["select unit [%0]", $self$$.name], !1);
  });
}}, {name:"Fenn Rau", faction:SCUM, pilotid:204, unique:!0, done:!0, unit:"Protectorate Starfighter", skill:9, upgrades:[ELITE, TORPEDO], points:28, init:function() {
  this.wrap_after("getattackstrength", this, function($w$$, $sh$$, $a$$) {
    return 1 == this.getrange($sh$$) ? (this.log("+1 attack die"), $a$$ + 1) : $a$$;
  });
  this.wrap_after("getdefensestrength", this, function($w$$, $sh$$, $a$$) {
    return 1 == this.getrange($sh$$) ? (this.log("+1 defense die"), $a$$ + 1) : $a$$;
  });
}}, {name:"Norra Wexley", faction:REBEL, pilotid:205, unique:!0, unit:"ARC-170", skill:7, done:!0, upgrades:[ELITE, TORPEDO, CREW, ASTROMECH], points:29, init:function() {
  this.adddicemodifier(ATTACK_M, ADD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return this.canusetarget(targetunit);
  }.bind(this), f:function($m$$, $n$$) {
    this.removetarget(targetunit);
    this.log("1 %TARGET% -> 1 %FOCUS%");
    return {m:$m$$ + FCH_FOCUS, n:$n$$ + 1};
  }.bind(this), str:"target"});
  this.adddicemodifier(DEFENSE_M, ADD_M, DEFENSE_M, this, {req:function($m$$, $n$$) {
    return this.canusetarget(activeunit);
  }.bind(this), f:function($m$$, $n$$) {
    this.removetarget(activeunit);
    this.log("1 %TARGET% -> 1 %FOCUS%");
    return {m:$m$$ + FE_FOCUS, n:$n$$ + 1};
  }.bind(this), str:"target"});
}}, {name:"Shara Bey", faction:REBEL, pilotid:206, unique:!0, done:!0, unit:"ARC-170", skill:6, upgrades:[ELITE, TORPEDO, CREW, ASTROMECH], points:28, init:function() {
  var $self$$ = this;
  Unit.prototype.wrap_after("canusetarget", $self$$, function($sh$$, $r$$) {
    return $self$$ != this && $self$$.isally(this) && 2 >= $self$$.getrange(this) ? $r$$ || $self$$.canusetarget($sh$$) : $r$$;
  });
  Unit.prototype.wrap_before("removetarget", $self$$, function($t$$) {
    $self$$ != this && $self$$.isally(this) && 2 >= $self$$.getrange(this) && -1 == this.targeting.indexOf($t$$) && -1 < $self$$.targeting.indexOf($t$$) && $self$$.removetarget($t$$);
  });
}}, {name:"Thane Kyrell", faction:REBEL, pilotid:207, unique:!0, done:!0, unit:"ARC-170", skill:4, upgrades:[TORPEDO, CREW, ASTROMECH], points:26, init:function() {
  var $self$$ = this;
  Unit.prototype.wrap_after("afterattackeffect", this, function($c$$, $h$$) {
    $self$$ != this && this.isally($self$$) && 3 >= $self$$.getrange(this) && $self$$.candoaction() && ($self$$.log("+1 free action [%0]", $self$$.name), $self$$.doaction($self$$.getactionlist(), ""));
  });
}}, {name:"Braylen Stramm", faction:REBEL, pilotid:208, unique:!0, done:!0, unit:"ARC-170", skill:3, upgrades:[TORPEDO, CREW, ASTROMECH], points:25, init:function() {
  this.wrap_before("endmaneuver", this, function() {
    if (0 < this.stress) {
      var $roll$$ = this.rollattackdie(1, this, "hit")[0];
      if ("hit" == $roll$$ || "critical" == $roll$$) {
        this.log("-1 stress [%0]", this.name), this.removestresstoken();
      }
    }
  });
}}, {name:"Omega Specialist", faction:EMPIRE, pilotid:209, done:!0, unit:"TIE/SF Fighter", skill:5, upgrades:[ELITE, SYSTEM, MISSILE, TECH], points:25}, {name:"Sabine Wren", faction:REBEL, pilotid:210, done:!0, unique:!0, unit:"TIE Fighter", skill:5, ambiguous:!0, edition:"TIE Fighter", upgrades:[ELITE], points:15, init:function() {
  this.wrap_after("beginactivation", this, sabine_fct);
}}, {name:"Chewbacca", unit:"YT-1300", skill:5, unique:!0, edition:"HoR", ambiguous:!0, done:!0, pilotid:211, faction:REBEL, upgrades:[ELITE, MISSILE, CREW, CREW], points:42, init:function() {
  var $self$$ = this;
  this.addattack(function($c$$, $h$$, $t$$) {
    return 0 >= $c$$ + $h$$ && 3 >= $self$$.getrange($t$$);
  }, this, this.weapons, function() {
  }, function() {
    return squadron;
  }, "warndeath");
}}, {name:"Han Solo", unit:"YT-1300", skill:9, done:!0, unique:!0, edition:"HoR", ambiguous:!0, pilotid:212, faction:REBEL, upgrades:[ELITE, MISSILE, CREW, CREW], points:46}, {name:"Nien Nunb", unit:"T-70 X-Wing", unique:!0, done:!0, pilotid:213, faction:REBEL, upgrades:[ELITE, TORPEDO, ASTROMECH, TECH], init:function() {
  this.wrap_after("addstress", this, function() {
    0 < this.selectnearbyenemy(1, function($s$$, $t$$) {
      return $s$$.isinprimaryfiringarc($t$$);
    }).length && this.removestresstoken();
  });
}, points:29, skill:7}, {name:"'Snap' Wexley", unit:"T-70 X-Wing", unique:!0, done:!0, pilotid:214, faction:REBEL, upgrades:[ELITE, TORPEDO, ASTROMECH, TECH], points:28, skill:6, init:function() {
  this.wrap_before("endmaneuver", this, function() {
    this.getdial()[this.maneuver].move.match(/\w+[234]/) && !this.collision && this.candoboost() && this.doaction([this.newaction(this.resolveboost, "BOOST")], "free %BOOST%");
  });
}}, {name:"Jess Pava", unit:"T-70 X-Wing", unique:!0, done:!0, pilotid:215, faction:REBEL, upgrades:[TORPEDO, ASTROMECH, TECH], points:25, skill:3, init:function() {
  var $self$$ = this, $f$$ = function $$f$$$() {
    return $self$$.selectnearbyally(1, function($s$$, $t$$) {
      return $s$$ != $t$$;
    }).length;
  };
  this.adddicemodifier(ATTACK_M, REROLL_M, ATTACK_M, this, {dice:["blank", "focus"], n:$f$$, req:function($attack$$, $w$$, $defender$$) {
    return !0;
  }});
  this.adddicemodifier(DEFENSE_M, REROLL_M, DEFENSE_M, this, {dice:["blank", "focus"], n:$f$$, req:function($attack$$, $w$$, $defender$$) {
    return !0;
  }});
}}, {name:"Resistance Sympathizer", unit:"YT-1300", skill:3, done:!0, unique:!1, edition:"HoR", pilotid:216, faction:REBEL, upgrades:[MISSILE, CREW, CREW], points:38}, {name:"Black Squadron Scout", done:!0, pilotid:217, unit:"TIE Striker", faction:EMPIRE, skill:4, points:20, upgrades:[ELITE]}, {name:"Scarif Defender", done:!0, pilotid:218, unit:"TIE Striker", faction:EMPIRE, skill:3, points:18, upgrades:[]}, {name:"Imperial Trainee", done:!0, pilotid:219, unit:"TIE Striker", faction:EMPIRE, skill:1, 
points:17, upgrades:[]}, {name:"Blue Squadron Pathfinder", unit:"U-wing", skill:2, done:!0, unique:!1, pilotid:220, faction:REBEL, upgrades:[SYSTEM, TORPEDO, CREW, CREW], points:23}, {name:"Starkiller Base Pilot", done:!0, pilotid:221, unit:"Upsilon-Class Shuttle", faction:EMPIRE, skill:2, points:30, upgrades:[SYSTEM, CREW, CREW, TECH, TECH]}, {name:"Ahsoka Tano", faction:REBEL, pilotid:222, unique:!0, unit:"TIE Fighter", skill:7, upgrades:[ELITE], points:17, wave:["10"], done:!0, init:function() {
  var $self$$ = this;
  this.wrap_before("begincombatphase", this, function() {
    if (this.canusefocus()) {
      var $p$jscomp$0$$ = this.selectnearbyally(1);
      $p$jscomp$0$$.push(this);
      this.selectunit($p$jscomp$0$$, function($p$$, $k$$) {
        $p$$[$k$$] != $self$$ && ($self$$.removefocustoken(), $p$$[$k$$].log("+1 free action [%0]", $self$$.name), $p$$[$k$$].doaction($p$$[$k$$].getactionlist(), ""));
      }, ["select unit, self to cancel [%0]", $self$$.name], !1);
    }
  });
}}, {name:"Captain Rex", faction:REBEL, pilotid:223, unique:!0, done:!0, unit:"TIE Fighter", skill:4, upgrades:[], points:14}, {name:"Heff Tobber", faction:REBEL, pilotid:224, unique:!0, unit:"U-wing", skill:3, upgrades:[SYSTEM, TORPEDO, CREW, CREW], points:24, done:!0, init:function() {
  this.wrap_after("collidedby", this, function($u$$) {
    this.doaction(this.getactionlist(), "");
  });
}}, {name:"Bodhi Rook", faction:REBEL, unique:!0, pilotid:225, unit:"U-wing", skill:4, done:!0, upgrades:[SYSTEM, TORPEDO, CREW, CREW], points:25, init:function() {
  var $self$$ = this;
  Unit.prototype.wrap_after("gettargetableunits", this, function($r$$, $t$$) {
    if ($self$$.isally(this)) {
      var $p$$ = [], $i$$;
      for ($i$$ in squadron) {
        var $u$$ = squadron[$i$$];
        $u$$.isally($self$$) && ($p$$ = $p$$.concat(Unit.prototype.gettargetableunits.vanilla.call($u$$, 3)));
      }
      return $p$$;
    }
    return $t$$;
  });
}}, {name:"'Duchess'", faction:EMPIRE, unique:!0, done:!0, pilotid:226, unit:"TIE Striker", skill:8, upgrades:[ELITE], points:23, init:function() {
  this.facultativeailerons = !0;
}}, {name:"'Countdown'", faction:EMPIRE, unique:!0, pilotid:227, unit:"TIE Striker", skill:5, upgrades:[], done:!0, points:20, init:function() {
  this.adddicemodifier(ATTACKCOMPARE_M, ADD_M, DEFENSE_M, this, {req:function($m$$, $n$$) {
    return 0 == this.stress && 0 < $n$$;
  }.bind(this), f:function($m$$, $n$$) {
    return 0 == this.stress ? (this.log("cancel all dice results"), this.applydamage(1), this.endattack(), this.addstress(), {m:0, n:0}) : {m:$m$$, n:$n$$};
  }.bind(this), str:"hit"});
}}, {name:"'Pure Sabacc'", faction:EMPIRE, unique:!0, pilotid:228, unit:"TIE Striker", skill:6, upgrades:[ELITE], points:22, done:!0, init:function() {
  this.wrap_after("getattackstrength", this, function($i$$, $t$$, $a$$) {
    1 >= this.criticals.length && ($a$$ += 1);
    return $a$$;
  });
}}, {name:"Cassian Andor", faction:REBEL, pilotid:229, unit:"U-wing", skill:6, unique:!0, done:!0, upgrades:[ELITE, SYSTEM, TORPEDO, CREW, CREW], points:27, init:function() {
  var $self$$ = this;
  this.wrap_after("beginactivationphase", this, function($l$$) {
    var $p$$ = this.selectnearbyally(2, function($s$$, $t$$) {
      return 0 < $t$$.stress ? !0 : !1;
    });
    0 < $p$$.length && this.doselection(function($n$$) {
      this.log("select unit for -1 stress");
      this.resolveactionselection($p$$, function($k$$) {
        $p$$[$k$$].removestresstoken();
        $self$$.endnoaction($n$$);
      });
    }.bind(this));
    return $l$$;
  });
}}, {name:"Kylo Ren", faction:EMPIRE, pilotid:230, unique:!0, unit:"Upsilon-Class Shuttle", skill:6, done:!0, upgrades:[ELITE, SYSTEM, CREW, CREW, TECH, TECH], points:34, init:function() {
  this.firstroundhit = -1;
  this.wrap_after("resolveishit", this, function($t$$) {
    this.firstroundhit < round && (this.firstroundhit = round, c = new Condition($t$$, this, "I'll Show You The Dark Side"));
  });
}}, {name:"Major Stridan", faction:EMPIRE, pilotid:231, unique:!0, done:!0, unit:"Upsilon-Class Shuttle", skill:4, upgrades:[SYSTEM, CREW, CREW, TECH, TECH], points:32, init:function() {
  this.wrap_after("selectnearbyally", this, function($r$$, $f$$, $t$$) {
    "undefined" == typeof $t$$ && ($t$$ = $f$$, $f$$ = void 0);
    return 1 < $r$$ ? $t$$ : Unit.prototype.selectnearbyally.call(this, 3, $f$$);
  });
}}, {name:"Lieutenant Dormitz", faction:EMPIRE, pilotid:232, unique:!0, done:!0, unit:"Upsilon-Class Shuttle", skill:3, upgrades:[SYSTEM, CREW, CREW, TECH, TECH], points:31}, {name:"'Zeb' Orrelios", faction:REBEL, pilotid:233, unique:!0, done:!0, ambiguous:!0, edition:"TIE Fighter", unit:"TIE Fighter", skill:3, wave:["10"], upgrades:[], points:13, cancelhit:zeb_fct}];
var UPGRADE_TYPES = {Elite:"ept", Torpedo:TORPEDO, Astromech:"amd", Turret:"turret", Missile:"missile", Crew:"crew", Cannon:"cannon", Bomb:"bomb", Title:"title", Mod:"mod", System:"system", Illicit:"illicit", Salvaged:"salvaged", Tech:"tech"};
function AUXILIARY($i$$, $m$$) {
  return this.getPrimarySectorString($i$$, $m$$.clone().rotate(this.arcrotation, 0, 0));
}
function SUBAUXILIARY($i$$, $j$$, $m$$) {
  return this.getPrimarySubSectorString($i$$, $j$$, $m$$.clone().rotate(this.arcrotation, 0, 0));
}
function Laser($u$$, $type$$, $fire$$) {
  switch($type$$) {
    case "Bilaser":
    case "Mobilelaser":
      return new Weapon($u$$, {type:$type$$, name:"Laser", isactive:!0, attack:$fire$$, range:[1, 3], isprimary:!0, issecondary:!1, auxiliary:AUXILIARY, subauxiliary:SUBAUXILIARY});
    case "Laser180":
      return new Weapon($u$$, {type:$type$$, name:"Laser", isactive:!0, attack:$fire$$, range:[1, 3], isprimary:!0, issecondary:!1, auxiliary:function($i$$, $m$$) {
        return this.getHalfRangeString($i$$, $m$$);
      }, subauxiliary:function($i$$, $j$$, $m$$) {
        return this.getHalfSubRangeString($i$$, $j$$, $m$$);
      }});
    default:
      return new Weapon($u$$, {type:$type$$, name:"Laser", isactive:!0, attack:$fire$$, range:[1, 3], isprimary:!0, issecondary:!1});
  }
}
function Bomb($sh$$, $bdesc$$) {
  $.extend(this, $bdesc$$);
  $sh$$.upgrades.push(this);
  this.isactive = !0;
  this.wrapping = [];
  this.unit = $sh$$;
  $sh$$.bombs.push(this);
  this.exploded = !1;
}
Bomb.prototype = {isWeapon:function $Bomb$$isWeapon$() {
  return !1;
}, isBomb:function $Bomb$$isBomb$() {
  return !0;
}, canbedropped:function $Bomb$$canbedropped$() {
  return this.isactive && !this.unit.hasmoved && this.unit.lastdrop != round;
}, desactivate:function $Bomb$$desactivate$() {
  this.isactive = !1;
  this.unit.movelog("D-" + this.unit.upgrades.indexOf(this));
}, getBall:function $Bomb$$getBall$() {
  var $b$$ = this.g.getBBox();
  return {x:$b$$.x + $b$$.width / 2, y:$b$$.y + $b$$.height / 2, diam:Math.max($b$$.width / 2, $b$$.height / 2)};
}, actiondrop:function $Bomb$$actiondrop$($n$$) {
  this.unit.lastdrop = round;
  $(".bombs").remove();
  this.drop(this.unit.getbomblocation(), $n$$);
}, toString:function $Bomb$$toString$() {
  this.tooltip = formatstring(getupgtxttranslation(this.name, this.type));
  this.trname = translate(this.name).replace(/\'/g, "&#39;");
  this.left = 1 == this.unit.team;
  return Mustache.render(TEMPLATES.bomb, this);
}, getrangeallunits:function $Bomb$$getrangeallunits$() {
  var $range$$ = [[], [], [], [], []], $i$$;
  for ($i$$ in squadron) {
    var $k$$ = this.getrange(squadron[$i$$]);
    0 < $k$$ && $range$$[$k$$].push({unit:$i$$});
  }
  return $range$$;
}, getcollisions:function $Bomb$$getcollisions$() {
  var $ob$$ = this.getOutlineString(), $p$$ = [];
  for (i in squadron) {
    var $u$$ = squadron[i], $so$$ = $u$$.getOutlineString($u$$.m);
    os = $so$$.s;
    op = $so$$.p;
    (0 < Snap.path.intersection($ob$$.s, os).length || this.unit.isPointInside($ob$$.s, op) || this.unit.isPointInside(os, $ob$$.p)) && $p$$.push($u$$);
  }
  return $p$$;
}, getrange:function $Bomb$$getrange$($rsh$jscomp$1_sh$$) {
  var $ro$$ = this.getOutlineString(this.m).p;
  $rsh$jscomp$1_sh$$ = $rsh$jscomp$1_sh$$.getOutlinePoints($rsh$jscomp$1_sh$$.m);
  var $min$$ = 90001, $i$$, $j$$;
  for ($i$$ = 0;$i$$ < $ro$$.length;$i$$++) {
    for ($j$$ = 0;4 > $j$$;$j$$++) {
      var $d$$ = dist($rsh$jscomp$1_sh$$[$j$$], $ro$$[$i$$]);
      $d$$ < $min$$ && ($min$$ = $d$$);
    }
  }
  return 90000 < $min$$ ? 4 : 10000 >= $min$$ ? 1 : 40000 >= $min$$ ? 2 : 3;
}, resolveactionmove:function $Bomb$$resolveactionmove$($moves$$, $cleanup$$) {
  var $i$$;
  this.pos = [];
  var $resolve$$ = function($m$$, $k$$, $f$$) {
    for ($i$$ = 0;$i$$ < $moves$$.length;$i$$++) {
      this.pos[$i$$].remove();
    }
    this.m = $m$$;
    $f$$(this, $k$$);
  }.bind(this);
  if (1 == $moves$$.length) {
    this.pos[0] = this.getOutline($moves$$[0]).attr({fill:this.unit.color, opacity:0.7}), $resolve$$($moves$$[0], 0, $cleanup$$);
  } else {
    for ($i$$ = 0;$i$$ < $moves$$.length;$i$$++) {
      this.pos[$i$$] = this.getOutline($moves$$[$i$$]).attr({fill:this.unit.color, opacity:0.7}), function($k$$) {
        this.pos[$k$$].hover(function() {
          this.pos[$k$$].attr({stroke:this.unit.color, strokeWidth:"4px"});
        }.bind(this), function() {
          this.pos[$k$$].attr({strokeWidth:"0"});
        }.bind(this));
        this.pos[$k$$].click(function() {
          $resolve$$($moves$$[$k$$], $k$$, $cleanup$$);
        });
      }.call(this, $i$$);
    }
  }
}, drop:function $Bomb$$drop$($lm$$, $n$$) {
  var $dropped$$ = this;
  this.ordnance ? (this.ordnance = !1, $dropped$$ = $.extend({}, this)) : this.desactivate();
  $dropped$$.resolveactionmove(this.unit.getbombposition($lm$$, this.size), function($k$$) {
    this.display(0, 0);
    this.unit.bombdropped(this);
    "undefined" != typeof $n$$ && this.unit.endnoaction($n$$, "DROP");
  }.bind($dropped$$), !1, !0);
}, display:function $Bomb$$display$($x$$, $y$$) {
  if (0 != $x$$ || 0 != $y$$) {
    this.m = this.m.clone().translate($x$$, $y$$);
  }
  this.img1 = s.image("png/" + this.img, -this.width / 2, -this.height / 2, this.width, this.height);
  this.outline = this.getOutline(new Snap.Matrix).attr({display:"block", "class":"bombanim", stroke:halftone(BLUE), strokeWidth:2, fill:"rgba(8,8,8,0.3)"});
  this.g = s.group(this.outline, this.img1);
  this.g.hover(function() {
    var $m$jscomp$113_y$$ = VIEWPORT.m.clone(), $p$jscomp$96_w$$ = $("#svgout").width(), $h$jscomp$31_x$$ = $("#svgout").height(), $startX$$ = 0, $startY$$ = 0;
    $h$jscomp$31_x$$ > $p$jscomp$96_w$$ ? $startY$$ = ($h$jscomp$31_x$$ - $p$jscomp$96_w$$) / 2 : $startX$$ = ($p$jscomp$96_w$$ - $h$jscomp$31_x$$) / 2;
    var $max$$ = Math.max(900. / $p$jscomp$96_w$$, 900. / $h$jscomp$31_x$$), $bbox$$ = this.g.getBBox(), $p$jscomp$96_w$$ = $("#svgout").position();
    $("#playmat").width();
    $("#playmat").height();
    $h$jscomp$31_x$$ = $m$jscomp$113_y$$.x($bbox$$.x, $bbox$$.y - 20) / $max$$;
    $h$jscomp$31_x$$ += $p$jscomp$96_w$$.left + $startX$$;
    $m$jscomp$113_y$$ = $m$jscomp$113_y$$.y($bbox$$.x, $bbox$$.y - 20) / $max$$;
    $m$jscomp$113_y$$ += $p$jscomp$96_w$$.top + $startY$$;
    this.outline.attr({stroke:BLUE});
    $(".info").css({left:$h$jscomp$31_x$$, top:$m$jscomp$113_y$$}).html(this.name).appendTo("body").show();
  }.bind(this), function() {
    $(".info").hide();
    this.outline.attr({stroke:halftone(BLUE)});
  }.bind(this));
  this.g.transform(this.m);
  this.g.appendTo(VIEWPORT);
  this.g.attr("display", "block");
  BOMBS.push(this);
  if (this.stay) {
    OBSTACLES.push(this);
    var $p$$ = this.getcollisions();
    0 < $p$$.length && this.unit.resolveactionselection($p$$, function($k$$) {
      this.detonate($p$$[$k$$], !0);
    }.bind(this));
  }
}, getOutline:function $Bomb$$getOutline$($m$$) {
  return s.path(this.getOutlineString($m$$).s).appendTo(VIEWPORT);
}, getOutlineString:function $Bomb$$getOutlineString$($m$$) {
  "undefined" == typeof $m$$ && ($m$$ = this.m);
  var $p$jscomp$97_p1$$ = transformPoint($m$$, {x:-16, y:-15}), $p2$$ = transformPoint($m$$, {x:16, y:-15}), $p3$$ = transformPoint($m$$, {x:16, y:15});
  $m$$ = transformPoint($m$$, {x:-16, y:15});
  $p$jscomp$97_p1$$ = this.op = [$p$jscomp$97_p1$$, $p2$$, $p3$$, $m$$];
  return {s:"M " + $p$jscomp$97_p1$$[0].x + " " + $p$jscomp$97_p1$$[0].y + " L " + $p$jscomp$97_p1$$[1].x + " " + $p$jscomp$97_p1$$[1].y + " " + $p$jscomp$97_p1$$[2].x + " " + $p$jscomp$97_p1$$[2].y + " " + $p$jscomp$97_p1$$[3].x + " " + $p$jscomp$97_p1$$[3].y + " Z", p:$p$jscomp$97_p1$$};
}, explode_base:function $Bomb$$explode_base$() {
  this.exploded = !0;
  this.unit.log("%0 explodes", this.name);
  SOUNDS[this.snd].play();
  this.g.remove();
  BOMBS.splice(BOMBS.indexOf(this), 1);
}, explode:function $Bomb$$explode$() {
  this.explode_base();
}, detonate:function $Bomb$$detonate$($t$$, $immediate$$) {
  OBSTACLES.splice(OBSTACLES.indexOf(this), 1);
  this.explode_base();
}, endround:function $Bomb$$endround$() {
}, show:function $Bomb$$show$() {
}, wrap_before:Unit.prototype.wrap_before, wrap_after:Unit.prototype.wrap_after};
function Weapon($sh$$, $wdesc$$) {
  this.isprimary = !1;
  this.issecondary = !0;
  $.extend(this, $wdesc$$);
  $sh$$.upgrades[$sh$$.upgrades.length] = this;
  this.wrapping = [];
  this.isactive = !0;
  this.unit = $sh$$;
  $sh$$.weapons.push(this);
}
Weapon.prototype = {isBomb:function $Weapon$$isBomb$() {
  return !1;
}, isWeapon:function $Weapon$$isWeapon$() {
  return !0;
}, desactivate:function $Weapon$$desactivate$() {
  this.ordnance && this.type.match(/Torpedo|Missile/) ? this.ordnance = !1 : (this.isactive = !1, this.unit.movelog("D-" + this.unit.upgrades.indexOf(this)), this.unit.show());
}, toString:function $Weapon$$toString$() {
  this.tooltip = formatstring(getupgtxttranslation(this.name, this.type));
  this.trname = translate(this.name).replace(/\'/g, "&#39;");
  this.left = 1 == this.unit.team;
  if (this.isactive) {
    var $i$$, $r$$ = this.getrangeallunits();
    for ($i$$ = 0;$i$$ < $r$$.length && !$r$$[$i$$].isenemy(this.unit);$i$$++) {
    }
    this.nofire = $i$$ == $r$$.length ? !0 : !1;
  }
  this.attackkey = A[this.type.toUpperCase()].key;
  this.req = [];
  "undefined" != typeof this.getrequirements() && ("Target".match(this.getrequirements()) && this.req.push([A.TARGET.key]), "Focus".match(this.getrequirements()) && this.req.push(A.FOCUS.key));
  this.uid = squadron.indexOf(this.unit);
  this.rank = this.unit.upgrades.indexOf(this);
  return Mustache.render(TEMPLATES.weapon, this);
}, prehit:function $Weapon$$prehit$($t$$, $c$$, $h$$) {
}, posthit:function $Weapon$$posthit$($t$$, $c$$, $h$$) {
}, getrequirements:function $Weapon$$getrequirements$() {
  return this.requires;
}, getattack:function $Weapon$$getattack$() {
  return this.attack;
}, isTurret:function $Weapon$$isTurret$() {
  return this.type == TURRET;
}, getlowrange:function $Weapon$$getlowrange$() {
  return this.range[0];
}, gethighrange:function $Weapon$$gethighrange$() {
  return this.range[1];
}, isinrange:function $Weapon$$isinrange$($r$$) {
  return $r$$ >= this.getlowrange() && $r$$ <= this.gethighrange();
}, modifydamagegiven:function $Weapon$$modifydamagegiven$($ch$$) {
  return $ch$$;
}, modifyattackroll:function $Weapon$$modifyattackroll$($ch$$, $n$$, $d$$) {
  return $ch$$;
}, modifydamageassigned:function $Weapon$$modifydamageassigned$($ch$$, $t$$) {
  return $ch$$;
}, canfire:function $Weapon$$canfire$($sh$$) {
  "undefined" == typeof $sh$$ && console.log("undefined unit: " + this.unit.name + " " + this.name);
  return !this.isactive || this.unit.isally($sh$$) || this.unit.checkcollision($sh$$) ? !1 : "undefined" != typeof this.getrequirements() ? "Target".match(this.getrequirements()) && this.unit.canusetarget($sh$$) || "Focus".match(this.getrequirements()) && this.unit.canusefocus($sh$$) ? !0 : !1 : !0;
}, getrangeattackbonus:function $Weapon$$getrangeattackbonus$($sh$$) {
  return this.isprimary && 1 == this.getrange($sh$$) ? (this.unit.log("+1 attack for range 1"), 1) : 0;
}, declareattack:function $Weapon$$declareattack$($sh$$) {
  "undefined" != typeof this.getrequirements() && ("Target".match(this.getrequirements()) && 1 == this.consumes && this.unit.canusetarget($sh$$) ? this.unit.removetarget($sh$$) : "Focus".match(this.getrequirements()) && 1 == this.consumes && this.unit.canusefocus($sh$$) && this.unit.removefocustoken(), this.unit.show());
  return !0;
}, getrangedefensebonus:function $Weapon$$getrangedefensebonus$($sh$$) {
  return this.isprimary && 3 == this.getrange($sh$$) ? ($sh$$.log("+1 defense for range 3"), 1) : 0;
}, getauxiliarysector:function $Weapon$$getauxiliarysector$($sh$$) {
  var $m$$ = this.unit.m;
  if ("undefined" == typeof this.auxiliary) {
    return 4;
  }
  for (var $n$$ = this.unit.getoutlinerange($m$$, $sh$$).d, $i$$ = $n$$;$i$$ <= $n$$ + 1 && 3 >= $i$$;$i$$++) {
    if (this.unit.isinsector($m$$, $i$$, $sh$$, this.subauxiliary, this.auxiliary)) {
      return $i$$;
    }
  }
  return 4;
}, getprimarysector:function $Weapon$$getprimarysector$($sh$$) {
  for (var $m$$ = this.unit.m, $n$$ = this.unit.getoutlinerange($m$$, $sh$$).d, $i$$ = $n$$;$i$$ <= $n$$ + 1 && 3 >= $i$$;$i$$++) {
    if (this.unit.isinsector($m$$, $i$$, $sh$$, this.unit.getPrimarySubSectorString, this.unit.getPrimarySectorString)) {
      return $i$$;
    }
  }
  return 4;
}, getsector:function $Weapon$$getsector$($sh$$) {
  for (var $m$$ = this.unit.m, $n$$ = this.unit.getoutlinerange($m$$, $sh$$).d, $i$$ = $n$$;$i$$ <= $n$$ + 1 && 3 >= $i$$;$i$$++) {
    if (this.unit.isinsector($m$$, $i$$, $sh$$, this.unit.getPrimarySubSectorString, this.unit.getPrimarySectorString)) {
      return $i$$;
    }
  }
  if ("undefined" == typeof this.auxiliary) {
    return 4;
  }
  for ($i$$ = $n$$;$i$$ <= $n$$ + 1 && 3 >= $i$$;$i$$++) {
    if (this.unit.isinsector($m$$, $i$$, $sh$$, this.subauxiliary, this.auxiliary)) {
      return $i$$;
    }
  }
  return 4;
}, getrange:function $Weapon$$getrange$($ghs_r$jscomp$38_sh$$) {
  if (!this.canfire($ghs_r$jscomp$38_sh$$)) {
    return 0;
  }
  if (this.isTurret() || this.unit.isTurret(this)) {
    return $ghs_r$jscomp$38_sh$$ = this.unit.getrange($ghs_r$jscomp$38_sh$$), this.isinrange($ghs_r$jscomp$38_sh$$) ? $ghs_r$jscomp$38_sh$$ : 0;
  }
  $ghs_r$jscomp$38_sh$$ = this.getsector($ghs_r$jscomp$38_sh$$);
  return $ghs_r$jscomp$38_sh$$ >= this.getlowrange() && $ghs_r$jscomp$38_sh$$ <= this.gethighrange() ? $ghs_r$jscomp$38_sh$$ : 0;
}, endattack:function $Weapon$$endattack$($c$$, $h$$) {
  this.type.match(/Torpedo|Missile/) && this.desactivate();
}, hasdoubleattack:function $Weapon$$hasdoubleattack$() {
  return !1;
}, hasenemiesinrange:function $Weapon$$hasenemiesinrange$() {
  for (var $i$$ in squadron) {
    var $sh$$ = squadron[$i$$];
    if (this.unit.isenemy($sh$$) && 0 < this.getrange($sh$$)) {
      return !0;
    }
  }
  return !1;
}, getenemiesinrange:function $Weapon$$getenemiesinrange$($enemylist$$) {
  var $r$$ = [];
  "undefined" == typeof $enemylist$$ && ($enemylist$$ = squadron);
  for (var $i$$ in $enemylist$$) {
    var $sh$$ = $enemylist$$[$i$$];
    this.unit.isenemy($sh$$) && 0 < this.getrange($sh$$) && $r$$.push($sh$$);
  }
  return $r$$;
}, getrangeallunits:function $Weapon$$getrangeallunits$() {
  var $i$$, $r$$ = [];
  for ($i$$ in squadron) {
    var $sh$$ = squadron[$i$$];
    this.unit != $sh$$ && 0 < this.getrange($sh$$) && $r$$.push($sh$$);
  }
  return $r$$;
}, wrap_before:Unit.prototype.wrap_before, wrap_after:Unit.prototype.wrap_after, endround:function $Weapon$$endround$() {
}, show:function $Weapon$$show$() {
}};
function Upgrade($sh$$, $i$$) {
  $.extend(this, UPGRADES[$i$$]);
  $sh$$.upgrades.push(this);
  this.isactive = !0;
  this.unit = $sh$$;
  this.wrapping = [];
}
function Upgradefromid($sh$$, $i$$) {
  var $upg$$ = UPGRADES[$i$$];
  $upg$$.id = $i$$;
  return $upg$$.type == BOMB ? new Bomb($sh$$, $upg$$) : "undefined" != typeof $upg$$.isWeapon ? $upg$$.isWeapon() ? new Weapon($sh$$, $upg$$) : new Upgrade($sh$$, $i$$) : $upg$$.type.match(/Turretlaser|Bilaser|Mobilelaser|Laser180|Laser|Torpedo|Cannon|Missile|Turret/) || 1 == $upg$$.isweapon ? new Weapon($sh$$, $upg$$) : new Upgrade($sh$$, $i$$);
}
Upgrade.prototype = {toString:function $Upgrade$$toString$() {
  this.tooltip = formatstring(getupgtxttranslation(this.name, this.type));
  this.trname = translate(this.name).replace(/\'/g, "&#39;");
  this.left = 1 == this.unit.team;
  this.hasshield = "undefined" != typeof this.shield && 0 < this.shield ? !0 : !1;
  this.hasfocus = "undefined" != typeof this.focus && 0 < this.focus ? !0 : !1;
  if ("undefined" != typeof this["switch"] && phase == SETUP_PHASE) {
    for (j = 0;j < this.unit.upgrades.length && this.unit.upgrades[j] != this;j++) {
    }
    this.hasswitch = {uid:this.unit.id, uuid:j};
  } else {
    this.hasswitch = !1;
  }
  return Mustache.render(TEMPLATES.upgrade, this);
}, isWeapon:function $Upgrade$$isWeapon$() {
  return !1;
}, isBomb:function $Upgrade$$isBomb$() {
  return !1;
}, getlowrange:function $Upgrade$$getlowrange$() {
  return this.range[0];
}, gethighrange:function $Upgrade$$gethighrange$() {
  return this.range[1];
}, endround:function $Upgrade$$endround$() {
}, desactivate:function $Upgrade$$desactivate$() {
  this.ordnance && this.type.match(/Torpedo|Missile/) ? this.ordnance = !1 : (this.isactive = !1, this.unit.movelog("D-" + this.unit.upgrades.indexOf(this)), this.unit.show());
}, show:function $Upgrade$$show$() {
}, install:function $Upgrade$$install$($sh$$) {
  if ("undefined" != typeof this.addedaction) {
    var $aa_j$$ = this.addedaction.toUpperCase();
    $sh$$["addedaction" + this.id] = $sh$$.shipactionList.length;
    $sh$$.shipactionList.push($aa_j$$);
    $sh$$.showactionlist();
  }
  "undefined" != typeof this.upgrades && ($sh$$["addedupg" + this.id] = $sh$$.upgradesno, "undefined" != typeof this.pointsupg && ($sh$$.upgbonus[this.upgrades[0]] = this.pointsupg), "undefined" != typeof this.maxupg && ($sh$$.maxupg[this.upgrades[0]] = this.maxupg), 1 == this.exclusive && ($sh$$.exclupg[this.upgrades[0]] = !0), $sh$$.upgradetype = $sh$$.upgradetype.concat(this.upgrades), $sh$$.upgradesno = $sh$$.upgradetype.length, $sh$$.showupgradeadd());
  if ("undefined" != typeof this.lostupgrades) {
    for ($aa_j$$ = 0;$aa_j$$ < $sh$$.upgradetype.length;$aa_j$$++) {
      -1 < this.lostupgrades.indexOf($sh$$.upgradetype[$aa_j$$]) && (-1 < $sh$$.upg[$aa_j$$] && removeupgrade($sh$$, $aa_j$$, $sh$$.upg[$aa_j$$]), $sh$$.upg[$aa_j$$] = -2);
    }
    $sh$$.showupgradeadd();
  }
  if ("undefined" != typeof this.takesdouble) {
    for ($aa_j$$ = 0;$aa_j$$ < $sh$$.upgradetype.length && ($sh$$.upgradetype[$aa_j$$] != this.type || !(0 > $sh$$.upg[$aa_j$$] || UPGRADES[$sh$$.upg[$aa_j$$]].name != this.name));$aa_j$$++) {
    }
    $aa_j$$ < $sh$$.upgradetype.length && (-1 < $sh$$.upg[$aa_j$$] && removeupgrade($sh$$, $aa_j$$, $sh$$.upg[$aa_j$$]), $sh$$.upg[$aa_j$$] = -2);
    $sh$$.showupgradeadd();
  }
}, uninstall:function $Upgrade$$uninstall$($sh$$) {
  "undefined" != typeof this.addedaction && (this.addedaction.toUpperCase(), $sh$$.shipactionList.splice($sh$$["addedaction" + this.id], 1));
  if ("undefined" != typeof this.upgrades) {
    "undefined" != typeof this.pointsupg && ($sh$$.upgbonus[this.upgrades[0]] = 0);
    "undefined" != typeof this.maxupg && ($sh$$.maxupg[this.upgrades[0]] = 0);
    for (var $i$$ = 0;$i$$ < this.upgrades.length;$i$$++) {
      var $num$$ = $i$$ + $sh$$["addedupg" + this.id], $data$jscomp$32_e$$ = $("#unit" + $sh$$.id + " .upg div[num=" + $num$$ + "]");
      0 < $data$jscomp$32_e$$.length && ($data$jscomp$32_e$$ = $data$jscomp$32_e$$.attr("data"), removeupgrade($sh$$, $num$$, $data$jscomp$32_e$$));
    }
    1 == typeof this.exclusive && ($sh$$.exclupg[this.upgrades[0]] = !1);
    $sh$$.upgradetype.splice($sh$$["addedupg" + this.id], this.upgrades.length);
    $sh$$.upgradesno = $sh$$.upgradetype.length;
  }
  if ("undefined" != typeof this.lostupgrades) {
    for ($i$$ = 0;$i$$ < $sh$$.upgradetype.length;$i$$++) {
      -1 < this.lostupgrades.indexOf($sh$$.upgradetype[$i$$]) && ($sh$$.upg[$i$$] = -1);
    }
  }
  if ("undefined" != typeof this.takesdouble) {
    for ($i$$ = 0;$i$$ < $sh$$.upgradetype.length;$i$$++) {
      $sh$$.upgradetype[$i$$] == this.type && -2 == $sh$$.upg[$i$$] && ($sh$$.upg[$i$$] = -1);
    }
  }
}, wrap_before:Unit.prototype.wrap_before, wrap_after:Unit.prototype.wrap_after};
var rebelonly = function $rebelonly$($p$$) {
  var $i$$;
  for ($i$$ = 0;$i$$ < PILOTS.length;$i$$++) {
    if ($p$$ == PILOTS[$i$$].name && PILOTS[$i$$].faction == REBEL) {
      return !0;
    }
  }
  return !1;
}, empireonly = function $empireonly$($p$$) {
  var $i$$;
  for ($i$$ = 0;$i$$ < PILOTS.length;$i$$++) {
    if ($p$$ == PILOTS[$i$$].name && PILOTS[$i$$].faction == EMPIRE) {
      return !0;
    }
  }
  return !1;
};
var UPGRADES = [{name:"Ion Cannon Turret", type:TURRET, firesnd:"falcon_fire", points:5, attack:3, upgid:0, done:!0, modifyhit:function($ch$$) {
  return FCH_HIT;
}, prehit:function($target$$, $c$$, $h$$) {
  this.unit.hitresolved = 1;
  this.unit.criticalresolved = 0;
  $target$$.log("+%1 %HIT%, +1 ion token [%0]", this.name, 1);
  $target$$.addiontoken();
}, range:[1, 2]}, {name:"Proton Torpedoes", requires:"Target", consumes:!0, type:TORPEDO, firesnd:"missile", points:4, done:!0, attack:4, init:function($sh$$) {
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return $sh$$.weapons[$sh$$.activeweapon] == this;
  }.bind(this), aiactivate:function($m$$, $n$$) {
    return 0 < FCH_focus($m$$);
  }, f:function($m$$, $n$$) {
    0 < FCH_focus($m$$) && (this.unit.log("1 %FOCUS% -> 1 %CRIT% [%0]", this.name), $m$$ = $m$$ - FCH_FOCUS + FCH_CRIT);
    return $m$$;
  }.bind(this), str:"focus"});
  var $self$$ = this;
  $sh$$.wrap_after("setpriority", this, function($a$$) {
    "TARGET" == $a$$.type && $self$$.isactive && this.candotarget() && ($a$$.priority += 10);
  });
}, range:[2, 3]}, {name:"R2 Astromech", done:!0, install:function($sh$$) {
  var $i$$, $self$$ = this, $save$$ = [];
  $sh$$.installed = !0;
  $sh$$.wrap_after("getdial", this, function($gd$$) {
    if (0 == $save$$.length) {
      for ($i$$ = 0;$i$$ < $gd$$.length;$i$$++) {
        var $s$$ = P[$gd$$[$i$$].move].speed, $d$$ = $gd$$[$i$$].difficulty;
        if (1 == $s$$ || 2 == $s$$) {
          $d$$ = "GREEN";
        }
        $save$$[$i$$] = {move:$gd$$[$i$$].move, difficulty:$d$$};
      }
      this.log("1, 2 speed maneuvers are green [%0]", $self$$.name);
    }
    return $save$$;
  });
}, uninstall:function($sh$$) {
  "function" == typeof $sh$$.getdial.unwrap && $sh$$.getdial.unwrap(this);
}, type:ASTROMECH, points:1}, {name:"R2-D2", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("handledifficulty", this, function($d$$) {
    "GREEN" == $d$$ && this.shield < this.ship.shield && (this.addshield(1), this.log("+1 %SHIELD% [%0]", $self$$.name));
  });
}, unique:!0, type:ASTROMECH, points:4}, {name:"R2-F2", done:!0, candoaction:function() {
  return this.isactive;
}, action:function($n$$) {
  var $self$$ = this.unit;
  this.isactive && (this.unit.log("+1 agility until end of round [%0]", $self$$.name), $self$$.wrap_after("getagility", this, function($a$$) {
    return $a$$ + 1;
  }).unwrapper("endphase"), $self$$.showstats());
  $self$$.endaction($n$$, ASTROMECH);
  return !0;
}, unique:!0, type:ASTROMECH, points:3}, {name:"R5-D8", done:!0, candoaction:function() {
  if (!this.isactive) {
    return !1;
  }
  for (var $i$$ = 0;$i$$ < this.unit.criticals.length;$i$$++) {
    if (0 == this.unit.criticals[$i$$].isactive) {
      return !0;
    }
  }
  return !1;
}, action:function($n$$) {
  var $self$$ = this;
  this.isactive ? this.unit.endaction($n$$, ASTROMECH) : this.unit.defenseroll(1).done(function($i$jscomp$178_roll$$) {
    if (0 < FE_evade($i$jscomp$178_roll$$.roll) + FE_focus($i$jscomp$178_roll$$.roll)) {
      for ($i$jscomp$178_roll$$ = 0;$i$jscomp$178_roll$$ < this.criticals.length;$i$jscomp$178_roll$$++) {
        if (0 == this.criticals[$i$jscomp$178_roll$$].isactive) {
          this.log("-1 %HIT% [%0]", $self$$.name);
          this.criticals.slice($i$jscomp$178_roll$$, 1);
          this.addhull(1);
          this.show();
          break;
        }
      }
    }
    this.endaction($n$$, ASTROMECH);
  }.bind(this.unit));
}, unique:!0, type:ASTROMECH, points:3}, {name:"R5-X3", unique:!0, type:ASTROMECH, points:1, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("updateactivationdial", this, function() {
    this.addactivationdial(function() {
      return !this.hasionizationeffect() && $self$$.isactive;
    }.bind(this), function() {
      this.log("ignore obstacles [%0]", $self$$.name);
      $self$$.desactivate();
      this.wrap_after("hascollidedobstacle", $self$$, function($b$$) {
        return !1;
      }).unwrapper("endphase");
      this.wrap_after("isfireobstructed", this, function() {
        return !1;
      }).unwrapper("endphase");
      this.wrap_after("getobstructiondef", this, function() {
        return 0;
      }).unwrapper("endphase");
      this.show();
    }.bind(this), A[ASTROMECH.toUpperCase()].key, $("<div>").attr({"class":"symbols"}));
    return this.activationdial;
  });
}}, {name:"BB-8", unique:!0, done:!0, type:ASTROMECH, points:2, init:function($sh$$) {
  var $self$$ = this;
  $self$$.bb = -1;
  $sh$$.wrap_after("updateactivationdial", this, function($ad$$) {
    $self$$.isactive && $self$$.bb != round && !this.hasionizationeffect() && this.addactivationdial(function() {
      return !this.hasmoved && -1 < this.maneuver && "GREEN" == this.getmaneuver().difficulty && this.candoroll() && !this.hasionizationeffect();
    }.bind(this), function() {
      $self$$.bb = round;
      this.doaction([this.newaction(this.resolveroll, "ROLL")], $self$$.name + " free roll for green maneuver.");
    }.bind(this), A[ASTROMECH.toUpperCase()].key, $("<div>").attr({"class":"symbols", title:$self$$.name}));
    return this.activationdial;
  });
}}, {name:"Integrated Astromech", points:0, type:MOD, ship:"X-Wing", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("deal", this, function($c$jscomp$46_u$$, $f$$, $p$$) {
    var $k$$ = -1, $i$$;
    for ($i$$ in this.upgrades) {
      if ($c$jscomp$46_u$$ = this.upgrades[$i$$], $c$jscomp$46_u$$.type == ASTROMECH && 1 == $c$jscomp$46_u$$.isactive) {
        $k$$ = $i$$;
        break;
      }
    }
    if (-1 == $k$$ || !$self$$.isactive) {
      return $p$$;
    }
    var $pp$$ = $.Deferred();
    $p$$.then(function($cf$$) {
      1 == this.shield + this.hull || $cf$$.face == FACEUP && $cf$$.crit.lethal && 2 >= this.shield + this.hull ? (this.upgrades[$k$$].desactivate(), this.log("%0 is inactive, damage discarded [%1]", this.upgrades[$k$$].name, $self$$.name), $self$$.desactivate(), $pp$$.resolve({crit:$cf$$.crit, face:DISCARD})) : $pp$$.resolve($cf$$);
    }.bind(this));
    return $pp$$.promise();
  });
}}, {name:"Weapons Guidance", points:2, type:TECH, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return $self$$.isactive && this.canusefocus();
  }.bind($sh$$), aiactivate:function($m$$, $n$$) {
    return 0 < FCH_blank($m$$, $n$$);
  }, f:function($m$$, $n$$) {
    var $b$$ = FCH_blank($m$$, $n$$);
    this.removefocustoken();
    displayattacktokens(this);
    0 < $b$$ && (this.log("1 blank -> 1 %HIT% [%0]", $self$$.name), $m$$ += FCH_HIT);
    return $m$$;
  }.bind($sh$$), str:"blank"});
}}, {name:"R5-K6", init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("removetarget", this, function($t$$) {
    this.defenseroll(1).done(function($roll$$) {
      0 < FE_evade($roll$$.roll) && (this.addtarget($t$$), this.log("+1 %TARGET% / %1 [%0]", $self$$.name, $t$$.name));
    }.bind(this));
  });
}, done:!0, unique:!0, type:ASTROMECH, points:2}, {name:"R5 Astromech", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("endphase", this, function() {
    for (var $c$$ = -1, $cl$$ = -1, $i$$ = 0;$i$$ < this.criticals.length;$i$$++) {
      var $cr$$ = this.criticals[$i$$];
      if ($cr$$.isactive && "ship" == $cr$$.type && ($c$$ = $i$$, $cr$$.lethal)) {
        $cl$$ = $i$$;
        break;
      }
    }
    -1 < $cl$$ ? (this.log("repairing critical %1 [%0]", $self$$.name, this.criticals[$cl$$].name), this.criticals[$cl$$].facedown()) : -1 < $c$$ && (this.log("repairing critical %1 [%0]", $self$$.name, this.criticals[$c$$].name), this.criticals[$c$$].facedown());
  });
}, type:ASTROMECH, points:1}, {name:"Determination", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("deal", this, function($c$$, $f$$, $p$$) {
    if ("pilot" != $c$$.type) {
      return $p$$;
    }
    var $pp$$ = $.Deferred();
    $p$$.then(function($cf$$) {
      $cf$$.face == FACEUP ? (this.log("discarding critical %1 [%0]", $self$$.name, $cf$$.crit.name), $pp$$.resolve({crit:$cf$$.crit, face:DISCARD})) : $pp$$.resolve($cf$$);
    }.bind(this));
    return $pp$$.promise();
  });
}, type:ELITE, points:1}, {name:"Swarm Tactics", type:ELITE, points:2, done:!0, init:function($sh$$) {
  var $self$$ = this;
  "undefined" == typeof Unit.prototype.getswarm && (Unit.prototype.getswarm = function $Unit$$getswarm$() {
    return [[], [], []];
  });
  Unit.prototype.wrap_after("getswarm", this, function($p$$) {
    $p$$[$self$$.unit.team] = $p$$[$self$$.unit.team].concat($self$$.unit);
    return $p$$;
  });
  $self$$.unit.propswarm = -1;
  $sh$$.wrap_before("begincombatphase", this, function() {
    var $p$$ = this.getswarm()[this.team], $uu$$ = this;
    if (this == $p$$[0]) {
      for (var $m$$ = $p$$.length, $i$$ = 0;$i$$ < $m$$;$i$$++) {
        this.doselection(function($n$$) {
          $p$$.sort(function($a$$, $b$$) {
            return $a$$.getskill() > $b$$.getskill() ? 1 : $a$$.getskill() < $b$$.getskill() ? -1 : 0;
          });
          var $u$$ = $p$$.pop(), $q$$ = $u$$.selectnearbyally(1, function($a$$, $b$$) {
            return $a$$.getskill() > $b$$.getskill();
          });
          $u$$.select();
          var $sk$$ = $u$$.getskill();
          0 == $q$$.length ? $uu$$.endnoaction($n$$, "SELECT") : $u$$.resolveactionselection($q$$, function($k$$) {
            $q$$[$k$$].wrap_after("getskill", $self$$, function($s$$) {
              return $sk$$;
            }).unwrapper("endcombatphase");
            $q$$[$k$$].log("PS set to %1 [%0]", $self$$.name, $sk$$);
            $q$$[$k$$].showskill();
            $uu$$.endnoaction($n$$, "SELECT");
          });
        });
      }
    }
  });
}}, {name:"Squad Leader", unique:!0, done:!0, type:ELITE, points:2, candoaction:function() {
  var $p$$ = this.unit.selectnearbyally(2, function($t$$, $s$$) {
    return $s$$.getskill() < $t$$.getskill() && $s$$.candoaction();
  });
  return this.isactive && 0 < $p$$.length;
}, action:function($n$$) {
  var $self$$ = this.unit, $p$$ = $self$$.selectnearbyally(2, function($t$$, $s$$) {
    return $s$$.getskill() < $t$$.getskill() && $s$$.candoaction();
  });
  0 < $p$$.length ? $self$$.resolveactionselection($p$$, function($k$$) {
    $p$$[$k$$].select();
    $p$$[$k$$].doaction($p$$[$k$$].getactionlist(), "+1 free action").done(function() {
      $self$$.select();
    });
    $self$$.endaction($n$$, "ELITE");
  }) : ($self$$.log("no lower skilled pilot within range 2 [%0]", this.name), $self$$.endaction($n$$, "ELITE"));
}}, {name:"Expert Handling", candoaction:function() {
  return this.isactive && -1 == this.unit.actionsdone.indexOf("ROLL");
}, action:function($n$$) {
  -1 == this.unit.shipactionList.indexOf("ROLL") && this.unit.addstress();
  0 < this.unit.istargeted.length ? (this.unit.log("select target to lock [%0]", this.name), this.unit.resolveactionselection(this.unit.istargeted, function($k$$) {
    this.istargeted[$k$$].removetarget(this);
    this.resolveroll($n$$);
  }.bind(this.unit))) : this.unit.resolveroll($n$$);
}, type:ELITE, done:!0, points:2}, {name:"Marksmanship", init:function($sh$$) {
  this.mark = -1;
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return this.mark == round && this.isactive;
  }.bind(this), aiactivate:function($m$$, $n$$) {
    return 0 < FCH_focus($m$$);
  }, f:function($m$$, $n$$) {
    var $f$$ = FCH_focus($m$$);
    0 < $f$$ && this.mark == round && (1 < $f$$ ? this.unit.log("%0 %FOCUS% -> 1 %CRIT%, %1 %HIT% [%2]", $f$$, $f$$ - 1, $self$$.name) : this.unit.log("1 %FOCUS% -> 1 %CRIT% [%1]", $f$$, $self$$.name), $m$$ = $m$$ - FCH_FOCUS * $f$$ + FCH_CRIT + ($f$$ - 1) * FCH_HIT);
    return $m$$;
  }.bind(this), str:"focus", noreroll:"focus"});
}, candoaction:function() {
  return this.isactive;
}, action:function($n$$) {
  this.mark = round;
  this.unit.endaction($n$$, ELITE);
}, done:!0, type:ELITE, points:3}, {name:"Concussion Missiles", requires:"Target", consumes:!0, type:MISSILE, firesnd:"missile", points:4, attack:4, done:!0, init:function($sh$$) {
  var $missile$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return $sh$$.weapons[$sh$$.activeweapon] == this && $missile$$.isactive;
  }.bind(this), f:function($m$$, $n$$) {
    0 < FCH_blank($m$$, $n$$) && ($m$$ += FCH_HIT);
    return $m$$;
  }.bind(this), str:"blank"});
  $sh$$.wrap_after("setpriority", this, function($a$$) {
    "TARGET" == $a$$.type && $missile$$.isactive && this.candotarget() && ($a$$.priority += 10);
  });
}, range:[2, 3]}, {name:"Cluster Missiles", type:MISSILE, firesnd:"missile", requires:"Target", consumes:!0, points:4, attack:3, done:!0, followupattack:function() {
  return this.unit.weapons.indexOf(this);
}, hasdoubleattack:function() {
  return this.twinattack = !this.twinattack;
}, init:function($sh$$) {
  this.twinattack = !1;
  $sh$$.wrap_after("setpriority", this, function($a$$) {
    "TARGET" == $a$$.type && self.isactive && this.candotarget() && ($a$$.priority += 10);
  });
}, range:[1, 2]}, {name:"Daredevil", done:!0, candoaction:function() {
  return this.isactive;
}, action:function($n$$) {
  var $self$$ = this;
  this.unit.log("select maneuver [%0]", this.name);
  this.unit.resolveactionmove([this.unit.getpathmatrix(this.unit.m, "TL1"), this.unit.getpathmatrix(this.unit.m, "TR1")], function($t$$, $k$$) {
    if (-1 == $k$$) {
      return $t$$.endaction($n$$, ELITE);
    }
    $t$$.addstress();
    if (-1 == $t$$.shipactionList.indexOf("BOOST")) {
      $t$$.log("2 rolls for damage [%0]", $self$$.name);
      for (var $roll$$ = $t$$.rollattackdie(2, $self$$, "hit"), $i$$ = 0;2 > $i$$;$i$$++) {
        "hit" == $roll$$[$i$$] ? $t$$.resolvehit(1) : "critical" == $roll$$[$i$$] && $t$$.resolvecritical(1);
      }
      $t$$.checkdead();
    }
    $t$$.endaction($n$$, ELITE);
  }, !0, !0);
}, type:ELITE, points:3}, {name:"Elusiveness", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(DEFENSE_M, MOD_M, ATTACK_M, this, {req:function() {
    return 0 == this.stress && targetunit == this && $self$$.isactive;
  }.bind($sh$$), aiactivate:function($m$$, $n$$) {
    $sh$$.log("activate elusiveness " + FCH_crit($m$$) + " " + FCH_hit($m$$));
    return 0 < FCH_crit($m$$) + FCH_hit($m$$);
  }, f:function($m$$, $n$$) {
    this.unit.addstress();
    0 < FCH_crit($m$$) ? (this.unit.log("1 %CRIT% rerolled [%0]", this.name), $m$$ = $m$$ - FCH_CRIT + activeunit.attackroll(1)) : 0 < FCH_hit($m$$) && (this.unit.log("1 %HIT% rerolled [%0]", this.name), $m$$ = $m$$ - FCH_HIT + activeunit.attackroll(1));
    return $m$$;
  }.bind(this), str:"critical"});
}, type:ELITE, points:2}, {name:"Homing Missiles", requires:"Target", consumes:!1, type:MISSILE, firesnd:"missile", attack:4, range:[2, 3], done:!0, declareattack:function($target$$) {
  targetunit.wrap_after("canuseevade", this, function() {
    return !1;
  }).unwrapper("afterdefenseeffect");
  targetunit.log("cannot use evade tokens [%0]", this.name);
  return Weapon.prototype.declareattack.call(this, $target$$);
}, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("setpriority", this, function($a$$) {
    "TARGET" == $a$$.type && $self$$.isactive && this.candotarget() && ($a$$.priority += 10);
  });
}, points:5}, {name:"Push the Limit", init:function($sh$$) {
  var $ptl$$ = this;
  $ptl$$.r = -1;
  $sh$$.wrap_before("endaction", this, function($n$$, $type$$) {
    $ptl$$.r != round && this.candoaction() && null != $type$$ && ($ptl$$.r = round, this.doaction(this.getactionbarlist(), "+1 free action (Skip to cancel) [" + $ptl$$.name + "]").done(function($type2$$) {
      null == $type2$$ ? $ptl$$.r = -1 : this.addafteractions(function() {
        this.addstress();
      }.bind(this));
    }.bind(this)));
  });
}, done:!0, type:ELITE, points:3}, {name:"Deadeye", init:function($sh$$) {
  for (var $i$$ in $sh$$.weapons) {
    $sh$$.weapons[$i$$].wrap_after("getrequirements", this, function($g$$) {
      return "Target" == $g$$ ? "Target|Focus" : $g$$;
    });
  }
}, done:!0, type:ELITE, points:1}, {name:"Expose", candoaction:function() {
  return this.isactive;
}, action:function($n$$) {
  var $w$$ = this.unit.weapons[0];
  this.unit.log("-1 agility, +1 primary attack until end of turn [%0]", this.name);
  this.unit.wrap_after("getagility", this, function($a$$) {
    return 0 < $a$$ ? $a$$ - 1 : 0;
  }).unwrapper("endphase");
  $w$$.wrap_after("getattack", this, function($a$$) {
    return $a$$ + 1;
  }).unwrapper("endround");
  this.unit.showstats();
  this.unit.endaction($n$$, ELITE);
}, done:!0, type:ELITE, points:4}, {name:"Gunner", done:!0, init:function($sh$$) {
  for (var $i$$ in $sh$$.weapons) {
    $sh$$.weapons[$i$$].immediateattack = {pred:function $$sh$$$weapons$$i$$$immediateattack$pred$($k$$) {
      return 0 == $k$$;
    }, weapon:function $$sh$$$weapons$$i$$$immediateattack$weapon$() {
      return 0;
    }};
  }
  $sh$$.addattack(function($c$$, $h$$) {
    return this.weapons[0].isactive && 0 == $c$$ + $h$$;
  }, this, [$sh$$.weapons[0]], function() {
    this.noattack = round;
  }, function() {
    return this.selectnearbyenemy(3);
  });
}, type:CREW, points:5}, {name:"Ion Cannon", type:CANNON, firesnd:"slave_fire", done:!0, modifyhit:function($ch$$) {
  return FCH_HIT;
}, prehit:function($target$$, $c$$, $h$$) {
  this.unit.hitresolved = 1;
  this.unit.criticalresolved = 0;
  $target$$.log("+%1 %HIT%, +1 ion token [%0]", this.name, 1);
  $target$$.addiontoken();
}, points:3, attack:3, range:[1, 3]}, {name:"Heavy Laser Cannon", type:CANNON, firesnd:"slave_fire", done:!0, modifydamagegiven:function($ch$$) {
  if (0 < FCH_crit($ch$$)) {
    var $c$$ = FCH_crit($ch$$);
    this.unit.log("%0 %CRIT%-> %0 %HIT% [%1]", $c$$, this.name);
    $ch$$ = $ch$$ - FCH_CRIT * $c$$ + $c$$ * FCH_HIT;
  }
  return $ch$$;
}, points:7, attack:4, range:[2, 3]}, {name:"Seismic Charges", done:!0, img:"seismic.png", snd:"explode", width:16, height:8, size:15, explode:function() {
  if (phase == ACTIVATION_PHASE && !this.exploded) {
    for (var $r$$ = this.getrangeallunits(), $i$$ = 0;$i$$ < $r$$[1].length;$i$$++) {
      var $u$$ = squadron[$r$$[1][$i$$].unit];
      $u$$.log("+1 %HIT% [%0]", this.name);
      $u$$.resolvehit(1);
      $u$$.checkdead();
    }
    this.explode_base();
  }
}, type:BOMB, points:2}, {name:"Mercenary Copilot", init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return 3 == this.getrange(targetunit);
  }.bind($sh$$), aiactivate:function($m$$, $n$$) {
    return 0 < FCH_hit($m$$);
  }, f:function($m$$, $n$$) {
    0 < FCH_hit($m$$) && (this.log("1 %HIT% -> 1 %CRIT% [%0]", $self$$.name), $m$$ = $m$$ - FCH_HIT + FCH_CRIT);
    return $m$$;
  }.bind($sh$$), str:"hit"});
}, done:!0, type:CREW, points:2}, {name:"Assault Missiles", type:MISSILE, requires:"Target", consumes:!0, firesnd:"missile", done:!0, prehit:function($t$$, $c$jscomp$52_r$$, $h$jscomp$38_i$$) {
  $c$jscomp$52_r$$ = $t$$.getrangeallunits();
  for ($h$jscomp$38_i$$ = 0;$h$jscomp$38_i$$ < $c$jscomp$52_r$$[1].length;$h$jscomp$38_i$$++) {
    squadron[$c$jscomp$52_r$$[1][$h$jscomp$38_i$$].unit] != $t$$ && (squadron[$c$jscomp$52_r$$[1][$h$jscomp$38_i$$].unit].log("+1 %HIT% [%0]", this.name), squadron[$c$jscomp$52_r$$[1][$h$jscomp$38_i$$].unit].resolvehit(1));
  }
}, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("setpriority", this, function($a$$) {
    "TARGET" == $a$$.type && $self$$.isactive && this.candotarget() && ($a$$.priority += 10);
  });
}, points:5, attack:4, range:[2, 3]}, {name:"Veteran Instincts", done:!0, install:function($sh$$) {
  $sh$$.installed = !0;
  $sh$$.wrap_after("getskill", this, function($s$$) {
    return $s$$ + 2;
  });
  $sh$$.showskill();
}, uninstall:function($sh$$) {
  "function" == typeof $sh$$.getskill.unwrap && $sh$$.getskill.unwrap(this);
  $sh$$.showskill();
}, type:ELITE, points:1}, {name:"Proximity Mines", img:"proximity.png", snd:"explode", width:18, height:18, size:35, done:!0, stay:!0, candoaction:function() {
  return this.unit.lastdrop != round && this.isactive;
}, action:function($n$$) {
  this.actiondrop($n$$);
}, canbedropped:function() {
  return !1;
}, explode:function() {
}, detonate:function($t$$) {
  if (!this.exploded) {
    for (var $roll$$ = this.unit.rollattackdie(3, this, "critical"), $i$$ = 0;3 > $i$$;$i$$++) {
      "hit" == $roll$$[$i$$] ? ($t$$.log("+1 %HIT% [%0]", this.name), $t$$.resolvehit(1), $t$$.checkdead()) : "critical" == $roll$$[$i$$] && ($t$$.log("+1 %CRIT% [%0]", this.name), $t$$.resolvecritical(1), $t$$.checkdead());
    }
    Bomb.prototype.detonate.call(this);
  }
}, getOutlineString:function($m$$) {
  var $s$$ = "M ";
  this.op = [];
  "undefined" == typeof $m$$ && ($m$$ = this.m);
  for (var $i$$ = 0;25 > $i$$;$i$$++) {
    var $p$$ = transformPoint($m$$, {x:this.size * Math.sin(2 * $i$$ * Math.PI / 25), y:this.size * Math.cos(2 * $i$$ * Math.PI / 25)});
    this.op.push($p$$);
    $s$$ += $p$$.x + " " + $p$$.y + " ";
    0 == $i$$ && ($s$$ += "L ");
  }
  return {s:$s$$ + "Z", p:this.op};
}, type:BOMB, points:3}, {name:"Weapons Engineer", type:CREW, points:3, done:!0, init:function($sh$$) {
  this.second = !1;
  var $self$$ = this;
  $sh$$.boundtargets = function $$sh$$$boundtargets$($i$jscomp$189_t$$) {
    if (-1 < this.targeting.indexOf($i$jscomp$189_t$$)) {
      return !0;
    }
    for ($i$jscomp$189_t$$ = this.targeting.length - 2;0 <= $i$jscomp$189_t$$;$i$jscomp$189_t$$--) {
      this.removetarget(this.targeting[$i$jscomp$189_t$$]);
    }
    return !1;
  };
  $sh$$.wrap_after("addtarget", this, function($u$$) {
    1 == this.second ? this.second = !1 : this.doselection(function($n$$) {
      this.second = !0;
      this.log("select target to lock [%0]", $self$$.name);
      this.resolvetargetnoaction($n$$, !0);
    }.bind(this));
  });
}}, {name:"Draw Their Fire", init:function($sh$$) {
  var $self$$ = this;
  $self$$.ea = Unit.prototype.resolvecritical;
  Unit.prototype.resolvecritical = function $Unit$$resolvecritical$($c$$) {
    !$self$$.unit.dead && $self$$.isactive && 0 < $c$$ && this.isally($sh$$) && $sh$$ != this && 1 == this.getrange($sh$$) ? (this.selectunit([this, $sh$$], function($p$$, $k$$) {
      0 == $k$$ ? $self$$.ea.call(this, 1) : $self$$.ea.call($sh$$, 1);
    }, ["select unit [%0]", $self$$.name], !1), $self$$.ea.call(this, $c$$ - 1)) : $self$$.ea.call(this, $c$$);
    return $c$$;
  };
}, done:!0, type:ELITE, points:1}, {name:"Luke Skywalker", faction:REBEL, unique:!0, done:!0, init:function($sh$$) {
  var $self$$ = this, $i$jscomp$0$$;
  for ($i$jscomp$0$$ in $sh$$.weapons) {
    $sh$$.weapons[$i$jscomp$0$$].immediateattack = {pred:function $$sh$$$weapons$$i$jscomp$0$$$immediateattack$pred$($i$$) {
      return 0 == $i$$;
    }, weapon:function $$sh$$$weapons$$i$jscomp$0$$$immediateattack$weapon$() {
      return 0;
    }};
  }
  $sh$$.addattack(function($c$$, $h$$) {
    return this.weapons[0].isactive && 0 == $c$$ + $h$$;
  }, this, [$sh$$.weapons[0]], function() {
    this.noattack = round;
  }, function() {
    return this.selectnearbyenemy(3);
  });
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return $self$$.unit.addedattack == round && $self$$.isactive;
  }, aiactivate:function($m$$, $n$$) {
    return 0 < FCH_focus($m$$);
  }, f:function($m$$, $n$$) {
    0 < FCH_focus($m$$) && (this.log("1 %FOCUS% -> 1 %HIT% [%0]", $self$$.name), $m$$ = $m$$ - FCH_FOCUS + FCH_HIT);
    return $m$$;
  }, str:"focus"});
}, type:CREW, points:7}, {name:"Nien Nunb", faction:REBEL, done:!0, install:function($sh$$) {
  $sh$$.installed = !0;
  $sh$$.wrap_after("getdial", this, function($gd$$) {
    for (var $i$$ = 0;$i$$ < $gd$$.length;$i$$++) {
      $gd$$[$i$$].move.match(/F[1-5]/) && ($gd$$[$i$$].difficulty = "GREEN");
    }
    return $gd$$;
  });
}, uninstall:function($sh$$) {
  "function" == typeof $sh$$.getdial.unwrap && $sh$$.getdial.unwrap(this);
}, unique:!0, type:CREW, points:1}, {name:"Chewbacca", faction:REBEL, unique:!0, done:!0, type:CREW, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("deal", this, function($c$$, $f$$, $p$$) {
    if (!$self$$.isactive) {
      return $p$$;
    }
    var $pp$$ = $.Deferred();
    $p$$.then(function($cf$$) {
      1 == this.hull + this.shield || $cf$$.face == FACEUP && $cf$$.crit.lethal && 2 >= this.hull + this.shield ? (this.shield < this.ship.shield && this.addshield(1), this.log("+1 %SHIELD%, 1 damage discarded [%0]", $self$$.name), $self$$.desactivate(), $pp$$.resolve({crit:$cf$$.crit, face:DISCARD})) : $pp$$.resolve($cf$$);
    }.bind(this));
    return $pp$$.promise();
  });
}, points:4}, {name:"Advanced Proton Torpedoes", requires:"Target", consumes:!0, type:TORPEDO, firesnd:"missile", attack:5, done:!0, range:[1, 1], init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return $sh$$.weapons[$sh$$.activeweapon] == this;
  }.bind(this), aiactivate:function($m$$, $n$$) {
    return 0 < FCH_blank($m$$, $n$$);
  }, f:function($m$$, $n$$) {
    var $b$$ = FCH_blank($m$$, $n$$);
    3 < $b$$ && ($b$$ = 3);
    0 < $b$$ && (this.unit.log("%0 blanks -> %0 %FOCUS% [%1]", $b$$, this.name), $m$$ += $b$$ * FCH_FOCUS);
    return $m$$;
  }.bind(this), str:"blank"});
  $sh$$.wrap_after("setpriority", this, function($a$$) {
    "TARGET" == $a$$.type && $self$$.isactive && this.candotarget() && ($a$$.priority += 10);
  });
}, points:6}, {name:"Autoblaster", type:CANNON, done:!0, firesnd:"slave_fire", attack:3, declareattack:function($target$$) {
  var $self$$ = this;
  $target$$.wrap_after("cancelhit", $self$$, function($r$$, $org$$, $r2$$) {
    $self$$.unit.log("%HIT% cannot be cancelled [%0]", $self$$.name);
    return $r$$;
  }).unwrapper("afterdefenseeffect");
  return Weapon.prototype.declareattack.call(this, $target$$);
}, range:[1, 1], points:5}, {name:"Fire-Control System", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $self$$.f = -1;
  $sh$$.wrap_before("postattack", this, function($i$$) {
    this.reroll = 10;
  });
  $sh$$.addafterattackeffect(this, function() {
    -1 < this.gettargetableunits(3).indexOf(targetunit) ? (this.log("+1 %TARGET% / %1 [%0]", $self$$.name, targetunit.name), this.addtarget(targetunit)) : this.log("no valid target [%0]", $self$$.name);
  });
}, type:SYSTEM, points:2}, {name:"Blaster Turret", type:TURRET, done:!0, firesnd:"falcon_fire", requires:"Focus", consumes:!0, points:4, attack:3, range:[1, 2]}, {name:"Recon Specialist", init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("addfocus", this, function($n$$) {
    $sh$$.log("+1 %FOCUS% [%0]", $self$$.name);
    $sh$$.addfocustoken();
  });
}, done:!0, type:CREW, points:3}, {name:"Saboteur", type:CREW, done:!0, candoaction:function() {
  var $a$$ = this.unit.selectnearbyenemy(1);
  return this.isactive && 0 < $a$$.length;
}, action:function($n$$) {
  var $self$$ = this;
  if (this.isactive) {
    var $p$$ = this.unit.selectnearbyenemy(1);
    0 < $p$$.length ? (this.unit.log("select unit [%0]", this.name), this.unit.resolveactionselection($p$$, function($k$$) {
      var $i$jscomp$194_r$$, $q$$ = [];
      for ($i$jscomp$194_r$$ = 0;$i$jscomp$194_r$$ < $p$$[$k$$].criticals.length;$i$jscomp$194_r$$++) {
        0 == $p$$[$k$$].criticals[$i$jscomp$194_r$$].isactive && $q$$.push($i$jscomp$194_r$$);
      }
      0 < $q$$.length ? ($i$jscomp$194_r$$ = $p$$[$k$$].rand($q$$.length), $p$$[$k$$].log("turn faceup one damage card [%0]", $self$$.name), $p$$[$k$$].criticals[$q$$[$i$jscomp$194_r$$]].faceup(), $p$$[$k$$].show()) : $p$$[$k$$].log("no damage card [%0]", $self$$.name);
      this.endaction($n$$, "CREW");
    }.bind(this.unit))) : this.unit.endaction($n$$, "CREW");
  } else {
    this.unit.endaction($n$$, "CREW");
  }
}, points:2}, {name:"Intelligence Agent", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("beginactivationphase", this, function() {
    this.selectunit(this.selectnearbyenemy(2), function($p$$, $k$$) {
      $p$$[$k$$].showmaneuver();
      var $d$$ = $p$$[$k$$].getmaneuver();
      $p$$[$k$$].log("has a %0<span class='symbols'>" + P[$d$$.move].key + "</span> maneuver [%1]", P[$d$$.move].speed, $self$$.name);
    }, ["select unit [%0]", $self$$.name], !1);
  });
}, type:CREW, points:1}, {name:"Proton Bombs", done:!0, width:32, height:30, size:15, snd:"explode", img:"proton.png", explode:function() {
  if (phase == ACTIVATION_PHASE && !this.exploded) {
    for (var $r$$ = this.getrangeallunits(), $i$$ = 0;$i$$ < $r$$[1].length;$i$$++) {
      squadron[$r$$[1][$i$$].unit].applycritical(1), squadron[$r$$[1][$i$$].unit].checkdead();
    }
    this.explode_base();
  }
}, type:BOMB, points:5}, {name:"Adrenaline Rush", done:!0, init:function($sh$$) {
  var $upg$$ = this;
  $sh$$.wrap_after("updateactivationdial", this, function() {
    this.addactivationdial(function() {
      return !this.hasionizationeffect() && !this.hasmoved && $upg$$.isactive && -1 < this.maneuver && "RED" == this.getmaneuver().difficulty;
    }.bind(this), function() {
      this.log("red into white maneuver [%0]", $upg$$.name);
      $upg$$.desactivate();
      this.wrap_after("getmaneuver", $upg$$, function($d$$) {
        return {move:$d$$.move, difficulty:"WHITE"};
      }).unwrapper("endactivationphase");
      this.show();
    }.bind(this), A[ELITE.toUpperCase()].key, $("<div>").attr({"class":"symbols"}));
    return this.activationdial;
  });
}, type:ELITE, points:1}, {name:"Advanced Sensors", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("beginactivation", this, function() {
    this.candoaction() && !this.hasionizationeffect() && this.doaction(this.getactionlist(), "").done(function($r$$) {
      null != $r$$ && this.wrap_after("candoendmaneuveraction", $self$$, function() {
        return !1;
      }).unwrapper("endactivationphase");
    }.bind(this));
  });
}, type:SYSTEM, points:3}, {name:"Sensor Jammer", init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(DEFENSE_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return $self$$.isactive;
  }.bind($sh$$), aiactivate:function($m$$, $n$$) {
    return 0 < FCH_hit($m$$);
  }, f:function($m$$, $n$$) {
    0 < FCH_hit($m$$) && (this.unit.log("1 %HIT% -> 1 %FOCUS% [%0]", $self$$.name), $m$$ = $m$$ - FCH_HIT + FCH_FOCUS);
    return $m$$;
  }.bind(this), str:"hit"});
}, done:!0, type:SYSTEM, points:4}, {name:"Darth Vader", faction:EMPIRE, unique:!0, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.addafterattackeffect($self$$, function() {
    this.hasfired && this.donoaction([{org:$self$$, type:"CREW", name:$self$$.name, action:function($n$$) {
      $self$$.unit.log("+%1 %HIT% [%0]", $self$$.name, 2);
      targetunit.log("+1 %CRIT% [%0]", $self$$.name);
      this.resolvehit(2);
      SOUNDS.explode.play();
      targetunit.resolvecritical(1);
      this.checkdead();
      targetunit.checkdead();
      this.endnoaction($n$$, "CREW");
    }.bind(this)}], "", !0);
  });
}, type:CREW, points:3}, {name:"Rebel Captive", faction:EMPIRE, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.rebelcaptive = 0;
  $sh$$.wrap_before("isattackedby", this, function($w$$, $t$$) {
    this.rebelcaptive != round && ($t$$.log("+1 %STRESS% [%0]", $self$$.name), $t$$.addstress(), this.rebelcaptive = round);
  }.bind(this));
}, unique:!0, type:CREW, points:3}, {name:"Flight Instructor", init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(DEFENSE_M, REROLL_M, DEFENSE_M, this, {dice:["focus"], n:function() {
    return 2 >= activeunit.getskill() ? 2 : 1;
  }, req:function($attacker$$, $w$$, $defender$$) {
    this.isactive && this.unit.log("+%1 %FOCUS% reroll(s) [%0]", $self$$.name, 2 >= activeunit.getskill() ? 2 : 1);
    return this.isactive;
  }.bind(this)});
}, done:!0, type:CREW, points:4}, {name:"Navigator", init:function($sh$$) {
  $sh$$.wrap_after("getmaneuverlist", this, function($list$$) {
    var $gd$$ = this.getdial();
    if (this.hasionizationeffect()) {
      return $list$$;
    }
    for (var $i$$ in $list$$) {
      var $bearing$$ = $i$$.replace(/\d/, "");
      for (j = 0;j < $gd$$.length;j++) {
        !$gd$$[j].move.match($bearing$$) || "undefined" != typeof $list$$[$gd$$[j].move] || "RED" == $gd$$[j].difficulty && 0 != this.stress || ($list$$[$gd$$[j].move] = $gd$$[j]);
      }
    }
    return $list$$;
  });
}, done:!0, type:CREW, points:3}, {name:"Opportunist", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("preattackroll", this, function($w$$, $t$jscomp$0$$) {
    0 == $t$jscomp$0$$.focus + $t$jscomp$0$$.evade && 0 == this.stress && this.donoaction([{org:this, name:this.name, type:"ELITE", action:function($n$$) {
      this.wrap_after("getattackstrength", $self$$, function($i$$, $t$$, $a$$) {
        return $a$$ + 1;
      }).unwrapper("endattack");
      this.addstress();
      this.log("+1 attack against %1, +1 %STRESS% [%0]", $self$$.name, $t$jscomp$0$$.name);
      this.endnoaction($n$$, "ELITE");
    }.bind(this)}], "", !0);
  });
}, type:ELITE, points:4}, {name:"Ion Pulse Missiles", requires:"Target", consumes:!1, type:MISSILE, firesnd:"missile", done:!0, modifyhit:function($ch$$) {
  return FCH_HIT;
}, prehit:function($t$$, $c$$, $h$$) {
  this.unit.log("+%1 %HIT%, +1 ion token [%0]", this.name, 2);
  this.unit.hitresolved = 1;
  this.unit.criticalresolved = 0;
  $t$$.addiontoken();
  $t$$.addiontoken();
}, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("setpriority", this, function($a$$) {
    "TARGET" == $a$$.type && $self$$.isactive && this.candotarget() && ($a$$.priority += 10);
  });
}, points:3, attack:3, range:[2, 3]}, {name:"Wingman", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("begincombatphase", this, function() {
    this.selectunit(this.selectnearbyally(1, function($s$$, $t$$) {
      return 0 < $t$$.stress;
    }), function($p$$, $k$$) {
      $p$$[$k$$].removestresstoken();
    }, ["select unit [%0]", $self$$.name], !1);
  });
}, type:ELITE, points:2}, {name:"Decoy", init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("begincombatphase", this, function() {
    this.selectunit(this.selectnearbyally(2), function($p$$, $k$$) {
      var $s1$$ = $p$$[$k$$].getskill(), $s2$$ = this.getskill();
      this.wrap_after("getskill", $self$$, function($s$$) {
        return $s1$$;
      }).unwrapper("endcombatphase");
      $p$$[$k$$].wrap_after("getskill", $self$$, function($s$$) {
        return $s2$$;
      }).unwrapper("endcombatphase");
    }, ["select unit (or self to cancel) [%0]", $self$$.name], !0);
  });
}, done:!0, type:ELITE, points:2}, {name:"Outmaneuver", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("resolveattack", this, function($w$$, $targetunit$$) {
    $targetunit$$.wrap_after("getdefensestrength", $self$$, function($i$$, $t$$, $d$$) {
      return !this.isinfiringarc($t$$) && $t$$.isinfiringarc(this) && 0 < $d$$ ? (this.log("-1 defense [%0]", $self$$.name), $d$$ - 1) : $d$$;
    }).unwrapper("dodefenseroll");
  });
}, type:ELITE, points:3}, {name:"Predator", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, REROLL_M, ATTACK_M, this, {dice:["blank", "focus"], n:function() {
    return 2 >= targetunit.getskill() ? 2 : 1;
  }, req:function($a$$, $w$$, $defender$$) {
    this.log("+%1 reroll(s) [%0]", $self$$.name, 2 >= targetunit.getskill() ? 2 : 1);
    return $self$$.isactive;
  }.bind($sh$$)});
}, type:ELITE, points:3}, {name:"Flechette Torpedoes", requires:"Target", consumes:!0, type:TORPEDO, firesnd:"missile", done:!0, endattack:function($c$$, $h$$) {
  4 >= targetunit.hull && targetunit.addstress();
  Weapon.prototype.endattack.call(this);
}, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("setpriority", this, function($a$$) {
    "TARGET" == $a$$.type && $self$$.isactive && this.candotarget() && ($a$$.priority += 10);
  });
}, points:2, attack:3, range:[2, 3]}, {name:"R7 Astromech", type:ASTROMECH, points:2, done:!0, init:function($sh$$) {
  $sh$$.adddicemodifier(DEFENSE_M, REROLL_M, ATTACK_M, this, {dice:["critical", "hit", "focus"], n:function() {
    return 9;
  }, req:function() {
    return -1 < this.targeting.indexOf(activeunit);
  }.bind($sh$$), mustreroll:!0});
}}, {name:"R7-T1", candoaction:function() {
  return this.isactive;
}, action:function($n$$) {
  var $p$$ = this.unit.selectnearbyenemy(2);
  0 < $p$$.length && this.isactive ? (this.unit.log("select unit [%0]", this.name), this.unit.resolveactionselection($p$$, function($k$$) {
    $p$$[$k$$] != this ? ($p$$[$k$$].isinfiringarc(this) && this.addtarget($p$$[$k$$]), this.resolveboost($n$$)) : this.endaction($n$$, "ASTROMECH");
  }.bind(this.unit))) : this.unit.endaction($n$$, "ASTROMECH");
}, done:!0, unique:!0, type:ASTROMECH, points:3}, {name:"Tactician", type:CREW, limited:!0, points:2, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.addafterattackeffect(this, function($c$$, $h$$) {
    2 == this.getsector(targetunit) && (targetunit.addstress(), targetunit.log("+1 %STRESS% [%0]", $self$$.name));
  });
}}, {name:"R2-D2", faction:REBEL, unique:!0, type:CREW, points:4, done:!0, init:function($sh$$) {
  var $x$$ = this;
  $sh$$.wrap_after("endphase", this, function() {
    for (var $crit$jscomp$5_p$$ = [], $c$$ = this.criticals, $i$$ = 0;$i$$ < $c$$.length;$i$$++) {
      $c$$[$i$$].isactive || $crit$jscomp$5_p$$.push($c$$[$i$$]);
    }
    0 == this.shield && 0 < this.ship.shield && (this.log("+1 %SHIELD% [%0]", $x$$.name), this.addshield(1), this.show(), 0 < $crit$jscomp$5_p$$.length && ($crit$jscomp$5_p$$ = $crit$jscomp$5_p$$[this.rand($crit$jscomp$5_p$$.length)], 0 < FCH_hit(this.attackroll(1)) && (this.log("+1 %CRIT% [%0]", this.name), $crit$jscomp$5_p$$.faceup())));
  });
}}, {name:"C-3PO", unique:!0, faction:REBEL, type:CREW, points:3, done:!0, init:function($sh$$) {
  var $c3po$$ = -1;
  $sh$$.wrap_after("defenseroll", this, function($r$$, $promise$$) {
    if ($c3po$$ == round) {
      return $promise$$;
    }
    var $lock$$ = $.Deferred();
    $c3po$$ = round;
    $promise$$.done(function($roll$$) {
      this.guessevades($roll$$, $lock$$);
    }.bind(this));
    return $lock$$.promise();
  });
}}, {name:"R3-A2", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("resolveattack", this, function($w$$, $target$$) {
    this.isinfiringarc($target$$) && this.donoaction([{org:$self$$, name:$self$$.name, type:"ASTROMECH", action:function($n$$) {
      this.addstress();
      this.log("+1 %STRESS% [%0]", $self$$.name);
      $target$$.log("+1 %STRESS% [%0]", $self$$.name);
      $target$$.addstress();
      this.endnoaction($n$$, "ASTROMECH");
    }.bind(this)}], "", !0);
  });
}, unique:!0, type:ASTROMECH, points:2}, {name:"R2-D6", upgrades:[ELITE], noupgrades:ELITE, skillmin:3, done:!0, unique:!0, type:ASTROMECH, points:1}, {name:"Enhanced Scopes", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("beginactivationphase", this, function() {
    this.log("PS set to %1 [%0]", $self$$.name, 0);
    this.wrap_after("getskill", $self$$, function($s$$) {
      return 0;
    }).unwrapper("endactivationphase");
  });
}, type:SYSTEM, points:1}, {name:"Chardaan Refit", type:MISSILE, done:!0, firesnd:"missile", isWeapon:function() {
  return !1;
}, points:-2, ship:"A-Wing"}, {name:"Proton Rockets", type:MISSILE, firesnd:"missile", requires:"Focus", consumes:!1, points:3, attack:2, done:!0, getattack:function() {
  a = this.attack;
  return a = 3 >= this.unit.agility ? a + this.unit.agility : a + 3;
}, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("setpriority", this, function($a$$) {
    "FOCUS" == $a$$.type && $self$$.isactive && this.candofocus() && ($a$$.priority += 10);
  });
}, range:[1, 1]}, {name:"Kyle Katarn", faction:REBEL, unique:!0, done:!0, type:CREW, points:3, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("removestresstoken", this, function() {
    this.log("-1 stress -> +1 %FOCUS% [%0]", $self$$.name);
    this.addfocustoken();
  });
}}, {name:"Jan Ors", faction:REBEL, unique:!0, type:CREW, points:2, done:!0, init:function($sh$$) {
  this.jan = -1;
  var $self$$ = this;
  Unit.prototype.wrap_after("addfocustoken", this, function() {
    !$self$$.unit.dead && 3 >= this.getrange($sh$$) && this.isally($sh$$) && $self$$.jan < round && (this.log("select %FOCUS% or %EVADE% token [%0]", $self$$.name), this.donoaction([{name:$self$$.name, org:$self$$, type:"FOCUS", action:function($n$$) {
      this.endnoaction($n$$, "FOCUS");
    }.bind(this)}, {name:$self$$.name, org:$self$$, type:"EVADE", action:function($n$$) {
      $self$$.jan = round;
      this.focus--;
      this.addevadetoken();
      this.endnoaction($n$$, "EVADE");
    }.bind(this)}], "", !1));
  });
}}, {name:"R4-D6", init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("cancelhit", this, function($d$jscomp$28_h$jscomp$44_r$$, $ch$jscomp$11_org$$, $r2$$) {
    $d$jscomp$28_h$jscomp$44_r$$ = FCH_hit($r2$$.ch);
    if (3 <= $d$jscomp$28_h$jscomp$44_r$$) {
      $sh$$.log("cancelling %0 hits [%1]", $d$jscomp$28_h$jscomp$44_r$$ - 2, $self$$);
      $d$jscomp$28_h$jscomp$44_r$$ -= 2;
      $ch$jscomp$11_org$$ = $r2$$.ch - $d$jscomp$28_h$jscomp$44_r$$ * FCH_HIT;
      for (var $i$$ = 0;$i$$ < $d$jscomp$28_h$jscomp$44_r$$;$i$$++) {
        $sh$$.addstress();
      }
      return {ch:$ch$jscomp$11_org$$, e:$r2$$.e};
    }
    return $r2$$;
  });
}, done:!0, unique:!0, type:ASTROMECH, points:1}, {name:"R5-P9", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("endcombatphase", this, function() {
    this.canusefocus() && this.shield < this.ship.shield && (this.addshield(1), this.log("1 %FOCUS% -> 1 %SHIELD% [%0]", $self$$.name), this.removefocustoken());
  });
}, unique:!0, type:ASTROMECH, points:3}, {name:"Han Solo", faction:REBEL, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return $self$$.isactive && -1 < this.targeting.indexOf(targetunit);
  }.bind($sh$$), aiactivate:function($m$$, $n$$) {
    return 0 < FCH_focus($m$$);
  }, f:function($m$$, $n$$) {
    var $f$$ = FCH_focus($m$$);
    this.log("%0 %FOCUS% -> %0 %HIT% [%1]", $f$$, $self$$.name);
    this.removetarget(targetunit);
    return $m$$ - FCH_FOCUS * $f$$ + FCH_HIT * $f$$;
  }.bind($sh$$), str:"target", noreroll:"focus"});
}, type:CREW, unique:!0, done:!0, points:2}, {name:"Leia Organa", faction:REBEL, type:CREW, unique:!0, done:!0, init:function($sh$$) {
  var $mod$$ = this;
  $sh$$.wrap_before("beginactivationphase", this, function() {
    $mod$$.isactive && this.donoaction([{type:"CREW", org:$mod$$, name:$mod$$.name, action:function($n$$) {
      $mod$$.desactivate();
      for (var $i$$ in squadron) {
        squadron[$i$$].isally($sh$$) && squadron[$i$$].wrap_after("getmaneuver", $mod$$, function($m$$) {
          "RED" == $m$$.difficulty && ($m$$.difficulty = "WHITE");
          return $m$$;
        }).unwrapper("endactivationphase");
      }
      this.endnoaction($n$$, "CREW");
    }.bind(this)}], "", !0);
  });
}, points:4}, {name:"Targeting Coordinator", type:CREW, limited:!0, done:!0, points:4}, {name:"Lando Calrissian", faction:REBEL, type:CREW, unique:!0, done:!0, candoaction:function() {
  return this.isactive;
}, action:function($n$$) {
  var $self$$ = this, $str$$ = "";
  this.isactive ? this.unit.defenseroll(2).done(function($e$jscomp$24_roll$$) {
    var $f$$ = FE_focus($e$jscomp$24_roll$$.roll);
    $e$jscomp$24_roll$$ = FE_evade($e$jscomp$24_roll$$.roll);
    for (var $i$$ = 0;$i$$ < $f$$;$i$$++) {
      this.addfocustoken();
    }
    0 < $f$$ && ($str$$ += " +" + $f$$ + " %FOCUS%");
    for ($i$$ = 0;$i$$ < $e$jscomp$24_roll$$;$i$$++) {
      this.addevadetoken();
    }
    0 < $e$jscomp$24_roll$$ && ($str$$ += " +" + $e$jscomp$24_roll$$ + " %EVADE%");
    "" == $str$$ ? this.log("no effect [%0]", $self$$.name) : this.log($str$$ + " [%0]", $self$$.name);
    this.endaction($n$$, "CREW");
  }.bind(this.unit)) : this.unit.endaction($n$$, "CREW");
}, points:3}, {name:"Mara Jade", faction:EMPIRE, type:CREW, unique:!0, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("endcombatphase", this, function() {
    for (var $p$$ = this.gettargetableunits(1), $i$$ = 0;$i$$ < $p$$.length;$i$$++) {
      0 == $p$$[$i$$].stress && ($p$$[$i$$].log("+1 %STRESS% [%0]", $self$$.name), $p$$[$i$$].addstress());
    }
  });
}, points:3}, {name:"Fleet Officer", faction:EMPIRE, type:CREW, done:!0, candoaction:function() {
  return this.isactive;
}, action:function($n$$) {
  if (this.isactive) {
    var $p$$ = this.unit.selectnearbyally(2);
    0 < $p$$.length ? 1 == $p$$.length ? ($p$$[0].addfocustoken(), this.unit.addstress(), this.unit.endaction($n$$, CREW)) : 2 == $p$$.length ? ($p$$[0].addfocustoken(), $p$$[1].addfocustoken(), $p$$[0].log("adding focus"), $p$$[1].log("adding focus"), this.unit.addstress(), this.unit.endaction($n$$, CREW)) : (this.unit.log("select 2 units [%0]", this.name), this.unit.resolveactionselection($p$$, function($k$$) {
      $p$$[$k$$].addfocustoken();
      $p$$.splice($k$$, 1);
      0 < $p$$.length ? this.resolveactionselection($p$$, function($l$$) {
        $p$$[$l$$].addfocustoken();
        this.addstress();
        this.endaction($n$$, CREW);
      }.bind(this)) : this.endaction($n$$, CREW);
    }.bind(this.unit))) : this.unit.endaction($n$$, CREW);
  } else {
    this.unit.endaction($n$$, CREW);
  }
}, points:3}, {name:"Stay On Target", type:ELITE, points:2, done:!0, init:function($sh$$) {
  $sh$$.wrap_after("getmaneuverlist", this, function($list$$) {
    var $gd$$ = this.getdial();
    if (this.hasionizationeffect() || 0 < this.stress) {
      return $list$$;
    }
    for (var $i$$ in $list$$) {
      for (var $speed$$ = $list$$[$i$$].move.substr(-1), $j$$ = 0;$j$$ < $gd$$.length;$j$$++) {
        $gd$$[$j$$].move.substr(-1) == $speed$$ && "undefined" == typeof $list$$[$gd$$[$j$$].move] && ($list$$[$gd$$[$j$$].move] = {move:$gd$$[$j$$].move, difficulty:"RED", halfturn:!1});
      }
    }
    return $list$$;
  });
}}, {name:"Dash Rendar", faction:REBEL, unique:!0, done:!0, init:function($sh$$) {
  $sh$$.wrap_after("isfireobstructed", this, function() {
    return !1;
  });
  $sh$$.wrap_after("getobstructiondef", this, function() {
    return 0;
  });
}, type:CREW, points:2}, {name:"Lone Wolf", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, REROLL_M, ATTACK_M, this, {dice:["blank"], n:function() {
    return 1;
  }, req:function($a$jscomp$85_p$$, $w$$, $defender$$) {
    $a$jscomp$85_p$$ = this.unit.selectnearbyally(2);
    0 == $a$jscomp$85_p$$.length && $self$$.isactive && this.unit.log("+1 blank reroll [%0]", $self$$.name);
    return 0 == $a$jscomp$85_p$$.length && $self$$.isactive;
  }.bind(this)});
  $sh$$.adddicemodifier(DEFENSE_M, REROLL_M, DEFENSE_M, this, {dice:["blank"], n:function() {
    return 1;
  }, req:function($attacker$jscomp$12_p$$, $w$$, $defender$$) {
    $attacker$jscomp$12_p$$ = this.unit.selectnearbyally(2);
    0 == $attacker$jscomp$12_p$$.length && $self$$.isactive && this.unit.log("+1 blank reroll [%0]", $self$$.name);
    return 0 == $attacker$jscomp$12_p$$.length && $self$$.isactive;
  }.bind(this)});
}, unique:!0, type:ELITE, points:2}, {name:"'Leebo'", faction:REBEL, unique:!0, candoaction:function() {
  return this.isactive;
}, action:function($n$$) {
  this.isactive ? (this.unit.log("free %BOOST% and ion token [%0]", this.name), this.unit.addiontoken(), this.unit.resolveboost($n$$)) : this.unit.endaction($n$$, "BOOST");
}, done:!0, type:CREW, points:2}, {name:"Ruthlessness", faction:EMPIRE, type:ELITE, points:3, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.addafterattackeffect(this, function($c$$, $h$$) {
    if (0 != $c$$ + $h$$) {
      var $p$jscomp$0$$ = targetunit.selectnearbyunits(1, function($t$$, $o$$) {
        return $o$$ != targetunit;
      });
      this.selectunit($p$jscomp$0$$, function($p$$, $k$$) {
        $p$$[$k$$].log("+%1 %HIT% [%0]", $self$$.name, 1);
        $p$$[$k$$].resolvehit(1);
        $p$$[$k$$].checkdead();
      }, ["select unit [%0]", $self$$.name], !1);
    }
  });
}}, {name:"Intimidation", done:!0, init:function($sh$$) {
  var $unit$$ = this.unit, $self$$ = this;
  Unit.prototype.wrap_after("getagility", this, function($a$$) {
    return !$unit$$.dead && this.isenemy($unit$$) && 0 < $a$$ && "undefined" != typeof this.touching && -1 < this.touching.indexOf($unit$$) ? (this.log("-1 agility [%0]", $self$$.name), $a$$ - 1) : $a$$;
  });
}, type:ELITE, points:2}, {name:"Ysanne Isard", faction:EMPIRE, unique:!0, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("begincombatphase", this, function() {
    0 < this.criticals.length && this.candoevade() && (this.addevadetoken(), this.log("+1 %EVADE% [%0]", $self$$.name));
  });
}, type:CREW, points:4}, {name:"Moff Jerjerrod", faction:EMPIRE, unique:!0, done:!0, type:CREW, points:2, init:function($sh$$) {
  var $crew$$ = this;
  $sh$$.wrap_after("deal", this, function($c$$, $f$$, $p$$) {
    if (!$crew$$.isactive) {
      return $p$$;
    }
    var $pp$$ = $.Deferred();
    $p$$.then(function($cf$$) {
      var $i$$, $cr$$ = [];
      if ($cf$$.crit.lethal && 2 >= this.hull + this.shield && $cf$$.face == FACEUP || 1 == this.hull + this.shield) {
        for ($i$$ = 0;$i$$ < this.upgrades.length;$i$$++) {
          var $upg$$ = this.upgrades[$i$$];
          $upg$$.type == CREW && $upg$$ != $crew$$ && $upg$$.isactive && $cr$$.push($upg$$);
        }
        $cr$$.push($crew$$);
        $cr$$[0].desactivate();
        this.log("discard %0 to remove critical %1 [%2]", $cr$$[0].name, $c$$.name, $crew$$.name);
        $pp$$.resolve({crit:$cf$$.crit, face:FACEDOWN});
        return !1;
      }
      $pp$$.resolve($cf$$);
    }.bind(this));
    return $pp$$.promise();
  });
}}, {name:"Ion Torpedoes", requires:"Target", consumes:!0, type:TORPEDO, firesnd:"missile", done:!0, prehit:function($r$jscomp$49_t$$, $c$jscomp$62_i$$, $h$$) {
  $r$jscomp$49_t$$.addiontoken();
  $r$jscomp$49_t$$ = $r$jscomp$49_t$$.getrangeallunits();
  for ($c$jscomp$62_i$$ = 0;$c$jscomp$62_i$$ < $r$jscomp$49_t$$[1].length;$c$jscomp$62_i$$++) {
    squadron[$r$jscomp$49_t$$[1][$c$jscomp$62_i$$].unit].log("+1 ion token [%0]", this.name), squadron[$r$jscomp$49_t$$[1][$c$jscomp$62_i$$].unit].addiontoken();
  }
}, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("setpriority", this, function($a$$) {
    "TARGET" == $a$$.type && $self$$.isactive && this.candotarget() && ($a$$.priority += 10);
  });
}, points:5, attack:4, range:[2, 3]}, {name:"Bodyguard", faction:SCUM, unique:!0, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("begincombatphase", this, function() {
    var $p$jscomp$0$$ = this.selectnearbyally(1, function($a$$, $b$$) {
      return $a$$.getskill() < $b$$.getskill();
    });
    this.canusefocus() && this.selectunit($p$jscomp$0$$, function($p$$, $k$$) {
      $p$$[$k$$].wrap_after("getagility", $self$$, function($a$$) {
        return $a$$ + 1;
      }).unwrapper("endcombatphase");
      this.removefocustoken();
    }, ["select unit (or self to cancel) [%0]", $self$$.name], !0);
  });
}, type:ELITE, points:2}, {name:"Calculation", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return this.canusefocus() && $self$$.isactive;
  }.bind($sh$$), aiactivate:function($m$$, $n$$) {
    return FCH_focus($m$$);
  }, f:function($m$$, $n$$) {
    var $f$$ = FCH_focus($m$$);
    this.removefocustoken();
    displayattacktokens(this);
    return 0 < $f$$ ? (this.log("1 %FOCUS% -> 1 %CRIT% [%0]", $self$$.name), $m$$ - FCH_FOCUS + FCH_CRIT) : $m$$;
  }.bind($sh$$), str:"focus"});
}, type:ELITE, points:1}, {name:"Accuracy Corrector", init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("modifyattackroll", this, function($d$$, $m$$, $n$$, $m2$$) {
    return 2 > FCH_hit($m2$$) + FCH_crit($m2$$) ? 2 * FCH_HIT : $m2$$;
  });
  $sh$$.adddicemodifier(ATTACK_M, ADD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return $self$$.isactive;
  }, aiactivate:function($m$$, $n$$) {
    return 2 > FCH_hit($m$$) + FCH_crit($m$$);
  }, f:function($m$$, $n$$) {
    this.log("replace all dice by 2 %HIT% [%0]", $self$$.name);
    return {m:2, n:2};
  }.bind($sh$$), str:"hit"});
}, done:!0, type:SYSTEM, points:3}, {name:"Inertial Dampeners", done:!0, init:function($sh$$) {
  var $upg$$ = this;
  $sh$$.wrap_after("updateactivationdial", this, function() {
    this.addactivationdial(function() {
      return !this.hasmoved && $upg$$.isactive && !this.hasionizationeffect();
    }.bind(this), function() {
      $upg$$.desactivate();
      this.addstress();
      this.wrap_after("getmaneuver", $upg$$, function($m$$) {
        return {move:"F0", difficulty:"WHITE"};
      }).unwrapper("endactivationphase");
      this.show();
    }.bind(this), A[ILLICIT.toUpperCase()].key, $("<div>").attr({"class":"symbols"}));
    return this.activationdial;
  });
}, type:ILLICIT, points:1}, {name:"Tractor Beam", type:CANNON, points:1, attack:3, done:!0, modifyhit:function($ch$$) {
  return 0;
}, prehit:function($t$$, $c$$, $h$$) {
  this.unit.hitresolved = 0;
  this.unit.criticalresolved = 0;
  $t$$.log("+1 tractor beam token [%0]", this.name);
  $t$$.addtractorbeam(this.unit);
}, range:[1, 3]}, {name:"Flechette Cannon", type:CANNON, firesnd:"slave_fire", done:!0, modifyhit:function($ch$$) {
  return FCH_HIT;
}, prehit:function($t$$, $c$$, $h$$) {
  this.unit.hitresolved = 1;
  this.unit.criticalresolved = 0;
  $t$$.log("+1 %HIT%, +1 %STRESS% [%0]", this.name);
  0 == $t$$.stress && $t$$.addstress();
}, points:2, attack:3, range:[1, 3]}, {name:"'Mangler' Cannon", type:CANNON, firesnd:"slave_fire", points:4, attack:3, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return $sh$$.weapons[$sh$$.activeweapon] == this ? $self$$.isactive : !1;
  }.bind(this), aiactivate:function($m$$, $n$$) {
    return 0 < FCH_hit($m$$);
  }, f:function($m$$, $n$$) {
    return 0 < FCH_hit($m$$) ? (this.log("1 %HIT% -> 1 %CRIT% [%0]", $self$$.name), $m$$ + FCH_CRIT - FCH_HIT) : $m$$;
  }.bind($sh$$), str:"hit"});
}, range:[1, 3]}, {name:"Dead Man's Switch", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("dies", this, function() {
    for (var $r$$ = $sh$$.getrangeallunits(), $i$$ = 0;$i$$ < $r$$[1].length;$i$$++) {
      squadron[$r$$[1][$i$$].unit].log("+%1 %HIT% [%0]", $self$$.name, 1), squadron[$r$$[1][$i$$].unit].applydamage(1);
    }
  });
}, type:ILLICIT, points:2}, {name:"Feedback Array", type:ILLICIT, done:!0, range:[1, 1], isTurret:function() {
  return !0;
}, issecondary:!1, firesnd:"missile", isWeapon:function() {
  return !0;
}, declareattack:function($target$$) {
  this.unit.addhasfired();
  this.unit.resolvehit(1);
  this.unit.addiontoken();
  SOUNDS.explode.play();
  this.unit.log("-1 %HIT%, +1 %ION% [%0]", this.name);
  $target$$.log("-1 %HIT% [%0]", this.name);
  $target$$.resolvehit(1);
  $target$$.checkdead();
  this.unit.checkdead();
  this.unit.hasdamaged = !0;
  return !1;
}, init:function($sh$$) {
  this.toString = Upgrade.prototype.toString;
}, points:2}, {name:"'Hot Shot' Blaster", done:!0, isWeapon:function() {
  return !0;
}, isTurret:function() {
  return !0;
}, endattack:function($c$$, $h$$) {
  this.desactivate();
}, type:ILLICIT, firesnd:"xwing_fire", points:3, attack:3, range:[1, 2]}, {name:"Greedo", faction:SCUM, unique:!0, done:!0, type:CREW, init:function($sh$$) {
  $sh$$.greedoa = -1;
  $sh$$.greedod = -1;
  var $self$$ = this;
  $sh$$.wrap_before("hashit", $self$$, function($t$$, $r$$) {
    $self$$.unit.greedoa < round && $t$$.wrap_after("deal", $self$$, function($crit$$, $face$$, $p$$) {
      return $self$$.unit.greedoa < round ? ($self$$.unit.greedoa = round, this.log("first damage is a faceup damage [%0]", $self$$.name), dd = $.Deferred(), dd.resolve({crit:$crit$$, face:FACEUP}).promise()) : $p$$;
    }).unwrapper("endbeingattacked");
    return $r$$;
  });
  $sh$$.wrap_after("resolveishit", $self$$, function() {
    this.greedod < round && this.wrap_after("deal", $self$$, function($crit$$, $face$$, $p$$) {
      return this.greedod < round ? (this.greedod = round, this.log("first damage is a faceup damage [%0]", $self$$.name), dd = $.Deferred(), dd.resolve({crit:$crit$$, face:FACEUP}).promise()) : $p$$;
    }).unwrapper("endbeingattacked");
  });
}, points:1}, {name:"Salvaged Astromech", type:SALVAGED, done:!0, points:2, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("deal", this, function($c$$, $f$$, $p$$) {
    if (!$self$$.isactive) {
      return $p$$;
    }
    var $pp$$ = $.Deferred();
    $p$$.then(function($cf$$) {
      "ship" == $cf$$.crit.type && $cf$$.face == FACEUP ? ($self$$.desactivate(), this.log("remove critical %0 [%1]", $cf$$.crit.name, $self$$.name), $pp$$.resolve({crit:$cf$$.crit, face:DISCARD})) : $pp$$.resolve($cf$$);
    }.bind(this));
    return $pp$$.promise();
  });
}}, {name:"Bomb Loadout", upgrades:[BOMB], done:!0, firesnd:"missile", isWeapon:function() {
  return !1;
}, limited:!0, type:TORPEDO, points:0, ship:"Y-Wing"}, {name:"'Genius'", unique:!0, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("handledifficulty", this, function($d$jscomp$30_p$$) {
    $d$jscomp$30_p$$ = [];
    if (this.lastdrop != round) {
      for (var $i$$ = 0;$i$$ < this.bombs.length;$i$$++) {
        var $b$$ = this.bombs[$i$$];
        "undefined" == typeof $b$$.action && $b$$.isactive && $d$jscomp$30_p$$.push({type:"BOMB", name:$b$$.name, org:$self$$, action:function($n$$) {
          this.actiondrop($n$$);
        }.bind($b$$)});
      }
      this.donoaction($d$jscomp$30_p$$, "", !0);
    }
  });
}, type:SALVAGED, points:0}, {name:"Unhinged Astromech", type:SALVAGED, done:!0, install:function($sh$$) {
  var $save$$ = [];
  $sh$$.installed = !0;
  $sh$$.wrap_after("getdial", this, function($gd$$) {
    if (0 == $save$$.length) {
      for (var $i$$ = 0;$i$$ < $gd$$.length;$i$$++) {
        var $d$$ = $gd$$[$i$$].difficulty, $move$$ = $gd$$[$i$$].move;
        $move$$.match(/[A-Z]+3/) && ($d$$ = "GREEN");
        $save$$[$i$$] = {move:$move$$, difficulty:$d$$};
      }
    }
    return $save$$;
  });
}, uninstall:function($sh$$) {
  "function" == typeof $sh$$.getdial.unwrap && $sh$$.getdial.unwrap(this);
}, points:1}, {name:"R4-B11", unique:!0, type:SALVAGED, points:3, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, DEFENSE_M, this, {req:function($m$$, $n$$) {
    return -1 < this.targeting.indexOf(targetunit);
  }.bind($sh$$), f:function($m$$, $n$$) {
    var $e$$ = FE_evade($m$$), $f$$ = FE_focus($m$$);
    targetunit.canusefocus() || ($f$$ = 0);
    this.removetarget(targetunit);
    if (0 < $e$$ + $f$$) {
      targetunit.log("Reroll %0 %EVADE%, %1 %FOCUS% [%2]", $e$$, $f$$, $self$$.name);
      var $roll$$ = targetunit.rolldefensedie($f$$, $self$$, "evade");
      $m$$ -= FE_EVADE * $e$$ + FE_FOCUS * $f$$;
      for (var $i$$ = 0;$i$$ < $f$$ + $e$$;$i$$++) {
        "evade" == $roll$$[$i$$] && ($m$$ += FE_EVADE), "focus" == $roll$$[$i$$] && ($m$$ += FE_FOCUS);
      }
    }
    return $m$$;
  }.bind($sh$$), str:"target"});
}}, {name:"Autoblaster Turret", type:TURRET, firesnd:"falcon_fire", done:!0, points:2, attack:2, declareattack:function($target$$) {
  var $self$$ = this;
  $target$$.wrap_after("cancelhit", $self$$, function($r$$, $org$$, $r2$$) {
    $self$$.unit.log("%HIT% cannot be cancelled [%0]", $self$$.name);
    return $r$$;
  }).unwrapper("afterdefenseeffect");
  return Weapon.prototype.declareattack.call(this, $target$$);
}, range:[1, 1]}, {name:"R4 Agromech", done:!0, init:function($sh$$) {
  var $self$$ = this;
  this.spendfocus = !1;
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return $self$$.spendfocus;
  }.bind($sh$$), f:function($m$$, $n$$) {
    $self$$.spendfocus = !1;
    this.addtarget(targetunit);
    this.log("+1 %TARGET% / %1 [%0]", $self$$.name, targetunit.name);
    displayattacktokens2(this);
    return $m$$;
  }.bind($sh$$), str:"target"});
  $sh$$.wrap_before("resolveattack", this, function($w$$, $target$$) {
    $self$$.spendfocus = !1;
    this.wrap_before("removefocustoken", $self$$, function() {
      $self$$.spendfocus = !0;
      displayattacktokens2(this);
      this.log("+1 %TARGET% / %1 [%0]", $self$$.name, $target$$.name);
    }).unwrapper("endattack");
  });
}, type:SALVAGED, points:2}, {name:"K4 Security Droid", faction:SCUM, type:CREW, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("handledifficulty", this, function($d$$) {
    "GREEN" == $d$$ && this.selectunit(this.gettargetableunits(3), function($p$$, $k$$) {
      this.addtarget($p$$[$k$$]);
      this.log("+1 %TARGET% / %1 [%0]", $self$$.name, $p$$[$k$$].name);
    }, ["select unit (or self to cancel) [%0]", $self$$.name], !0);
  });
}, points:3}, {name:"Outlaw Tech", faction:SCUM, beta:!0, limited:!0, done:!0, type:CREW, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("handledifficulty", this, function($d$$) {
    "RED" == $d$$ && ($sh$$.log("+1 %FOCUS% [%0]", $self$$.name), $sh$$.addfocustoken());
  });
}, points:2}, {name:"Advanced Targeting Computer", type:SYSTEM, points:5, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, ADD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return -1 < this.targeting.indexOf(targetunit) && 1 == $self$$.isactive;
  }.bind($sh$$), f:function($m$$, $n$$) {
    return -1 < this.targeting.indexOf(targetunit) ? (this.log("+1 %CRIT% [%0]", $self$$.name), $("#atokens > .xtargettoken").remove(), {m:$m$$ + 10, n:$n$$ + 1}) : {m:$m$$, n:$n$$};
  }.bind($sh$$), str:"critical"});
}, ship:"TIE Advanced", done:!0}, {name:"Stealth Device", type:MOD, done:!0, install:function($sh$$) {
  $sh$$.wrap_after("getagility", this, function($a$$) {
    return $a$$ + 1;
  });
  $sh$$.showstats();
}, uninstall:function($sh$$) {
  "function" == typeof $sh$$.getagility.unwrap && $sh$$.getagility.unwrap(this);
  $sh$$.showstats();
}, init:function($sh$$) {
  var $upg$$ = this;
  $sh$$.log("+1 agility [%0]", $upg$$.name);
  $sh$$.wrap_before("resolveishit", this, function($t$$) {
    $upg$$.isactive && ($upg$$.uninstall(this), $upg$$.desactivate(), this.log("%0 is hit => destroyed", $upg$$.name), this.show());
  });
}, points:3}, {name:"Shield Upgrade", type:MOD, done:!0, install:function($sh$$) {
  $sh$$.shield++;
  $sh$$.ship.shield++;
  $sh$$.installed = !0;
  $sh$$.showstats();
}, points:4}, {name:"Engine Upgrade", type:MOD, done:!0, addedaction:"Boost", points:4}, {name:"Anti-Pursuit Lasers", type:MOD, islarge:!0, done:!0, points:2, init:function($sh$$) {
  var $upg$$ = this;
  $sh$$.wrap_before("collidedby", this, function($t$$) {
    if ($upg$$.isactive && $t$$.isenemy(this)) {
      var $roll$$ = this.rollattackdie(1, $upg$$, "hit")[0];
      "hit" == $roll$$ || "critical" == $roll$$ ? ($t$$.log("+%1 %HIT% [%0]", $upg$$.name, 1), $t$$.resolvehit(1), $t$$.checkdead()) : $t$$.log("no effect [%0]", $upg$$.name);
    }
  });
}}, {name:"Targeting Computer", type:MOD, done:!0, addedaction:"Target", points:2}, {name:"Hull Upgrade", type:MOD, done:!0, install:function($sh$$) {
  $sh$$.hull++;
  $sh$$.ship.hull++;
  $sh$$.installed = !0;
  $sh$$.showstats();
}, points:3}, {name:"Munitions Failsafe", type:MOD, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.addafterattackeffect(this, function($c$$, $h$$) {
    this.weapons[this.activeweapon].isprimary || 0 != $c$$ + $h$$ || (this.log("%0 still active [%1]", this.weapons[this.activeweapon].name, $self$$.name), this.weapons[this.activeweapon].isactive = !0, this.show());
  });
}, done:!0, points:1}, {name:"Stygium Particle Accelerator", type:MOD, done:!0, init:function($sh$$) {
  $sh$$.wrap_after("resolvedecloak", this, function() {
    this.candoevade() && this.doaction([this.newaction(this.addevade, "EVADE")], "Stygium P.A.: +1 %EVADE%");
    return !0;
  });
  $sh$$.wrap_after("addcloak", this, function($n$$) {
    this.candoevade() && this.doaction([this.newaction(this.addevade, "EVADE")], "Stygium P.A.: +1 %EVADE%");
  });
}, points:2}, {name:"Advanced Cloaking Device", type:MOD, points:4, done:!0, init:function($sh$$) {
  var $upg$$ = this;
  $sh$$.addafterattackeffect(this, function() {
    this.candoaction() && this.candocloak() && this.doaction([this.newaction(this.addcloak, "CLOAK")], $upg$$.name + ": free cloack action");
  });
}, ship:"TIE Phantom"}, {name:"B-Wing/E2", type:MOD, done:!0, upgrades:[CREW], points:1, ship:"B-Wing", install:function($sh$$) {
  $sh$$.shipimg = "b-wing-1.png";
}, uninstall:function($sh$$) {
  $sh$$.shipimg = "b-wing-2.png";
}}, {name:"Countermeasures", type:MOD, islarge:!0, done:!0, init:function($sh$$) {
  var $mod$$ = this;
  $sh$$.wrap_before("begincombatphase", this, function() {
    $mod$$.isactive && this.donoaction([{action:function($n$$) {
      $mod$$.desactivate();
      this.wrap_after("getagility", $mod$$, function($a$$) {
        return $a$$ + 1;
      }).unwrapper("endphase");
      0 < this.istargeted.length ? (this.log("select a lock to remove [%0]", $mod$$.name), this.resolveactionselection(this.istargeted, function($k$$) {
        this.istargeted[$k$$].removetarget(this);
        this.endnoaction($n$$, "MOD");
      }.bind(this))) : this.endnoaction($n$$, "MOD");
    }.bind(this), type:$mod$$.type.toUpperCase(), name:$mod$$.name}], "", !0);
  });
}, points:3}, {name:"Experimental Interface", type:MOD, unique:!0, points:3, init:function($sh$$) {
  var $upg$$ = this;
  $upg$$.r = -1;
  $sh$$.wrap_before("endaction", this, function($n$$, $type$$) {
    $upg$$.r != round && this.candoaction() && null != $type$$ && ($upg$$.r = round, this.doaction(this.getupgactionlist(), "+1 free action (Skip to cancel)").done(function($type2$$) {
      null == $type2$$ ? $upg$$.r = -1 : this.addafteractions(function() {
        this.addstress();
      }.bind(this));
    }.bind(this)));
  });
}, done:!0}, {name:"Tactical Jammer", type:MOD, islarge:!0, points:1, done:!0, init:function($sh$$) {
  var $self$$ = this;
  Unit.prototype.wrap_after("getobstructiondef", this, function($t$$, $ob$$) {
    !$self$$.unit.dead && this.isenemy($sh$$) && 0 == $ob$$ && (OBSTACLES.push($sh$$), $ob$$ = this.getoutlinerange(this.m, $t$$).o ? 1 : 0, OBSTACLES.splice(OBSTACLES.indexOf($sh$$), 1), 1 == $ob$$ && this.log("fire obstructed by %0", $sh$$.name));
    return $ob$$;
  });
}}, {name:"Autothrusters", type:MOD, actionrequired:"Boost", points:2, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("modifydefenseroll", this, function($attacker$$, $m$$, $n$$, $ch$$) {
    2 < $attacker$$.getsector(this) && 0 < FE_blank($ch$$, $n$$) && ($ch$$ += FE_EVADE);
    return $ch$$;
  });
  $sh$$.adddicemodifier(DEFENSE_M, MOD_M, DEFENSE_M, this, {req:function($m$$, $n$$) {
    return 2 < activeunit.getsector(this) ? $self$$.isactive : !1;
  }.bind($sh$$), f:function($m$$, $n$$) {
    0 < FE_blank($m$$, $n$$) && (this.log("1 blank -> 1 %EVADE% [%0]", $self$$.name), $m$$ += FE_EVADE);
    return $m$$;
  }.bind($sh$$), str:"blank"});
}}, {name:"Slave I", type:TITLE, unique:!0, points:0, done:!0, ship:"Firespray-31", upgrades:[TORPEDO]}, {name:"Millennium Falcon", type:TITLE, done:!0, addedaction:"Evade", unique:!0, points:1, ship:"YT-1300"}, {name:"Moldy Crow", type:TITLE, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("resetfocus", this, function() {
    0 < this.focus && this.log("keep %FOCUS% tokens [%0]", $self$$.name);
    return this.focus;
  });
}, unique:!0, done:!0, points:3, ship:"HWK-290"}, {name:"ST-321", type:TITLE, done:!0, init:function($sh$$) {
  $sh$$.wrap_after("gettargetableunits", this, function($n$jscomp$239_p$$) {
    $n$jscomp$239_p$$ = [];
    for (i in squadron) {
      squadron[i].isenemy(this) && $n$jscomp$239_p$$.push(squadron[i]);
    }
    return $n$jscomp$239_p$$;
  });
}, unique:!0, points:3, ship:"Lambda-Class Shuttle"}, {name:"Royal Guard TIE", type:TITLE, done:!0, upgrades:[MOD], skillmin:5, points:0, install:function($sh$$) {
  $sh$$.shipimg = "tie-interceptor-1.png";
}, uninstall:function($sh$$) {
  $sh$$.shipimg = "tie-interceptor-2.png";
}, ship:"TIE Interceptor"}, {name:"A-Wing Test Pilot", type:TITLE, done:!0, upgrades:[ELITE], skillmin:2, points:0, ship:"A-Wing", exclusive:!0, install:function($sh$$) {
  $sh$$.shipimg = "a-wing-1.png";
}, uninstall:function($sh$$) {
  $sh$$.shipimg = "a-wing-2.png";
}}, {name:"Outrider", type:TITLE, done:!0, init:function($sh$$) {
  var $i$$;
  for ($i$$ = 0;$i$$ < $sh$$.weapons.length;$i$$++) {
    if ($sh$$.weapons[$i$$].type == CANNON) {
      $sh$$.weapons[0].desactivate();
      $sh$$.log("primary weapon inactive [%0]", this.name);
      $sh$$.weapons[$i$$].isTurret = function $$sh$$$weapons$$i$$$isTurret$() {
        return !0;
      };
      $sh$$.log("%0 can fire in 360 degrees [%0]", $sh$$.weapons[$i$$].name, this.name);
      break;
    }
  }
}, unique:!0, points:5, ship:"YT-2400"}, {name:"Dauntless", type:TITLE, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("doendmaneuveraction", this, function() {
    this.candoaction() && this.collision && (this.log("+1 free action [%0]", $self$$.name), this.doaction(this.getactionlist(), "").done(function($t$$) {
      null != $t$$ && this.addstress();
    }.bind(this)));
  });
}, unique:!0, points:2, ship:"VT-49 Decimator"}, {name:"Virago", type:TITLE, done:!0, upgrades:[ILLICIT, SYSTEM], unique:!0, points:1, skillmin:4, ship:"StarViper"}, {name:"'Heavy Scyk' Interceptor", done:!0, upgrades:["Cannon|Torpedo|Missile"], type:TITLE, install:function($sh$$) {
  $sh$$.hull++;
  $sh$$.ship.hull++;
  $sh$$.installed = !0;
  $sh$$.showstats();
}, points:2, ship:"M3-A Interceptor"}, {name:"IG-2000", type:TITLE, done:!0, install:function($sh$$) {
  $sh$$.ig2000 = !0;
}, uninstall:function($sh$$) {
  $sh$$.ig2000 = !1;
}, init:function($sh$$) {
  for (var $i$$ in squadron) {
    var $u$$ = squadron[$i$$];
    $u$$ != $sh$$ && 1 == $u$$.ig2000 && $u$$.isally($sh$$) && ($sh$$.log("copying %0 abilities [%1]", $u$$.name, this.name), $u$$.init.call($sh$$, $u$$));
  }
}, points:0, ship:"Aggressor"}, {name:"BTL-A4 Y-Wing", type:TITLE, done:!0, init:function($sh$$) {
  for (var $turret$$ = [], $i$$ = 0;$i$$ < $sh$$.weapons.length;$i$$++) {
    var $w$jscomp$0$$ = $sh$$.weapons[$i$$];
    $w$jscomp$0$$.type == TURRET && 0 == $w$jscomp$0$$.isprimary && ($turret$$.push($w$jscomp$0$$), $w$jscomp$0$$.wrap_after("isTurret", this, function() {
      return !1;
    }));
  }
  0 != $turret$$.length && ($sh$$.wrap_after("isTurret", this, function($w$$, $b$$) {
    return !1;
  }), $sh$$.addattack(function($c$$, $h$$) {
    return this.weapons[this.activeweapon].isprimary;
  }, this, $turret$$));
}, points:0, ship:"Y-Wing"}, {name:"Andrasta", type:TITLE, done:!0, upgrades:[BOMB, BOMB], unique:!0, points:0, ship:"Firespray-31"}, {name:"TIE/x1", type:TITLE, done:!0, upgrades:[SYSTEM], pointsupg:-4, points:0, ship:"TIE Advanced"}, {name:"Emperor Palpatine", type:CREW, unique:!0, takesdouble:!0, done:!0, points:8, faction:EMPIRE, init:function() {
  var $self$$ = this;
  $self$$.unit.emperor = -1;
  var $replace$$ = function $$replace$$$($i$jscomp$214_n$$, $org$$, $best$$, $tab$$) {
    if ($self$$.unit.isally(this) && !$self$$.unit.dead && "undefined" != typeof $best$$ && $self$$.unit.emperor < round) {
      for ($i$jscomp$214_n$$ = 0;$i$jscomp$214_n$$ < $tab$$.length && $tab$$[$i$jscomp$214_n$$] == $best$$;$i$jscomp$214_n$$++) {
      }
      $i$jscomp$214_n$$ < $tab$$.length && confirm("Emperor Palpatine effect\n" + $org$$.name + ": " + $tab$$[0] + " die -> " + $best$$ + " die ?") && ($self$$.unit.log("%0 -> %1 [%2]", $tab$$[$i$jscomp$214_n$$], $best$$, $self$$.name), $tab$$[$i$jscomp$214_n$$] = $best$$, $self$$.unit.emperor = round);
    }
    return "undefined" != typeof $best$$ ? $tab$$ : $org$$;
  };
  Unit.prototype.wrap_after("rollattackdie", $self$$, $replace$$);
  Unit.prototype.wrap_after("rolldefensedie", $self$$, $replace$$);
  Unit.prototype.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return $self$$.unit.emperor < round && activeunit.isally($self$$.unit);
  }, f:function($m$$, $n$$) {
    $self$$.unit.emperor = round;
    var $f$$ = FCH_focus($m$$), $b$$ = FCH_blank($m$$, $n$$), $h$$ = FCH_hit($m$$);
    0 < $b$$ ? (activeunit.log("blank -> %CRIT% [%0]", $self$$.name), $m$$ += FCH_CRIT, $self$$.round = round) : 0 < $f$$ ? (activeunit.log("%FOCUS% -> %CRIT% [%0]", $self$$.name), $m$$ = $m$$ - FCH_FOCUS + FCH_CRIT) : 0 < $h$$ && (activeunit.log("%HIT% -> %CRIT% [%0]", $self$$.name), $m$$ = $m$$ - FCH_HIT + FCH_CRIT);
    return $m$$;
  }, str:"crew"});
  Unit.prototype.adddicemodifier(DEFENSE_M, MOD_M, DEFENSE_M, this, {req:function($m$$, $n$$) {
    return !$self$$.unit.dead && targetunit.isally($self$$.unit) && $self$$.unit.emperor < round;
  }, f:function($m$$, $n$$) {
    $self$$.unit.emperor = round;
    var $f$$ = FE_focus($m$$);
    0 < FE_blank($m$$, $n$$) ? (targetunit.log("blank -> %EVADE% [%0]", $self$$.name), $m$$ += FE_EVADE) : 0 < $f$$ && (targetunit.log("%FOCUS% -> %EVADE% [%0]", $self$$.name), $m$$ = $m$$ + FE_EVADE - FE_FOCUS);
    return $m$$;
  }, str:"crew"});
}}, {name:"Extra Munitions", type:TORPEDO, limited:!0, firesnd:"missile", isWeapon:function() {
  return !1;
}, points:2, done:!0, init:function($sh$$) {
  for (var $i$$ = 0;$i$$ < $sh$$.upgrades.length;$i$$++) {
    var $u$$ = $sh$$.upgrades[$i$$];
    $u$$.type.match(/Missile|Torpedo|Bomb/) && ($u$$.ordnance = !0);
  }
}}, {name:"Cluster Mines", type:BOMB, snd:"explode", img:"cluster.png", width:15, height:10, repeatx:42, size:22, stay:!0, done:!0, getOutlineStringsmall:function($m$$) {
  var $s$$ = "M ";
  this.op = [];
  "undefined" == typeof $m$$ && ($m$$ = this.m);
  for (var $i$$ = 0;20 > $i$$;$i$$++) {
    var $p$$ = transformPoint($m$$, {x:this.size * Math.sin(2 * $i$$ * Math.PI / 20), y:this.size * Math.cos(2 * $i$$ * Math.PI / 20)});
    this.op.push($p$$);
    $s$$ += $p$$.x + " " + $p$$.y + " ";
    0 == $i$$ && ($s$$ += "L ");
  }
  return {s:$s$$ + "Z", p:this.op};
}, candoaction:function() {
  return this.unit.lastdrop != round && this.isactive;
}, action:function($n$$) {
  this.actiondrop($n$$);
}, canbedropped:function() {
  return !1;
}, explode:function() {
}, detonate:function($t$$) {
  if (!this.exploded) {
    for (var $roll$$ = this.unit.rollattackdie(2, this, "hit"), $i$$ = 0;2 > $i$$;$i$$++) {
      "hit" == $roll$$[$i$$] && ($t$$.log("+1 %HIT% [%0]", this.name), $t$$.resolvehit(1), $t$$.checkdead());
    }
    Bomb.prototype.detonate.call(this);
  }
}, display:function($x$$, $y$$) {
  this.getOutlineString = this.getOutlineStringsmall;
  var $b1$$ = $.extend({}, this), $b2$$ = $.extend({}, this);
  Bomb.prototype.display.call($b1$$, this.repeatx, 0);
  Bomb.prototype.display.call($b2$$, -this.repeatx, 0);
  Bomb.prototype.display.call(this, 0, 0);
}, init:function($p$jscomp$133_u$$) {
  $p$jscomp$133_u$$ = s.path("M41.844,-21 C54.632,-21 65,-11.15 65,1 C65,13.15 54.632,23 41.844,23 C33.853,22.912 25.752,18.903 21.904,12.169 C17.975,18.963 10.014,22.806 1.964,23 C-7.439,22.934 -14.635,18.059 -18.94,10.466 C-22.908,18.116 -30.804,22.783 -39.845,23 C-52.633,23 -63,13.15 -63,1 C-63,-11.15 -52.633,-21 -39.845,-21 C-30.441,-20.935 -23.246,-16.06 -18.94,-8.466 C-14.972,-16.116 -7.076,-20.783 1.964,-21 C9.956,-20.913 18.055,-16.902 21.904,-10.17 C25.832,-16.964 33.795,-20.807 41.844,-21 z").attr({display:"none"});
  var $l$$ = $p$jscomp$133_u$$.getTotalLength();
  this.op0 = [];
  for (var $i$$ = 0;60 > $i$$;$i$$++) {
    this.op0[$i$$] = $p$jscomp$133_u$$.getPointAtLength($i$$ * $l$$ / 60);
  }
}, getOutlineString:function($m$$) {
  var $s$$ = "M ";
  this.op = [];
  "undefined" == typeof $m$$ && ($m$$ = this.m);
  for (var $i$$ = 0;60 > $i$$;$i$$++) {
    var $p$$ = transformPoint($m$$, this.op0[$i$$]);
    this.op.push($p$$);
    $s$$ += $p$$.x + " " + $p$$.y + " ";
    0 == $i$$ && ($s$$ += "L ");
  }
  return {s:$s$$ + "Z", p:this.op};
}, points:4}, {name:"Glitterstim", type:ILLICIT, points:2, activated:-1, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.glitter = -1;
  $sh$$.wrap_after("begincombatphase", this, function($lock$$) {
    $self$$.isactive && this.donoaction([{org:$self$$, name:$self$$.name, type:"ILLICIT", action:function($n$$) {
      this.addstress();
      this.glitter = round;
      this.endnoaction($n$$, "ILLICIT");
    }.bind(this)}], "", !0);
    return $lock$$;
  });
  $sh$$.wrap_before("endphase", this, function() {
    this.glitter == round && $self$$.desactivate();
  });
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return this.glitter == round && $self$$.isactive;
  }.bind($sh$$), f:function($m$$, $n$$) {
    var $f$$ = FCH_focus($m$$);
    0 < $f$$ && (this.log("%1 %FOCUS% -> %1 %HIT% [%0]", $self$$.name, $f$$), $m$$ = $m$$ - FCH_FOCUS * $f$$ + $f$$ * FCH_HIT);
    return $m$$;
  }.bind($sh$$), str:"focus", noreroll:"focus"});
  $sh$$.adddicemodifier(DEFENSE_M, MOD_M, DEFENSE_M, this, {req:function($m$$, $n$$) {
    return this.glitter == round && $self$$.isactive;
  }.bind($sh$$), f:function($m$$, $n$$) {
    var $f$$ = FE_focus($m$$);
    0 < $f$$ && (this.log("%1 %FOCUS% -> %1 %EVADE% [%0]", $self$$.name, $f$$), $m$$ = $m$$ - FE_FOCUS * $f$$ + FE_EVADE * $f$$);
    return $m$$;
  }.bind($sh$$), str:"focus", noreroll:"focus"});
}}, {name:"Cloaking Device", type:ILLICIT, islarge:!1, points:2, candoaction:function() {
  return this.isactive && !this.unit.iscloaked;
}, action:function($n$$) {
  var $self$$ = this.unit;
  $self$$.log("cloaked [%0]", this.name);
  $self$$.addcloak($n$$);
}, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("endphase", this, function() {
    $self$$.isactive && ("focus" == this.rollattackdie(1, $self$$, "blank")[0] && this.iscloaked && 1 == $self$$.isactive ? (this.log("%0 failed -> decloaking", $self$$.name), this.resolvedecloak(!0), $self$$.desactivate()) : this.log("%0 still working", $self$$.name));
  });
}}, {name:"Bossk", unique:!0, faction:SCUM, type:CREW, points:2, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("hashit", this, function($t$$, $b$$) {
    $b$$ || (this.log("+1 stress, +1 %FOCUS%, +1 %TARGET% [%0]", $self$$.name), 0 == this.stress && this.addstress(), -1 < this.gettargetableunits(3).indexOf($t$$) ? this.addtarget($t$$) : this.log("no valid target [%0]", $self$$.name), this.addfocustoken());
    return $b$$;
  });
}}, {name:"Wired", type:ELITE, init:function($sh$$) {
  var $self$$ = this, $req$$ = function() {
    return 0 < this.stress ? (this.log("+%1 %FOCUS% reroll(s) [%0]", $self$$.name, this.focus), $self$$.isactive) : !1;
  }.bind($sh$$);
  $sh$$.adddicemodifier(ATTACK_M, REROLL_M, ATTACK_M, this, {dice:["focus"], n:function() {
    return 9;
  }, req:$req$$});
  $sh$$.adddicemodifier(DEFENSE_M, REROLL_M, DEFENSE_M, this, {dice:["focus"], n:function() {
    return 9;
  }, req:$req$$});
}, done:!0, points:1}, {name:"Cool Hand", type:ELITE, points:1, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("addstress", this, function() {
    $self$$.isactive && this.donoaction([{type:"FOCUS", name:$self$$.name, org:$self$$, action:function($n$$) {
      $self$$.desactivate();
      this.addfocustoken();
      this.endnoaction($n$$, "ELITE");
    }.bind(this)}, {type:"EVADE", name:$self$$.name, org:$self$$, action:function($n$$) {
      $self$$.desactivate();
      this.addevadetoken();
      this.endnoaction($n$$, "ELITE");
    }.bind(this)}], "Add %EVADE% or %FOCUS% instead of %STRESS% token", !0);
  });
}}, {name:"Juke", type:ELITE, points:2, islarge:!1, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, DEFENSE_M, this, {req:function() {
    return 0 < $self$$.unit.evade;
  }, f:function($m$$, $n$$) {
    0 < FE_evade($m$$) && (targetunit.log("%EVADE% -> %FOCUS% [%0]", $self$$.name), $m$$ = $m$$ - FE_EVADE + FE_FOCUS);
    return $m$$;
  }, str:"evade"});
  $sh$$.wrap_after("setpriority", this, function($a$$) {
    "EVADE" == $a$$.type && 0 == this.evade && ($a$$.priority = 10);
  });
}}, {name:"Lightning Reflexes", type:ELITE, points:1, done:!0, init:function($sh$$) {
  var $u$$ = this;
  $sh$$.wrap_after("handledifficulty", this, function($d$$) {
    "WHITE" != $d$$ && "GREEN" != $d$$ || !$u$$.isactive || this.donoaction([{type:"ELITE", name:$u$$.name, org:$u$$, action:function($n$$) {
      $u$$.desactivate();
      this.addstress(1);
      this.m = this.m.rotate(180, 0, 0);
      this.show();
      this.endnoaction($n$$, ELITE);
    }.bind(this)}], "", !0);
  });
}, islarge:!1}, {name:"Twin Laser Turret", type:TURRET, firesnd:"falcon_fire", points:6, done:!0, attack:3, range:[2, 3], followupattack:function() {
  return this.unit.weapons.indexOf(this);
}, modifyhit:function($ch$$) {
  return FCH_HIT;
}, prehit:function($target$$, $c$$, $h$$) {
  this.unit.hitresolved = 1;
  this.unit.criticalresolved = 0;
  $target$$.log("+%1 %HIT% [%0]", this.name, 1);
}, hasdoubleattack:function() {
  return this.twinattack = !this.twinattack;
}, init:function($sh$$) {
  this.twinattack = !1;
}}, {name:"Plasma Torpedoes", type:TORPEDO, points:3, attack:4, firesnd:"missile", requires:"Target", consumes:!0, done:!0, posthit:function($t$$, $c$$, $h$$) {
  0 < $t$$.shield && $t$$.log("-1 %SHIELD% [%0]", this.name);
  $t$$.removeshield(1);
}, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("setpriority", this, function($a$$) {
    "TARGET" == $a$$.type && $self$$.isactive && this.candotarget() && ($a$$.priority += 10);
  });
}, range:[2, 3]}, {name:"Ion Bombs", type:BOMB, points:2, width:14, height:14, size:15, done:!0, snd:"explode", img:"ion.png", explode:function() {
  if (phase == ACTIVATION_PHASE && !this.exploded) {
    for (var $r$$ = this.getrangeallunits(), $i$$ = 0;$i$$ < $r$$[1].length;$i$$++) {
      squadron[$r$$[1][$i$$].unit].addiontoken(), squadron[$r$$[1][$i$$].unit].addiontoken();
    }
    this.explode_base();
  }
}}, {name:"Conner Net", type:BOMB, snd:"explode", img:"conner-net3.png", width:40, height:60, size:40, done:!0, init:function() {
  this.conner = -1;
  var $p$$ = s.path("M-11.379,-0.26 C-11.241,-6.344 -16.969,-14.641 -19.247,-20.448 C-21.524,-26.255 -24.216,-38.147 -20.213,-39.46 C-16.21,-40.774 -8.619,-37.594 2.424,-37.663 C13.466,-37.732 22.162,-41.327 23.68,-39.322 C25.198,-37.317 26.716,-30.404 22.714,-21.278 C18.711,-12.152 14.156,-6.828 14.087,0.293 C14.018,7.414 19.47,15.364 22.3,22.555 C25.129,29.745 25.681,39.908 23.128,41.429 C20.574,42.95 13.673,41.29 4.218,41.29 C-5.237,41.29 -19.316,42.742 -20.903,41.29 C-22.49,39.839 -24.354,34.446 -20.213,23.108 C-16.072,11.769 -11.448,11.424 -11.379,1.606 C-11.322,-6.487 -11.514,5.685 -11.379,-0.26 z").attr({display:"none"}), 
  $l$$ = $p$$.getTotalLength();
  this.op0 = [];
  for (var $i$$ = 0;60 > $i$$;$i$$++) {
    this.op0[$i$$] = $p$$.getPointAtLength($i$$ * $l$$ / 60);
  }
}, getOutlineString:function($m$$) {
  var $s$$ = "M ";
  this.op = [];
  "undefined" == typeof $m$$ && ($m$$ = this.m);
  for (var $i$$ = 0;60 > $i$$;$i$$++) {
    var $p$$ = transformPoint($m$$, this.op0[$i$$]);
    this.op.push($p$$);
    $s$$ += $p$$.x + " " + $p$$.y + " ";
    0 == $i$$ && ($s$$ += "L ");
  }
  return {s:$s$$ + "Z", p:this.op};
}, stay:!0, candoaction:function() {
  return this.unit.lastdrop != round && this.isactive;
}, action:function($n$$) {
  this.actiondrop($n$$);
}, canbedropped:function() {
  return !1;
}, explode:function() {
}, detonate:function($t$$, $immediate$$) {
  var $self$$ = this;
  this.exploded || ($immediate$$ ? $t$$.hasmoved ? ($t$$.log("+1 %HIT%, +2 ion tokens next turn [%0]", $self$$.name), $t$$.wrap_after("beginplanningphase", this, function($l$$) {
    this.resolvehit(1);
    this.checkdead();
    this.log("+2 ion tokens [%0]", $self$$.name);
    this.addiontoken();
    this.addiontoken();
    this.beginplanningphase.unwrap($self$$);
    return $l$$;
  })) : ($t$$.log("%1 skips action phase [%0]", $self$$.name, $t$$.name), $t$$.wrap_after("candoendmaneuveraction", $self$$, function() {
    return !1;
  }).unwrapper("endactivationphase")) : ($t$$.wrap_before("cleanupmaneuver", this, function() {
    $t$$.log("+1 %HIT%, +2 ion tokens [%0]", this.name);
    $t$$.resolvehit(1);
    $t$$.checkdead();
    $t$$.addiontoken();
    $t$$.addiontoken();
    $t$$.log("%1 skips action phase [%0]", this.name, $t$$.name);
  }).unwrapper("endactivationphase"), $t$$.wrap_after("candoendmaneuveraction", this, function() {
    return !1;
  }).unwrapper("endactivationphase")), Bomb.prototype.detonate.call(this, $immediate$$));
}, points:4}, {name:"Bombardier", type:CREW, points:1, done:!0, init:function($sh$$) {
  $sh$$.wrap_after("getbomblocation", this, function($d$$) {
    return -1 < $d$$.indexOf("F1") ? $d$$.concat("F2") : $d$$;
  });
}}, {name:"Agent Kallus", type:CREW, faction:EMPIRE, points:2, done:!0, init:function($sh$$) {
  var $self$$ = this;
  this.unit.nemesis = null;
  $sh$$.wrap_after("beginactivationphase", $self$$, function($l$$) {
    1 == round && this.selectunit(this.selectnearbyenemy(4), function($p$$, $k$$) {
      this.nemesis = $p$$[$k$$];
      this.log("%0 chosen as nemesis [%1]", $p$$[$k$$].name, $self$$.name);
    });
    return $l$$;
  }, ["select unit [%0]", $self$$.name], !1);
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, $self$$, {req:function() {
    return targetunit == this.nemesis;
  }.bind($sh$$), f:function($m$$, $n$$) {
    0 < FCH_focus($m$$) && ($m$$ = $m$$ - FCH_FOCUS + FCH_HIT, this.log("1 %FOCUS% -> 1 %HIT% [%0]", $self$$.name));
    return $m$$;
  }.bind($sh$$), str:"focus"});
  $sh$$.adddicemodifier(DEFENSE_M, MOD_M, DEFENSE_M, $self$$, {req:function() {
    return activeunit == this.nemesis;
  }.bind($sh$$), f:function($m$$, $n$$) {
    0 < FE_focus($m$$) && ($m$$ = $m$$ - FE_FOCUS + FE_EVADE, this.log("1 %FOCUS% -> 1 %EVADE% [%0]", $self$$.name));
    return $m$$;
  }.bind($sh$$), str:"focus"});
}}, {name:"'Crack Shot'", type:ELITE, points:1, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACKCOMPARE_M, MOD_M, DEFENSE_M, this, {req:function() {
    return this.isinfiringarc(targetunit) && $self$$.isactive;
  }.bind($sh$$), aiactivate:function($m$$, $n$$) {
    return 0 < FE_evade($m$$);
  }, f:function($m$$, $n$$) {
    $self$$.desactivate();
    0 < FE_evade($m$$) && ($sh$$.log("-1 %EVADE% [%0]", $self$$.name), $m$$ -= FE_EVADE);
    return $m$$;
  }, str:"evade"});
}}, {name:"Advanced Homing Missiles", type:MISSILE, firesnd:"missile", points:3, requires:"Target", consumes:!1, attack:3, range:[2, 2], done:!0, modifyhit:function($ch$$) {
  return FCH_CRIT;
}, prehit:function($t$$, $c$$, $h$$) {
  $t$$.log("+1 %CRIT% [%0]", this.name);
  $t$$.applycritical(1);
  this.unit.hitresolved = 0;
  this.unit.criticalresolved = 0;
}, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("setpriority", this, function($a$$) {
    "TARGET" == $a$$.type && $self$$.isactive && this.candotarget() && ($a$$.priority += 10);
  });
}}, {name:"Advanced SLAM", type:MOD, done:!0, points:2, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("resolveslam", this, function() {
    this.doaction(this.getactionlist(), "+1 free action (Skip to cancel) [" + $self$$.name + "]");
  });
}}, {name:"Twin Ion Engine Mk. II", type:MOD, points:1, ship:"TIE", done:!0, install:function($sh$$) {
  var $save$$ = [];
  $sh$$.installed = !0;
  $sh$$.wrap_after("getdial", this, function($gd$$) {
    if (0 == $save$$.length) {
      for (var $i$$ = 0;$i$$ < $gd$$.length;$i$$++) {
        var $move$$ = $gd$$[$i$$].move, $d$$ = $gd$$[$i$$].difficulty;
        $move$$.match(/BL\d|BR\d/) && ($d$$ = "GREEN");
        $save$$[$i$$] = {move:$move$$, difficulty:$d$$};
      }
    }
    return $save$$;
  });
}, uninstall:function($sh$$) {
  "function" == typeof $sh$$.getdial.unwrap && $sh$$.getdial.unwrap(this);
}}, {name:"Maneuvering Fins", type:MOD, points:1, ship:"YV-666", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("getmaneuverlist", $self$$, function($list$$) {
    if (this.hasionizationeffect()) {
      return $list$$;
    }
    for (var $i$$ in $list$$) {
      if ($i$$.match(/TR\d|TL\d/)) {
        this.log("change turn into a bank [%0]", $self$$.name);
        var $m$$ = $i$$.replace(/T/, "B");
        $list$$[$m$$] = {move:$m$$, difficulty:$list$$[$i$$].difficulty, halfturn:$list$$[$i$$].halfturn};
      }
    }
    return $list$$;
  }.bind($sh$$));
}}, {name:"Hound's Tooth", points:6, type:TITLE, unique:!0, ship:"YV-666", done:!0, getdeploymentmatrix:function($u$$) {
  for (var $gd$$ = $u$$.getdial(), $p$$ = [], $i$$ = 0;$i$$ < $gd$$.length;$i$$++) {
    var $m0$$ = this.unit.m.clone().translate(0, 20).rotate(180, 0, 0);
    $p$$.push($u$$.getpathmatrix($m0$$, $gd$$[$i$$].move));
  }
  for ($i$$ = 0;$i$$ < $gd$$.length;$i$$++) {
    $m0$$ = this.unit.m.clone().translate(0, -20), $p$$.push($u$$.getpathmatrix($m0$$, $gd$$[$i$$].move));
  }
  return $p$$;
}, init:function($sh$$) {
  var $self$$ = this, $i$$, $found$$ = -1;
  for ($i$$ in squadron) {
    if ("Nashtah Pup Pilot" == squadron[$i$$].name) {
      $found$$ = $i$$;
      break;
    }
  }
  if (-1 < $found$$) {
    p = squadron[$found$$], p.skill = $sh$$.skill;
  } else {
    for ($i$$ = 0;$i$$ < PILOTS.length && "Nashtah Pup Pilot" != PILOTS[$i$$].name;$i$$++) {
    }
    p = new Unit($sh$$.team, $i$$);
    p.upg = [];
    p.skill = $sh$$.skill;
    p.tosquadron(s);
    allunits.push(p);
    squadron.push(p);
    TEAMS[$sh$$.team].units.push(p);
  }
  p.dock($sh$$);
  p.show();
  $sh$$.wrap_before("dies", $self$$, function() {
    var $u$$ = this.docked;
    this.init.call($u$$);
    this.hasfired = 0;
    $u$$.wrap_before("endphase", $u$$, function() {
      this.hasmoved = !1;
    });
    $u$$.noattack = round;
    $u$$.deploy(this, $self$$.getdeploymentmatrix($u$$));
  });
}}, {name:"XX-23 S-Thread Tracers", points:1, type:MISSILE, firesnd:"missile", range:[1, 3], attack:3, done:!0, requires:"Focus", consumes:!1, modifyhit:function($ch$$) {
  return 0;
}, prehit:function($t$$, $c$jscomp$72_p$$, $h$jscomp$56_s$$) {
  $c$jscomp$72_p$$ = this.unit.selectnearbyally(2);
  $h$jscomp$56_s$$ = "";
  if (0 < $c$jscomp$72_p$$.length) {
    $c$jscomp$72_p$$ = $c$jscomp$72_p$$.concat(this.unit);
    for (var $i$$ = 0;$i$$ < $c$jscomp$72_p$$.length;$i$$++) {
      -1 < $c$jscomp$72_p$$[$i$$].gettargetableunits(3).indexOf($t$$) ? ($c$jscomp$72_p$$[$i$$].addtarget($t$$), $h$jscomp$56_s$$ += $c$jscomp$72_p$$[$i$$].name + " ") : $c$jscomp$72_p$$[$i$$].log("no valid target [%0]", this.name);
    }
    this.unit.log("all dice cancelled, %0 now targeted by %1", $t$$, $h$jscomp$56_s$$);
    this.unit.hitresolved = 0;
    this.unit.criticalresolved = 0;
  }
}}, {name:"Comm Relay", points:3, type:TECH, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("addevadetoken", this, function() {
    1 < this.evade && (this.log("1 %EVADE% max [%0]", $self$$.name), this.evade = 1);
    this.showinfo();
  });
  $sh$$.wrap_after("resetevade", this, function() {
    var $r$$ = 0;
    0 < this.evade && (this.log("keep 1 %EVADE% token [%0]", $self$$.name), $r$$ = 1);
    return $r$$;
  });
}}, {name:"Dorsal Turret", type:TURRET, points:3, firesnd:"falcon_fire", attack:2, range:[1, 2], done:!0, getrangeattackbonus:function($sh$$) {
  return 1 == this.getrange($sh$$) ? (this.unit.log("+1 attack for range 1"), 1) : 0;
}}, {name:"'Chopper'", type:CREW, points:0, done:!0, init:function($sh$$) {
  $sh$$.wrap_after("begincombatphase", this, function($lock$$) {
    for (var $i$$ = 0;$i$$ < this.touching.length;$i$$++) {
      var $u$$ = this.touching[$i$$];
      $u$$.isenemy(this) && ($u$$.log("+1 %STRESS% [%0]", this.name), $u$$.addstress());
    }
    return $lock$$;
  });
}, faction:REBEL, unique:!0}, {name:"Hera Syndulla", type:CREW, points:1, faction:REBEL, done:!0, init:function($sh$$) {
  $sh$$.wrap_after("canreveal", this, function($d$$, $b$$) {
    return "RED" == $d$$.difficulty && 0 < this.stress ? !0 : $b$$;
  });
}, unique:!0}, {name:"'Zeb' Orrelios", type:CREW, points:1, faction:REBEL, unique:!0, done:!0, init:function($sh$$) {
  var $self$$ = this;
  Unit.prototype.wrap_after("checkcollision", this, function($t$$, $b$$) {
    return !$self$$.unit.dead && $t$$ == $sh$$ && $sh$$.isinfiringarc($t$$) ? !1 : $b$$;
  });
  $sh$$.wrap_after("checkcollision", this, function($t$$, $b$$) {
    return !$self$$.unit.dead && $sh$$.isinfiringarc($t$$) ? !1 : $b$$;
  });
}}, {name:"Ezra Bridger", type:CREW, points:3, faction:REBEL, unique:!0, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return $self$$.isactive && 0 < $sh$$.stress;
  }.bind(this), f:function($m$$, $n$$) {
    return 0 < FCH_focus($m$$) ? (this.unit.log("1 %FOCUS% -> 1 %CRIT% [%0]", this.name), $m$$ - FCH_FOCUS + FCH_CRIT) : $m$$;
  }.bind(this), str:"focus"});
}}, {name:"Kanan Jarrus", type:CREW, points:3, faction:REBEL, unique:!0, done:!0, init:function($sh$$) {
  var $self$$ = this;
  this.rd = -1;
  Unit.prototype.wrap_before("endmaneuver", $self$$, function() {
    var $d$$ = this.maneuverdifficulty;
    !$self$$.unit.dead && "WHITE" == $d$$ && 0 < this.stress && $self$$.rd < round && this.isally($self$$.unit) && 2 >= this.getrange($self$$.unit) && (this.log("-1 %STRESS% [%0]", $self$$.name), $self$$.rd = round, this.removestresstoken());
  });
}}, {name:"Sabine Wren", type:CREW, points:2, upgrades:[BOMB], faction:REBEL, unique:!0, done:!0, rd:-1, init:function($sh$$) {
  var $self$$ = this;
  $self$$.rd = -1;
  Bomb.prototype.wrap_after("explode_base", this, function() {
    var $p$jscomp$0$$ = [$self$$.unit];
    if ($self$$.rd != round && !this.unit.isenemy($self$$.unit)) {
      for (var $i$$ in squadron) {
        var $u$$ = squadron[$i$$];
        this.unit.isenemy($u$$) && 1 == this.getrange($u$$) && $p$jscomp$0$$.push($u$$);
      }
      this.unit.selectunit($p$jscomp$0$$, function($p$$, $k$$) {
        0 != $k$$ && ($p$$[$k$$].log("+1 %HIT% [%0]", $self$$.name), $p$$[$k$$].resolvehit(1), $self$$.rd = round, SOUNDS.explode.play(), $p$$[$k$$].checkdead());
      }, ["select unit (or self to cancel) [%0]", $self$$.name], !1);
    }
  });
}}, {name:"Ghost", type:TITLE, points:0, unique:!0, done:!0, getdeploymentmatrix:function($u$$) {
  for (var $gd$$ = $u$$.getdial(), $p$$ = [], $i$$ = 0;$i$$ < $gd$$.length;$i$$++) {
    var $m0$$ = this.unit.m.clone().translate(0, 20).rotate(180, 0, 0);
    $p$$.push($u$$.getpathmatrix($m0$$, $gd$$[$i$$].move));
  }
  return $p$$;
}, init:function($sh$$) {
  var $phantom$$ = -1, $self$$ = this, $i$jscomp$0$$;
  for ($i$jscomp$0$$ in squadron) {
    var $u$jscomp$0$$ = squadron[$i$jscomp$0$$];
    if ($u$jscomp$0$$.isally($sh$$) && $sh$$ != $u$jscomp$0$$) {
      for (var $j$$ = 0;$j$$ < $u$jscomp$0$$.upgrades.length;$j$$++) {
        if ("Phantom" == $u$jscomp$0$$.upgrades[$j$$].name) {
          $phantom$$ = $i$jscomp$0$$;
          break;
        }
      }
    }
    if (-1 != $phantom$$) {
      break;
    }
  }
  -1 != $phantom$$ ? ($u$jscomp$0$$ = squadron[$phantom$$], 1 == TEAMS[$sh$$.team].isia && ($u$jscomp$0$$ = $.extend($u$jscomp$0$$, IAUnit.prototype)), $u$jscomp$0$$.dock($sh$$), $sh$$.weapons[0].auxiliary = AUXILIARY, $sh$$.weapons[0].subauxiliary = SUBAUXILIARY, $sh$$.weapons[0].type = "Bilaser", $sh$$.wrap_after("endmaneuver", this, function() {
    this.docked && $u$jscomp$0$$.donoaction([{org:$self$$, type:"TITLE", name:$self$$.name, action:function($n$$) {
      this.weapons[0].auxiliary = void 0;
      this.weapons[0].subauxiliary = void 0;
      this.weapons[0].type = "Laser";
      $u$jscomp$0$$.deploy(this, $self$$.getdeploymentmatrix($u$jscomp$0$$));
      $u$jscomp$0$$.endnoaction($n$$, "TITLE");
    }.bind(this)}], "", !0);
  }), $sh$$.wrap_after("endcombatphase", this, function() {
    if (this.docked) {
      for (var $i$$ = 0;$i$$ < this.weapons.length;$i$$++) {
        var $u$$ = this.weapons[$i$$];
        if ($u$$.type == TURRET && $u$$.isactive && this.noattack < round) {
          this.log("+1 attack with %1 [%0]", $self$$.name, $u$$.name);
          this.noattack = round;
          this.selecttargetforattack($i$$);
          break;
        }
      }
    }
  }), $sh$$.wrap_after("dies", this, function() {
    this.docked && (this.docked.noattack = round, this.log("emergency deployment of %0, +1 %HIT% [%1]", this.docked.name, this.name), this.docked.resolvehit(1), this.docked.hasfired = 0, this.docked.wrap_before("endphase", this.docked, function() {
      this.hasmoved = !1;
    }), $u$jscomp$0$$.deploy(this, $self$$.getdeploymentmatrix($u$jscomp$0$$)));
  })) : $sh$$.log("Phantom not found");
}, ship:"VCX-100"}, {name:"Phantom", type:TITLE, points:0, unique:!0, done:!0, ship:"Attack Shuttle"}, {name:"Reinforced Deflectors", points:3, type:SYSTEM, islarge:!0, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.addafterdefenseeffect($self$$, function($c$$, $h$$, $t$$) {
    3 <= $c$$ + $h$$ && this.addshield(1) && this.log("+1 %SHIELD% [%0]", $self$$.name);
  });
}}, {name:"Targeting Astromech", points:2, type:ASTROMECH, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("handledifficulty", this, function($d$$) {
    "RED" == $d$$ && this.selectunit(this.gettargetableunits(3), function($p$$, $k$$) {
      this.addtarget($p$$[$k$$]);
    }, ["select target or self to cancel [%0]", $self$$.name], !0);
  });
}}, {name:"TIE/x7", points:-2, type:TITLE, lostupgrades:[CANNON, MISSILE], ship:"TIE Defender", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("endmaneuver", this, function() {
    this.getdial()[this.maneuver].move.match(/[345]/) && (this.log("+1 %EVADE% [%0]", $self$$.name), this.addevadetoken());
  });
}}, {name:"TIE/D", points:0, type:TITLE, ship:"TIE Defender", done:!0, init:function($sh$$) {
  this.unit.tiedattack = -1;
  for (var $i$$ in $sh$$.weapons) {
  }
  $sh$$.addattack(function($c$$, $h$$) {
    var $w1$$ = this.weapons[this.activeweapon];
    return $w1$$.type == CANNON && 3 >= $w1$$.points && this.tiedattack < round;
  }, this, [$sh$$.weapons[0]], function() {
    this.tiedattack = round;
  });
}}, {name:"TIE Shuttle", points:0, done:!0, type:TITLE, ship:"TIE Bomber", maxupg:4, lostupgrades:[TORPEDO, MISSILE, BOMB], upgrades:[CREW, CREW]}, {name:"Guidance Chips", points:0, type:MOD, done:!0, init:function($sh$$) {
  var $self$$ = this;
  for (i in $sh$$.weapons) {
    var $t$jscomp$0$$ = FCH_HIT, $w$$ = $sh$$.weapons[i], $w0$$ = $sh$$.weapons[0];
    $w0$$.isprimary && 3 <= $w0$$.getattack() && ($t$jscomp$0$$ = FCH_CRIT);
    $w$$.type.match(/Torpedo|Missile/) && $w$$.wrap_after("modifyattackroll", this, function($m$$, $n$$, $d$$, $m2$$) {
      0 < FCH_blank($m2$$, $n$$) ? $m2$$ += $t$jscomp$0$$ : 0 < FCH_focus($m2$$) ? $m2$$ = $m2$$ - FCH_FOCUS + $t$jscomp$0$$ : 0 < FCH_crit($m2$$) && ($m2$$ = $m2$$ - FCH_HIT + $t$jscomp$0$$);
      return $m2$$;
    });
  }
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    var $t$$ = this.weapons[this.activeweapon].type;
    return $t$$ == TORPEDO || $t$$ == MISSILE ? !0 : !1;
  }.bind($sh$$), f:function($m$$, $n$$) {
    var $b$$ = FCH_blank($m$$, $n$$), $f$$ = FCH_focus($m$$), $h$$ = FCH_hit($m$$), $to$$ = FCH_HIT, $s$$ = "%HIT%";
    this.weapons[0].isactive && 3 <= this.weapons[0].getattack() && ($to$$ = FCH_CRIT, $s$$ = "%CRIT%");
    0 < $b$$ ? ($sh$$.log("+1 " + $s$$ + " [%0]", $self$$.name), $m$$ += $to$$) : 0 < $f$$ ? ($sh$$.log("%FOCUS% -> " + $s$$ + " [%0]", $self$$.name), $m$$ += $to$$ - FCH_FOCUS) : 0 < $h$$ && $to$$ == FCH_CRIT && ($sh$$.log("%HIT% -> %CRIT% [%0]", $self$$.name), $m$$ += $to$$ - FCH_HIT);
    return $m$$;
  }.bind($sh$$), str:"target"});
}}, {name:"TIE/v1", ship:"TIE Adv. Prototype", points:1, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("addtarget", this, function($t$$) {
    $self$$.isactive && this.candoaction() && this.candoevade() && (this.log("free %EVADE% action [%0]", this.name), this.doselection(function($n$$) {
      this.addevade($n$$);
    }.bind(this)));
  });
}, type:TITLE}, {name:"Zuckuss", faction:SCUM, points:1, unique:!0, done:!0, type:CREW, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, DEFENSE_M, this, {req:function($m$$, $n$$) {
    return 0 == $sh$$.stress;
  }.bind(this), f:function($m$$, $n$$) {
    var $f$$ = FE_focus($m$$);
    if (0 < $f$$) {
      targetunit.log("Reroll %0 %FOCUS% [%1]", $f$$, $self$$.name);
      $sh$$.log("+%0 %STRESS% [%1]", $f$$, $self$$.name);
      var $roll$$ = $sh$$.rolldefensedie($f$$, $self$$, "evade");
      $m$$ -= FE_FOCUS * $f$$;
      for (var $i$$ = 0;$i$$ < $f$$;$i$$++) {
        $sh$$.addstress(), "evade" == $roll$$[$i$$] && ($m$$ += FE_EVADE), "focus" == $roll$$[$i$$] && ($m$$ += FE_FOCUS);
      }
    }
    return $m$$;
  }, str:"focus"});
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, DEFENSE_M, this, {req:function($m$$, $n$$) {
    return 0 == $sh$$.stress;
  }.bind(this), f:function($m$$, $n$$) {
    var $f$$ = FE_evade($m$$);
    if (0 < $f$$) {
      targetunit.log("Reroll %0 %EVADE% [%1]", $f$$, $self$$.name);
      $sh$$.log("+%0 %STRESS% [%1]", $f$$, $self$$.name);
      var $roll$$ = $sh$$.rolldefensedie($f$$, $self$$, "evade");
      $m$$ -= FE_EVADE * $f$$;
      for (var $i$$ = 0;$i$$ < $f$$;$i$$++) {
        $sh$$.addstress(), "evade" == $roll$$[$i$$] && ($m$$ += FE_EVADE), "focus" == $roll$$[$i$$] && ($m$$ += FE_FOCUS);
      }
    }
    return $m$$;
  }, str:"evade"});
}}, {name:"4-LOM", faction:SCUM, points:1, unique:!0, done:!0, type:CREW, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function() {
    return targetunit.canusefocus();
  }, f:function($m$$, $n$$) {
    this.addiontoken();
    targetunit.canusefocus() && (targetunit.log("cannot use focus in this attack [%0]", $self$$.name), targetunit.wrap_after("canusefocus", this, function() {
      return !1;
    }).unwrapper("afterdefenseeffect"));
    return $m$$;
  }.bind($sh$$), str:"focus"});
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function() {
    return targetunit.canuseevade();
  }, f:function($m$$, $n$$) {
    this.addiontoken();
    targetunit.canusefocus() && (targetunit.log("cannot use evade in this attack [%0]", $self$$.name), targetunit.wrap_after("canuseevade", this, function() {
      return !1;
    }).unwrapper("afterdefenseeffect"));
    return $m$$;
  }.bind($sh$$), str:"evade"});
}}, {name:"Mist Hunter", type:TITLE, points:0, done:!0, ship:"G-1A Starfighter", unique:!0, upgrades:[CANNON], install:function($sh$$) {
  var $j$$, $tb$$;
  $sh$$.installed = !0;
  $sh$$["addedaction" + this.id] = $sh$$.shipactionList.length;
  $sh$$.shipactionList.push("ROLL");
  $sh$$.showactionlist();
  for ($tb$$ = 0;$tb$$ < UPGRADES.length && "Tractor Beam" != UPGRADES[$tb$$].name;$tb$$++) {
  }
  if ($tb$$ != UPGRADES.length) {
    for ($j$$ = 0;$j$$ < $sh$$.upgradetype.length;$j$$++) {
      if ($sh$$.upgradetype[$j$$] == UPGRADES[$tb$$].type && -1 == $sh$$.upg[$j$$]) {
        addupgrade($sh$$, $tb$$, $j$$, !0);
        $sh$$.log("%0 added [%1]", UPGRADES[$tb$$].name, this.name);
        break;
      }
    }
  }
}}, {name:"Adaptability(+1)", type:ELITE, points:0, invisible:!0}, {name:"Adaptability(-1)", type:ELITE, points:0, invisible:!0}, {name:"Dengar", unique:!0, type:CREW, points:3, faction:SCUM, done:!0, init:function($sh$$) {
  $sh$$.adddicemodifier(ATTACK_M, REROLL_M, ATTACK_M, this, {dice:["blank", "focus"], n:function() {
    return 1 == targetunit.unique ? 2 : 1;
  }, req:function($attacker$$, $w$$, $defender$$) {
    return this.isactive;
  }.bind(this)});
}}, {name:"'Gonk'", unique:!0, type:CREW, points:2, faction:SCUM, shield:0, candoaction:function() {
  return this.isactive;
}, action:function($n$$) {
  var $self$$ = this.unit;
  this.isactive && ($self$$.log("+1 %SHIELD% on %0 [%0]", this.name), this.shield++);
  $self$$.endaction($n$$, CREW);
  return !0;
}, candoaction2:function() {
  return this.isactive;
}, action2:function($n$$) {
  var $self$$ = this.unit;
  this.isactive && 0 < this.shield && this.unit.shield < this.unit.ship.shield && ($self$$.shield < $self$$.ship.shield && $self$$.log("+1 %SHIELD% [%0]", this.name), $self$$.addshield(1), this.shield--, $self$$.show());
  $self$$.endaction($n$$, CREW);
  return !0;
}, done:!0}, {name:"Boba Fett", unique:!0, type:CREW, points:1, faction:SCUM, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("hashit", this, function($t$$) {
    var $bu$$ = this;
    $self$$.isactive && $t$$.wrap_after("deal", $self$$, function($c$$, $f$$, $p$$) {
      $p$$.then(function($crit$jscomp$8_p$$) {
        if ($crit$jscomp$8_p$$.face == FACEUP) {
          $crit$jscomp$8_p$$ = [];
          for (i in $t$$.upgrades) {
            var $upg$$ = $t$$.upgrades[i];
            $upg$$.type.match(/Missile|Torpedo|Crew|Bomb|Cannon|Turret|Astromech|System|Illicit|Salvaged|Tech|Elite/) && $crit$jscomp$8_p$$.push($upg$$);
          }
          $t$$.log("select upgrade to desactivate [%0]", $self$$.name);
          $bu$$.selectupgradetodesactivate($crit$jscomp$8_p$$, $self$$);
        }
      });
      return $p$$;
    }).unwrapper("afterdefenseeffect");
  });
}}, {name:"R5-P8", unique:!0, type:SALVAGED, points:3, done:!0, r5p8:-1, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.addafterdefenseeffect(this, function($c$$, $h$$, $t$$) {
    $self$$.r5p8 != round && ($self$$.r5p8 = round, this.donoaction([{name:this.name, org:this, type:"HIT", action:function($n$$) {
      var $roll$$ = this.rollattackdie(1, $self$$, "hit")[0];
      this.log("roll 1 attack dice [%0]", $self$$.name);
      if ("hit" == $roll$$ || "critical" == $roll$$) {
        $t$$.log("+1 %HIT% [%1]", $self$$.name), $t$$.resolvehit(1), $t$$.checkdead();
      }
      "critical" == $roll$$ && (this.log("+1 %HIT% [%1]", $self$$.name), this.resolvehit(1), this.checkdead());
      this.endnoaction($n$$, "");
    }.bind(this)}], "", !0));
  });
}}, {name:"Attanni Mindlink", type:ELITE, faction:SCUM, points:1, done:!0, init:function($sh$$) {
  var $self$$ = this;
  "undefined" == typeof Unit.prototype.getattanni && (Unit.prototype.getattanni = function $Unit$$getattanni$() {
    return [];
  });
  Unit.prototype.wrap_after("getattanni", this, function($p$$) {
    return $p$$.concat($self$$.unit);
  });
  $sh$$.wrap_after("addfocustoken", this, function() {
    if (!this.dead && $self$$.isactive) {
      var $p$$ = this.getattanni(), $i$$;
      for ($i$$ in $p$$) {
        $p$$[$i$$] != this && $p$$[$i$$].isally(this) && 0 == $p$$[$i$$].focus && ($p$$[$i$$].addfocustoken(), $p$$[$i$$].log("+1 %FOCUS% [%0]", $self$$.name));
      }
    }
  });
  $sh$$.wrap_after("addstress", this, function() {
    if (!this.dead && $self$$.isactive) {
      var $p$$ = this.getattanni(), $i$$;
      for ($i$$ in $p$$) {
        $p$$[$i$$] != this && $p$$[$i$$].isally(this) && 0 == $p$$[$i$$].stress && ($p$$[$i$$].addstress(), $p$$[$i$$].log("+1 %STRESS% [%0]", $self$$.name));
      }
    }
  });
}}, {name:"Rage", type:ELITE, round:-1, candoaction:function() {
  return this.isactive;
}, action:function($n$$) {
  var $self$$ = this.unit;
  this.isactive && (this.unit.log("+1 %FOCUS%, +2 %STRESS%, 3 rerolls [%0]", $self$$.name), this.round = round, $self$$.addfocustoken(), $self$$.addstress(), $self$$.addstress());
  $self$$.endaction($n$$, ELITE);
  return !0;
}, init:function($sh$$) {
  $sh$$.adddicemodifier(ATTACK_M, REROLL_M, ATTACK_M, this, {dice:["blank", "focus"], n:function() {
    return 3;
  }, req:function($attacker$$, $w$$, $defender$$) {
    return this.isactive && this.round == round;
  }.bind(this)});
}, done:!0, points:1}, {name:"Punishing One", type:TITLE, unique:!0, points:12, done:!0, ship:"JumpMaster 5000", install:function($sh$$) {
  $sh$$.installed = !0;
  $sh$$.weapons[0].wrap_after("getattack", this, function($a$$) {
    return $a$$ + 1;
  });
  $sh$$.showstats();
}, uninstall:function($sh$$) {
  "function" == typeof $sh$$.weapons[0].getattack.unwrap && $sh$$.weapons[0].getattack.unwrap(this);
  $sh$$.showstats();
}}, {name:"Long-Range Scanners", type:MOD, points:0, done:!0, requiredupg:[TORPEDO, MISSILE], init:function($sh$$) {
  $sh$$.wrap_after("gettargetableunits", this, function($n$$, $q$$) {
    var $p$$ = [];
    if (3 > $n$$) {
      return $p$$;
    }
    for (var $i$$ in squadron) {
      squadron[$i$$].isenemy(this) && 3 <= this.getrange(squadron[$i$$]) && $p$$.push(squadron[$i$$]);
    }
    return $p$$;
  });
}}, {name:"Electronic Baffle", type:SYSTEM, points:1, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("addstress", this, function() {
    this.donoaction([{type:"STRESS", name:$self$$.name, org:$self$$, action:function($n$$) {
      this.removestresstoken();
      this.log("-1 %STRESS%, +1 %HIT% [%0]", $self$$.name);
      this.resolvehit(1);
      this.endnoaction($n$$, "SYSTEM");
    }.bind(this)}], "Take 1 %HIT% instead of %STRESS% token", !0);
  });
  $sh$$.wrap_after("addiontoken", this, function() {
    this.donoaction([{type:"ION", name:$self$$.name, org:$self$$, action:function($n$$) {
      this.removeiontoken();
      this.log("-1 %ION%, +1 %HIT% [%0]", $self$$.name);
      this.resolvehit(1);
      this.endnoaction($n$$, "SYSTEM");
    }.bind(this)}], "Take 1 %HIT% instead of %ION% token", !0);
  });
}}, {name:"Overclocked R4", type:SALVAGED, points:1, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("begincombatphase", $self$$, function($l$$) {
    this.wrap_after("removefocustoken", $self$$, function() {
      this.donoaction([{type:"STRESS", name:$self$$.name, org:$self$$, action:function($n$$) {
        this.addstress();
        this.addfocustoken();
        this.endnoaction($n$$, "SALVAGED");
      }.bind(this)}], "Add %STRESS% for %FOCUS%", !0);
    }).unwrapper("endcombatphase");
    return $l$$;
  });
}}, {name:"Thermal Detonators", done:!0, img:"seismic.png", snd:"explode", width:16, height:8, size:15, explode:function() {
  if (phase == ACTIVATION_PHASE && !this.exploded) {
    for (var $r$$ = this.getrangeallunits(), $i$$ = 0;$i$$ < $r$$[1].length;$i$$++) {
      var $u$$ = squadron[$r$$[1][$i$$].unit];
      $u$$.log("+1 %HIT%, +1 %STRESS% [%0]", this.name);
      $u$$.resolvehit(1);
      $u$$.addstress();
      $u$$.checkdead();
    }
    this.explode_base();
  }
}, type:BOMB, points:3}, {name:"Ion Projector", type:MOD, islarge:!0, done:!0, points:2, init:function($sh$$) {
  var $upg$$ = this;
  $sh$$.wrap_before("collidedby", this, function($t$$) {
    if ($upg$$.isactive && $t$$.isenemy(this)) {
      var $roll$$ = this.rollattackdie(1, $upg$$, "hit")[0];
      if ("hit" == $roll$$ || "critical" == $roll$$) {
        $t$$.log("+%1 %ION% [%0]", $upg$$.name, 1), $t$$.addiontoken();
      }
    } else {
      $t$$.log("no effect [%0]", $upg$$.name);
    }
  });
}}, {name:"Adaptability", type:ELITE, points:0, done:!0, faceup:!1, "switch":function() {
  this.name = (this.faceup = !this.faceup) ? "Adaptability(+1)" : "Adaptability(-1)";
  this.unit.showskill();
}, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("getskill", this, function($s$$) {
    return $self$$.faceup ? $s$$ + 1 : $s$$ - 1;
  });
  this["switch"]();
  $sh$$.showskill();
}}, {name:"Systems Officer", type:CREW, limited:!0, faction:EMPIRE, done:!0, points:2, init:function($sh$$) {
  $sh$$.wrap_after("handledifficulty", this, function($d$$) {
    var $a$$ = this.selectnearbyally(1);
    "GREEN" == $d$$ && 0 < $a$$.length && this.selectunit($a$$, function($p$$, $k$$) {
      $p$$[$k$$].selectunit($p$$[$k$$].gettargetableunits(3), function($pp$$, $kk$$) {
        this.addtarget($pp$$[$kk$$]);
      }, ["select target to lock"], !1);
    }, ["select unit for free %TARGET% (or self to cancel)"], !0);
  });
}}, {name:"Special Ops Training", type:TITLE, faction:EMPIRE, ship:"TIE/SF Fighter", points:0, done:!0, init:function($sh$jscomp$0$$) {
  var $self$$ = this;
  $sh$jscomp$0$$.addattack(function($c$$, $h$$) {
    return this.secondattack;
  }, this, [$sh$jscomp$0$$.weapons[0]], function() {
  }, function() {
    var $p$$ = this.weapons[0].getenemiesinrange(), $q$$ = [], $i$$;
    for ($i$$ in $p$$) {
      this.isinprimaryfiringarc($p$$[$i$$]) || $q$$.push($p$$[$i$$]);
    }
    return $q$$;
  });
  $sh$jscomp$0$$.wrap_after("preattackroll", this, function($w$$, $t$$) {
    var $a1$jscomp$4_wp$$ = this.weapons[$w$$];
    this.secondattack = !1;
    $a1$jscomp$4_wp$$.isprimary && this.isinprimaryfiringarc($t$$) && ($a1$jscomp$4_wp$$ = {org:$self$$, name:$self$$.name, type:"HIT", action:function($n$$) {
      this.log("+1 attack die");
      this.wrap_after("getattackstrength", this, function($i$$, $sh$$, $a$$) {
        return $a$$ + 1;
      }).unwrapper("attackroll");
      this.endnoaction($n$$, "HIT");
    }.bind(this)}, this.donoaction([$a1$jscomp$4_wp$$], "Add 1 additional attack die or one auxiliary arc attack (by default)", !0, function() {
      this.secondattack = !0;
    }.bind(this)));
  });
}}, {name:"Sensor Cluster", type:TECH, points:2, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(DEFENSE_M, MOD_M, DEFENSE_M, $self$$, {req:function($m$$, $n$$) {
    return $self$$.isactive && this.canusefocus();
  }.bind($sh$$), aiactivate:function($m$$, $n$$) {
    return 0 < FE_blank($m$$, $n$$) && 0 == FE_focus($m$$);
  }, f:function($m$$, $n$$) {
    0 < this.canusefocus() && 0 < FE_blank($m$$, $n$$) && (this.removefocustoken(), this.log("1 blank -> 1 %EVADE% [%0]", $self$$.name), $m$$ += FE_EVADE);
    return $m$$;
  }.bind($sh$$), str:"blank"});
}}, {name:"R3 Astromech", type:ASTROMECH, points:2, done:!0, init:function($sh$$) {
  var $self$$ = this, $rd$$ = -1;
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, $self$$, {req:function($m$$, $n$$) {
    return 0 < FCH_focus($m$$) && $rd$$ < round;
  }.bind($sh$$), aiactivate:function($m$$, $n$$) {
    return !1;
  }, f:function($m$$, $n$$) {
    0 < FCH_focus($m$$, $n$$) && $rd$$ < round && (this.addevadetoken(), this.log("1 %FOCUS% -> 1 blank, +1 %EVADE% [%0]", $self$$.name), $rd$$ = round, $m$$ -= FCH_FOCUS);
    return $m$$;
  }.bind($sh$$), str:"focus"});
}}, {name:"Vectored Thrusters", type:MOD, done:!0, islarge:!1, addedaction:"Roll", points:2}, {name:"Tail Gunner", type:CREW, done:!0, limited:!0, points:2, init:function($sh$$) {
  $sh$$.wrap_before("resolveattack", this, function($w$$, $target$$) {
    var $wp$$ = this.weapons[$w$$];
    $wp$$.isprimary && 3 >= $wp$$.getauxiliarysector($target$$) && "Bilaser" == $wp$$.type && ($target$$.log("-1 defense [%0]", this.name), $target$$.wrap_after("getagility", this, function($a$$) {
      return 0 < $a$$ ? $a$$ - 1 : $a$$;
    }).unwrapper("afterdefenseeffect"), $target$$.showstats());
  });
}}, {name:"Collision Detector", type:SYSTEM, done:!0, points:0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("canmoveonobstacles", this, function($type$$, $v$$) {
    return $type$$.match(/DECLOAK|ROLL|BOOST/) ? !0 : $v$$;
  });
  $sh$$.wrap_after("canhavecriticalocollision", this, function() {
    this.log("ignoring collision with obstacle [%0]", $self$$.name);
    return !1;
  });
}}, {name:"Alliance Overhaul", type:TITLE, done:!0, points:0, ship:"ARC-170", init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("getattackstrength", this, function($wpn$$, $aot$$, $a$$) {
    this.weapons[$wpn$$].isprimary && this.isinprimaryfiringarc($aot$$) && (this.log("+1 attack die [%0]", $self$$.name), $a$$ += 1);
    return $a$$;
  }.bind($sh$$));
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return !this.isinprimaryfiringarc(targetunit);
  }.bind($sh$$), aiactivate:function($m$$, $n$$) {
    return 0 < FCH_focus($m$$);
  }, f:function($m$$, $n$$) {
    return 0 < FCH_focus($m$$) ? (this.log("1 %FOCUS% ->1 %CRIT%"), $m$$ - FCH_FOCUS + FCH_CRIT) : $m$$;
  }.bind($sh$$), str:"focus"});
}}, {name:"Concord Dawn Protector", type:TITLE, done:!0, points:1, ship:"Protectorate Starfighter", init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(DEFENSE_M, ADD_M, DEFENSE_M, this, {req:function($m$$, $n$$) {
    return activeunit.isinfiringarc(this) && this.isinfiringarc(activeunit) && 1 == activeunit.getrange(this);
  }.bind($sh$$), aiactivate:function($m$$, $n$$) {
    return !0;
  }, f:function($m$$, $n$$) {
    this.log("+1 %EVADE% [%0]", $self$$.name);
    return {m:$m$$ + FE_EVADE, n:$n$$ + 1};
  }.bind($sh$$), str:"evade"});
}}, {name:"Fearlessness", type:ELITE, done:!0, points:1, faction:SCUM, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(ATTACK_M, ADD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return targetunit.isinfiringarc(this) && this.isinfiringarc(targetunit) && 1 == targetunit.getrange(this);
  }.bind($sh$$), aiactivate:function($m$$, $n$$) {
    return !0;
  }, f:function($m$$, $n$$) {
    this.log("+1 %HIT% [%0]", $self$$.name);
    return {m:$m$$ + FCH_HIT, n:$n$$ + 1};
  }.bind($sh$$), str:"hit"});
}}, {name:"Seismic Torpedo", type:TORPEDO, points:2, done:!0, firesnd:"missile", isWeapon:function() {
  return !1;
}, candoaction:function() {
  return this.isactive;
}, action:function($n$$) {
  var $self$$ = this.unit, $p$$ = $self$$.selectnearbyobstacle(2);
  0 < $p$$.length && this.isactive ? $self$$.resolveactionselection($p$$, function($k$$) {
    $p$$[$k$$].type = NONE;
    $p$$[$k$$].g.attr({display:"none"});
    SOUNDS.explode.play();
    for (var $i$$ in squadron) {
      var $u$$ = squadron[$i$$];
      if (10000 >= $u$$.getdist($u$$.m, $p$$[$k$$])) {
        var $roll$$ = $u$$.rollattackdie(1, $self$$, "critical")[0];
        "hit" == $roll$$ ? ($u$$.log("+1 %HIT% [%0]", this.name), $u$$.resolvehit(1), $u$$.checkdead()) : "critical" == $roll$$ && ($u$$.log("+1 %CRIT% [%0]", this.name), $u$$.resolvecritical(1), $u$$.checkdead());
      }
    }
    this.desactivate();
    $self$$.endaction($n$$, TORPEDO);
  }.bind(this)) : $self$$.endaction($n$$, TORPEDO);
}}, {name:"Latts Razzi", type:CREW, faction:SCUM, points:2, unique:!0, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.adddicemodifier(DEFENSE_M, ADD_M, DEFENSE_M, this, {req:function($m$$, $n$$) {
    return 0 < activeunit.stress;
  }.bind($sh$$), aiactivate:function($m$$, $n$$) {
    return 0 < activeunit.stress;
  }, f:function($m$$, $n$$) {
    return 0 < activeunit.stress ? (this.log("-1 stress for %0, +1 %EVADE [%1]", activeunit.name, $self$$.name), activeunit.removestresstoken(), {m:$m$$ + FE_EVADE, n:$n$$ + 1}) : {m:$m$$, n:$n$$};
  }.bind($sh$$), str:"evade"});
}}, {name:"Ketsu Onyo", type:CREW, faction:SCUM, points:1, unique:!0, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("endphase", this, function() {
    var $p$jscomp$0$$ = this.selectnearbyenemy(2, function($s$$, $t$$) {
      return 0 < $s$$.tractorbeam;
    });
    0 < $p$jscomp$0$$.length && this.selectunit($p$jscomp$0$$, function($p$$, $k$$) {
      $p$$[$k$$].wrap_after("resettractorbeam", $self$$, function($a$$) {
        return this.tractorbeam;
      }).unwrapper("beginplanningphase");
      $p$$[$k$$].log("keeps %0 tractor beam tokens [%1]", this.tractorbeam, $self$$.name);
    }, ["select unit"], !0);
  });
}}, {name:"IG-88D", type:CREW, faction:SCUM, points:1, unique:!0, done:!0, init:function($sh$$) {
  for (var $i$$ in squadron) {
    var $u$$ = squadron[$i$$];
    $u$$ != $sh$$ && 1 == $u$$.ig2000 && $u$$.isally($sh$$) && ($sh$$.log("copying %0 abilities [%1]", $u$$.name, this.name), $u$$.init.call($sh$$, $u$$));
  }
}}, {name:"Rigged Cargo Chute", type:ILLICIT, islarge:!0, points:1}, {name:"Black Market Slicer Tools", type:ILLICIT, points:1, done:!0, candoaction:function() {
  return this.isactive;
}, action:function($n$$) {
  var $self$$ = this, $p$$ = $self$$.unit.selectnearbyenemy(2, function($s$$, $t$$) {
    return 0 < $t$$.stress;
  });
  0 < $p$$.length && this.isactive && this.unit.selectunit($p$$, function($q$$, $k$$) {
    var $roll$$ = $self$$.unit.rollattackdie(1, $self$$, "blank")[0];
    if ("hit" == $roll$$ || "critical" == $roll$$) {
      $q$$[$k$$].applydamage(1), $q$$[$k$$].removestresstoken(), $q$$[$k$$].checkdead();
    }
  }, ["select unit [%0]", $self$$.name], !1);
  this.unit.endaction($n$$, ILLICIT);
}}, {name:"Gyroscopic Targeting", ship:"Lancer-class Pursuit Craft", type:MOD, points:2, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.gtmaneuver = -1;
  $sh$$.wrap_before("endmaneuver", this, function($d$jscomp$42_m$$) {
    $d$jscomp$42_m$$ = this.getmaneuver();
    this.gtmaneuver = -1;
    $d$jscomp$42_m$$.move.match(/\w+[345]/) && (this.gtmaneuver = round);
  });
  $sh$$.wrap_before("endcombatphase", this, function() {
    this.gtmaneuver == round && this.donoaction([{org:$self$$, type:"MOD", name:$self$$.name, action:function($n$$) {
      this.log("Free moving arc rotation [%0]", $self$$.name);
      this.resolvearcrotate($n$$, !0);
    }.bind(this)}], "", !0);
  });
}}, {name:"Shadow Caster", ship:"Lancer-class Pursuit Craft", type:TITLE, points:3, done:!0, unique:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("hashit", this, function($t$$, $r$$) {
    $r$$ && 2 >= this.weapons[0].getauxiliarysector($t$$) && (this.log("+1 tractor beam token [%0]", $self$$.name), $t$$.addtractorbeam(this));
    return $r$$;
  });
}}, {name:"Jyn Erso", faction:REBEL, points:2, unique:!0, done:!0, type:CREW, candoaction:function() {
  return this.isactive && !this.unit.dead;
}, action:function($n$$) {
  var $self$$ = this.unit, $p$$ = $self$$.selectnearbyallyandself(2), $e$$ = $self$$.selectnearbyenemy(3, function($s$$, $t$$) {
    return $s$$.isinfiringarc($t$$);
  });
  log("p " + $p$$);
  log("p.length " + $p$$.length);
  log("e.length " + $e$$.length);
  0 < $p$$.length && 0 < $e$$.length ? $self$$.resolveactionselection($p$$, function($k$$) {
    var $l$$ = $e$$.length;
    3 < $l$$ && ($l$$ = 3);
    for (var $i$$ = 0;$i$$ < $l$$;$i$$++) {
      $p$$[$k$$].addfocustoken();
    }
    $self$$.endaction($n$$, "CREW");
  }) : ($self$$.log("no effect [%0]", this.name), $self$$.endaction($n$$, "CREW"));
}}, {name:"Unkar Plutt", faction:SCUM, points:1, type:CREW, done:!0, unique:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.unkar = -1;
  $sh$$.wrap_after("getcollidingunits", this, function($m$$, $c$$) {
    0 < $c$$.length && this.unkar < round && (this.unkar = round, this.donoaction([{org:$self$$, type:"CREW", name:$self$$.name, action:function($n$$) {
      $self$$.unit.log("+1 %HIT%, +1 free action [%0]", $self$$.name);
      this.resolvehit(1);
      SOUNDS.explode.play();
      this.checkdead();
      this.doaction(this.getactionlist(), "");
      this.endnoaction($n$$, "CREW");
    }.bind(this)}], "", !0));
    return $c$$;
  });
}}, {name:"Sabine's Masterpiece", faction:REBEL, ship:"TIE Fighter", unique:!0, done:!0, type:TITLE, upgrades:[CREW, ILLICIT], points:1}, {name:"Millennium Falcon(HoR)", faction:REBEL, ambiguous:!0, ship:"YT-1300", unique:!0, done:!0, type:TITLE, points:1, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("getmaneuverlist", this, function($list$$) {
    if (this.hasionizationeffect()) {
      return $list$$;
    }
    for (var $i$$ in $list$$) {
      $i$$.match(/BR3|BL3/) && (this.log("perform half-turn after a bank [%0]", $self$$.name), $list$$["K" + $i$$] = {move:$i$$, difficulty:$list$$[$i$$].difficulty, halfturn:!0});
    }
    return $list$$;
  });
  $sh$$.wrap_before("completemaneuver", this, function($dial$$, $d$$, $h$$) {
    $dial$$.match(/BR3|BL3/) && 1 == $h$$ && this.addstress();
  });
}}, {name:"Smuggling Compartment", ship:"YT-", type:MOD, limited:!0, done:!0, points:0, upgrades:[MOD, ILLICIT], maxupg:3}, {name:"Burnout Slam", islarge:!0, done:!0, type:ILLICIT, addedaction:"SLAM", points:1, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("resolveslam", this, function() {
    if ($self$$.isactive) {
      var $n$$ = $self$$.unit.shipactionList.indexOf("SLAM");
      $self$$.unit.shipactionList.splice($n$$, 1);
      $self$$.desactivate();
    }
  }.bind($sh$$));
}}, {name:"Finn", faction:REBEL, points:5, unique:!0, type:CREW, done:!0, init:function($sh$$) {
  $sh$$.adddicemodifier(ATTACK_M, ADD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return this.isactive && this.unit.isinfiringarc(targetunit);
  }.bind(this), f:function($m$$, $n$$) {
    this.unit.log("+1 blank [%0]", this.name);
    return {m:$m$$, n:$n$$ + 1};
  }.bind(this), str:"crew"});
  $sh$$.adddicemodifier(DEFENSE_M, ADD_M, DEFENSE_M, this, {req:function($m$$, $n$$) {
    return this.isactive && this.unit.isinfiringarc(activeunit);
  }.bind(this), f:function($m$$, $n$$) {
    this.unit.log("+1 blank [%0]", this.name);
    return {m:$m$$, n:$n$$ + 1};
  }.bind(this), str:"crew"});
}}, {name:"Rey", faction:REBEL, points:2, unique:!0, type:CREW, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $self$$.focus = 0;
  $sh$$.wrap_before("endphase", this, function() {
    this.log("+1 %FOCUS% on %0", $self$$.name);
    0 < this.focus && ($self$$.focus++, this.removefocustoken());
  });
  $sh$$.wrap_before("begincombatphase", this, function() {
    0 < $self$$.focus && this.donoaction([{org:$self$$, type:"CREW", name:$self$$.name, action:function($n$$) {
      $self$$.focus--;
      $self$$.unit.addfocustoken();
      $self$$.unit.endnoaction($n$$, "CREW");
    }}], "", !0);
  });
}}, {name:"Black One", points:1, unique:!0, done:!0, ship:"T-70 X-Wing", type:TITLE, skillmin:7, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("endaction", this, function($n$$, $s$jscomp$0$$) {
    if ("BOOST" == $s$jscomp$0$$ || "ROLL" == $s$jscomp$0$$) {
      var $p$$ = this.selectnearbyally(1, function($s$$, $t$$) {
        for (var $i$$ = 0;$i$$ < $t$$.istargeted.length;$i$$++) {
          if (!$t$$.istargeted[$i$$].isally($t$$)) {
            return !0;
          }
        }
        return !1;
      });
      0 < $p$$.length && this.selectunit($p$$, function($q$$, $k$$) {
        for (var $i$$ = 0;$i$$ < $q$$[$k$$].istargeted.length;$i$$++) {
          var $u$$ = $q$$[$k$$].istargeted[$i$$];
          if (!$q$$[$k$$].isally($u$$)) {
            $q$$[$k$$].log("removing %TARGET% from %0 [%1]", $u$$.name, $self$$.name);
            $u$$.removetarget($q$$[$k$$]);
            break;
          }
        }
      }, ["select unit (or self to cancel) [%0]", $self$$.name], !1);
    }
  });
}}, {name:"Primed Thrusters", points:1, done:!0, islarge:!1, type:TECH, init:function($sh$$) {
  $sh$$.wrap_after("isactiondone", this, function($a$$, $b$$) {
    if (0 < this.stress && "ROLL" != $a$$ && "BOOST" != $a$$) {
      return !0;
    }
    0 < this.stress && "ROLL" == $a$$ && $b$$ && this.log("can do %ROLL% [%0]");
    0 < this.stress && "BOOST" == $a$$ && $b$$ && this.log("can do %BOOST% [%0]");
    return $b$$;
  });
  $sh$$.wrap_after("hasnostresseffect", this, function() {
    return 3 > this.stress;
  });
}}, {name:"M9-G8", type:ASTROMECH, points:3, unique:!0, done:!1}, {name:"Pattern Analyzer", type:TECH, points:2}, {name:"General Hux", type:CREW, faction:EMPIRE, points:5, unique:!0, done:!0, candoaction:function() {
  return !0;
}, action:function($n$$) {
  var $self$$ = this.unit, $p$$ = $self$$.selectnearbyally(2);
  0 < $p$$.length ? (1 == $p$$.length ? (new Condition($p$$[0], $self$$, "Fanatical Devotion"), $p$$[0].addfocustoken(), $self$$.endaction($n$$, CREW)) : 2 <= $p$$.length ? ($p$$.push($self$$), $self$$.log("select up to 3 units (self to cancel) [%0]", $self$$.name), $self$$.resolveactionselection($p$$, function($k$$) {
    $p$$[$k$$] == this && this.endaction($n$$, CREW);
    new Condition($p$$[$k$$], $self$$, "Fanatical Devotion");
    $p$$[$k$$].addfocustoken();
    $p$$.splice($k$$, 1);
    1 < $p$$.length ? this.resolveactionselection($p$$, function($l$$) {
      $p$$[$l$$] == this && this.endaction($n$$, CREW);
      $p$$[$l$$].addfocustoken();
      $p$$.splice($l$$, 1);
      1 < $p$$.length ? this.resolveactionselection($p$$, function($h$$) {
        $p$$[$h$$] == this && this.endaction($n$$, CREW);
        $p$$[$h$$].addfocustoken();
        this.endaction($n$$, CREW);
      }.bind(this)) : this.endaction($n$$, CREW);
    }.bind(this)) : this.endaction($n$$, CREW);
  }.bind($self$$))) : $self$$.endaction($n$$, CREW), $self$$.addstress()) : $self$$.endaction($n$$, CREW);
}}, {name:"Kylo Ren", type:CREW, faction:EMPIRE, points:3, unique:!0, done:!0, candoaction:function() {
  return 0 < this.unit.selectnearbyenemy(3).length;
}, action:function($n$$) {
  var $self$$ = this.unit, $p$$ = $self$$.selectnearbyenemy(3);
  this.resolveactionselect($p$$, function($k$$) {
    new Condition($p$$[$k$$], $self$$, "I'll Show You The Dark Side");
  }.bind(this));
}}, {name:"Operations Specialist", type:CREW, points:3, limited:!0, done:!0, init:function($sh$$) {
  var $self$$ = this;
  Unit.prototype.wrap_after("endattack", $self$$, function($c$$, $h$$, $t$$) {
    if ($self$$.isactive && this.isally($self$$.unit) && 2 >= this.getrange($self$$.unit) && 0 == $c$$ + $h$$) {
      var $p$$ = this.selectnearbyally(3);
      0 < $p$$.length && (console.log($self$$.name + " " + this.name), this.doselection(function($n$$) {
        this.resolveactionselect($p$$, function($k$$) {
          $p$$[$k$$].addfocustoken();
          this.endnoaction($n$$, "OP");
        }.bind(this));
      }.bind(this)));
    }
  });
}}, {name:"Targeting Synchronizer", type:TECH, points:3, done:!0, init:function($sh$jscomp$0$$) {
  var $self$$ = this;
  Unit.prototype.wrap_after("canusetarget", $self$$, function($sh$$, $r$$) {
    return $self$$.unit != this && $self$$.unit.isally(this) && 2 >= $self$$.unit.getrange(this) && -1 < $self$$.unit.targeting.indexOf($sh$$) ? !0 : $r$$;
  });
  Unit.prototype.wrap_before("removetarget", $self$$, function($t$$) {
    $self$$.unit != this && $self$$.unit.isally(this) && 2 >= $self$$.unit.getrange(this) && -1 == this.targeting.indexOf($t$$) && -1 < $self$$.unit.targeting.indexOf($t$$) && $self$$.unit.removetarget($t$$);
  });
}}, {name:"Hyperwave Comm Scanner", type:TECH, done:!0, points:1, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("endsetupphase", this, function() {
    var $p$$ = this.selectnearbyunit(2);
    if ($self$$.isactive) {
      for (var $i$$ in $p$$) {
        var $u$$ = $p$$[$i$$];
        $u$$.donoaction([{type:"FOCUS", name:$self$$.name, org:$self$$, action:function($n$$) {
          this.addfocustoken();
          this.endnoaction($n$$, "TECH");
        }.bind($u$$)}, {type:"EVADE", name:$self$$.name, org:$self$$, action:function($n$$) {
          $self$$.desactivate();
          this.addevadetoken();
          this.endnoaction($n$$, "TECH");
        }.bind($u$$)}], "+1 %EVADE% / %FOCUS%", !0);
      }
    }
  });
}}, {name:"Cassian Andor", type:CREW, points:2, faction:REBEL, unique:!0, init:function($sh$$) {
  $sh$$.wrap_after("endplanningphase", this, function() {
    var $p$$ = this.selectnearbyenemy(2);
    0 < $p$$ && this.doselection(function($n$$) {
      this.resolveactionselect($p$$, function($k$$) {
        this.guessmove($p$$[$k$$].maneuver);
      }.bind(this));
    }.bind(this));
  });
}}, {name:"Captain Rex", type:CREW, points:2, faction:REBEL, unique:!0, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("hashit", this, function($t$$, $b$$) {
    $b$$ || (this.log("+1 stress, +1 %FOCUS% [%0]", $self$$.name), this.addfocustoken());
    return $b$$;
  });
}}, {name:"EMP Device", unique:!0, type:ILLICIT, points:2, range:[1, 1], done:!0, isTurret:function() {
  return !0;
}, issecondary:!1, firesnd:"missile", isWeapon:function() {
  return !0;
}, getenemiesinrange:function() {
  return [this.unit];
}, declareattack:function($p$jscomp$165_target$$) {
  if (!this.isactive) {
    return !1;
  }
  $p$jscomp$165_target$$ = this.unit.selectnearbyunits(1, function($a$$, $b$$) {
    return $a$$ != $b$$;
  });
  for (i in $p$jscomp$165_target$$) {
    $p$jscomp$165_target$$[i].addiontoken(), $p$jscomp$165_target$$[i].addiontoken(), $p$jscomp$165_target$$[i].log("+2 %ION% [%0]", this.name);
  }
  this.isactive = !1;
  this.unit.cancelattack();
  return !1;
}, init:function($sh$$) {
  this.toString = Upgrade.prototype.toString;
}}, {name:"Captured TIE", unique:!0, type:MOD, ship:"TIE Fighter", faction:REBEL, points:1, done:!0, init:function($sh$$) {
  var $self$$ = this, $hasattacked$$ = !1;
  $sh$$.wrap_after("declareattack", function($t$$, $b$$) {
    $b$$ && ($hasattacked$$ = !0);
    return $b$$;
  });
  $sh$$.wrap_after("isenemy", this, function($t$$, $b$$) {
    return $b$$ || !$hasattacked$$ && $t$$.getskill() < this.getskill() && $self$$.isactive;
  });
}}, {name:"Inspiring Recruit", type:CREW, points:1, done:!0, init:function($sh$$) {
  var $self$$ = this;
  Unit.prototype.wrap_after("removestresstoken", this, function() {
    this.isally($sh$$) && 2 >= this.getrange($sh$$) && 0 < this.stress && (this.log("-1 stress token [%0]", $self$$.name), this.removestresstoken.vanilla.call(this));
  });
}}, {name:"Baze Malbus", type:CREW, points:3, unique:!0, done:!0, faction:REBEL, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.addattack(function($c$$, $h$$) {
    return this.weapons[0].isactive && 0 == $c$$ + $h$$;
  }, this, [$sh$$.weapons[0]], function() {
    this.noattack = round;
  }, function() {
    this.log("+1 attack [%0]", $self$$.name);
    return this.selectnearbyenemy(3, function($t$$, $s$$) {
      return $s$$ != targetunit;
    });
  });
}}, {name:"Bodhi Rook", type:CREW, points:1, unique:!0, faction:REBEL, done:!0, init:function($sh$$) {
  $sh$$.wrap_after("gettargetableunits", this, function($r$$, $nouse$$) {
    var $t$$ = [], $i$$;
    for ($i$$ in squadron) {
      squadron[$i$$].isally(this) && ($t$$ = $t$$.concat(Unit.prototype.gettargetableunits.vanilla.call($t$$, 3)));
    }
    return $t$$;
  });
}}, {name:"Adaptive Ailerons", type:TITLE, points:0, ship:"TIE Striker", done:!1}, {name:"Swarm Leader", unique:!0, points:3, type:ELITE, done:!0, init:function($sh$jscomp$0$$) {
  var $self$$ = this;
  $sh$jscomp$0$$.wrap_after("preattackroll", this, function($w$$, $t$$) {
    var $p$$ = this.selectnearbyally(3, function($me$$, $s$$) {
      return $s$$.canuseevade() && $s$$.isinfiringarc($t$$) ? !0 : !1;
    }), $bonus$$ = 0;
    0 < $p$$.length && ($bonus$$++, $p$$[0].removeevadetoken());
    1 < $p$$.length && ($bonus$$++, $p$$[1].removeevadetoken());
    this.log("+%1 attack die [%0]", $bonus$$, $self$$.name);
    this.wrap_after("getattackstrength", this, function($i$$, $sh$$, $a$$) {
      return $a$$ + $bonus$$;
    }).unwrapper("attackroll");
  });
}}, {name:"Lightweight Frame", type:MOD, points:2, agilitymax:3, ship:"TIE", done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_before("defenseroll", this, function($w$$, $a$$) {
    getattackdice() > getdefensedice() && (this.log("+1 defense roll [%0]", $self$$.name), this.wrap_after("getagility", $self$$, function($d$$) {
      return $d$$ + 1;
    }).unwrapper("defenseroll"));
  });
}}, {name:"'Light Scyk' Interceptor", type:TITLE, points:-2, ship:"M3-A Interceptor", lostupgrades:[MOD], done:!0, init:function($sh$$) {
  this.deal = function $this$deal$($crit$$, $face$$) {
    return $.Deferred().resolve({crit:$crit$$, face:FACEUP});
  };
  var $save$$ = [];
  $sh$$.installed = !0;
  $sh$$.wrap_after("getdial", this, function($gd$$) {
    if (0 == $save$$.length) {
      for (var $i$$ = 0;$i$$ < $gd$$.length;$i$$++) {
        var $move$$ = $gd$$[$i$$].move, $d$$ = $gd$$[$i$$].difficulty;
        $move$$.match(/BL\d|BR\d/) && ($d$$ = "GREEN");
        $save$$[$i$$] = {move:$move$$, difficulty:$d$$};
      }
    }
    return $save$$;
  });
}}, {name:"Hotshot Co-Pilot", type:CREW, points:4, done:!0, init:function($sh$$) {
  var $self$$ = this, $removeall$$ = function $$removeall$$$() {
    if (this.canusefocus()) {
      this.log("- %0 %FOCUS% [%1]", this.focus, $self$$.name);
      for (var $i$$ = 0;$i$$ < this.focus;$i$$++) {
        this.removefocustoken();
      }
    }
  };
  $sh$$.wrap_before("resolveattack", this, function($w$$, $t$$) {
    this.weapons[$w$$].isprimary && $t$$.wrap_before("endmodifydefensestep", $self$$, $removeall$$);
  });
  $sh$$.wrap_before("isattackedby", this, function($w$$, $t$$) {
    $t$$.wrap_before("endmodifyattackstep", $self$$, $removeall$$);
  });
}}, {name:"Trick Shot", type:ELITE, points:0, done:!0, init:function($sh$$) {
  var $self$$ = this;
  $sh$$.wrap_after("getattackstrength", this, function($i$$, $t$$, $a$$) {
    0 < this.getobstructiondef($t$$) && (this.log("obstructed attack => +1 die [%0]", $self$$.name), $a$$ += 1);
    return $a$$;
  });
}}, {name:"Bistan", type:CREW, points:2, unique:!0, done:!0, faction:REBEL, init:function($sh$$) {
  $sh$$.wrap_after("modifyattackroll", this, function($m$$, $n$$, $d$$, $mm$$) {
    2 >= this.getrange(targetunit) && ($mm$$ = $mm$$ + FCH_CRIT - FCH_HIT);
    return $mm$$;
  });
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return 2 >= $sh$$.getrange(targetunit);
  }.bind(this), aiactivate:function($m$$, $n$$) {
    return !0;
  }, f:function($m$$, $n$$) {
    0 < FCH_hit($m$$) && (this.unit.log("%HIT% -> %CRIT% [%0]", this.name), $m$$ = $m$$ + FCH_CRIT - FCH_HIT);
    return $m$$;
  }.bind(this), str:"hit"});
}}, {name:"Expertise", type:ELITE, rating:2, points:4, done:!0, init:function($sh$$) {
  $sh$$.wrap_after("modifyattackroll", this, function($m$$, $n$$, $d$$, $mm$$) {
    0 == this.stress && FCH_focus($mm$$) && ($mm$$ += (FCH_HIT - FCH_FOCUS) * FCH_focus($mm$$));
    return $mm$$;
  });
  $sh$$.adddicemodifier(ATTACK_M, MOD_M, ATTACK_M, this, {req:function($m$$, $n$$) {
    return 0 == $sh$$.stress;
  }.bind(this), aiactivate:function($m$$, $n$$) {
    return 0 < FCH_focus($m$$);
  }, f:function($m$$, $n$$) {
    0 < FCH_focus($m$$) && (this.unit.log("%FOCUS% -> %HIT% [%0]", this.name), $m$$ += FCH_focus($m$$) * (FCH_HIT - FCH_FOCUS));
    return $m$$;
  }.bind(this), str:"focus"});
}}, {name:"BoShek", type:CREW, points:2}];
var allunits = [];
function Team($team$$) {
  this.team = $team$$;
  this.initiative = this.isia = this.isdead = !1;
  this.units = [];
  this.allhits = this.allcrits = this.allevade = this.allred = this.allgreen = 0;
}
Team.prototype = {setia:function $Team$$setia$() {
  for (i in squadron) {
    if (u = squadron[i], squadron[i].team == this.team) {
      for (j in IAUnit.prototype) {
        squadron[i][j] = IAUnit.prototype[j];
      }
    }
  }
  this.ia = !0;
}, setplayer:function $Team$$setplayer$() {
  for (i in squadron) {
    if (u = squadron[i], squadron[i].team == this.team) {
      for (j in IAUnit.prototype) {
        "undefined" != typeof Unit.prototype[j] && (squadron[i][j] = Unit.prototype[j]);
      }
    }
  }
  this.ia = !1;
}, setfaction:function $Team$$setfaction$($faction$$) {
  $(".listunits .generic").remove();
  this.faction = $faction$$;
  $("#" + $faction$$ + "select").prop("checked", !0);
  this.color = "REBEL" == this.faction ? RED : "EMPIRE" == this.faction ? GREEN : YELLOW;
}, changefaction:function $Team$$changefaction$($faction$$) {
  $("#rocks").hide();
  $("#debris").hide();
  $("#caroussel").show();
  if (this.faction != $faction$$) {
    for (var $i$$ in generics) {
      generics[$i$$].team == this.team && delete generics[$i$$];
    }
    $("#totalpts").html(0);
    this.setfaction($faction$$);
    displayfactionunits();
  }
}, setrocks:function $Team$$setrocks$($r$$) {
  this.rocks = "undefined" == typeof $r$$ ? [-1, -1, -1] : $r$$;
}, displayrockdebris:function $Team$$displayrockdebris$($i$$, $m1$jscomp$4_w$$, $h$$, $s$$, $g$$, $viewport$$, $pa$$) {
  var $j$$ = $i$$ % MAXROCKS + ($i$$ >= MAXROCKS ? ROCKS.length : 0), $bb$$ = $g$$[$j$$].getBBox();
  $m1$jscomp$4_w$$ = $i$$ < MAXROCKS ? MT($i$$ * $m1$jscomp$4_w$$ / ROCKS.length + $m1$jscomp$4_w$$ / ROCKS.length / 4, $h$$ / 4 - $bb$$.height * $s$$ / 2).scale($s$$, $s$$) : MT(($i$$ - MAXROCKS) * $m1$jscomp$4_w$$ / DEBRISCLOUD.length + $m1$jscomp$4_w$$ / DEBRISCLOUD.length / 4, 3 * $h$$ / 4 - $bb$$.height * $s$$ / 2).scale($s$$, $s$$);
  $g$$[$j$$].transform($m1$jscomp$4_w$$);
  $g$$[$j$$].appendTo($viewport$$);
  $g$$[$j$$].hover(function() {
    $g$$[$j$$].attr({strokeWidth:12});
  }, function() {
    $g$$[$j$$].attr({strokeWidth:3});
  });
  $g$$[$j$$].click(function() {
    var $k$jscomp$96_n$$ = this.rocks.indexOf($i$$);
    if (-1 < $k$jscomp$96_n$$) {
      this.rocks[$k$jscomp$96_n$$] = -1, $g$$[$j$$].attr("fill", $pa$$);
    } else {
      -1 == this.rocks[0] ? this.rocks[0] = $i$$ : -1 == this.rocks[1] ? this.rocks[1] = $i$$ : -1 == this.rocks[2] && (this.rocks[2] = $i$$);
      if (-1 < this.rocks[0] && -1 < this.rocks[1] && -1 < this.rocks[2]) {
        for ($k$jscomp$96_n$$ = 0;3 > $k$jscomp$96_n$$;$k$jscomp$96_n$$++) {
          var $o$$ = OBSTACLES[$k$jscomp$96_n$$ + 3 * (this.team - 1)];
          $o$$.g.remove();
          OBSTACLES[$k$jscomp$96_n$$ + 3 * (this.team - 1)] = new Rock(this.rocks[$k$jscomp$96_n$$], [$o$$.tx, $o$$.ty, $o$$.alpha], this.team, $k$jscomp$96_n$$);
        }
      }
      -1 < this.rocks.indexOf($i$$) && $g$$[$j$$].attr("fill", halftone(this.color));
    }
  }.bind(this));
}, selectrocks:function $Team$$selectrocks$() {
  "undefined" == typeof this.rocks && (this.rocks = [-1, -1, -1]);
  $(".aster").empty();
  for (var $h$$ = Snap(".aster"), $g$$ = [], $viewport$$ = $h$$.g(), $maxw$$ = 0, $maxh_s$$ = 0, $padebris$$ = $h$$.image(DEBRISIMG, 0, 0, 256, 256).pattern(0, 0, 256, 256), $parock$$ = $h$$.image(ROCKIMG, 0, 0, 256, 256).pattern(0, 0, 256, 256), $i$$ = 0;$i$$ < ROCKS.length + DEBRISCLOUD.length;$i$$++) {
    $i$$ < ROCKS.length ? ($g$$[$i$$] = $h$$.path(ROCKS[$i$$]).attr({strokeWidth:3}), -1 < this.rocks.indexOf($i$$) ? $g$$[$i$$].attr({fill:halftone(this.color), stroke:this.color}) : $g$$[$i$$].attr({fill:$parock$$, stroke:"#888"})) : ($g$$[$i$$] = $h$$.path(DEBRISCLOUD[$i$$ - ROCKS.length]).attr({strokeWidth:3}), -1 < this.rocks.indexOf($i$$) ? $g$$[$i$$].attr({fill:halftone(this.color), stroke:this.color}) : $g$$[$i$$].attr({fill:$padebris$$, stroke:"#888"}));
    var $bb$jscomp$3_w$$ = $g$$[$i$$].getBBox();
    $maxw$$ < $bb$jscomp$3_w$$.width && ($maxw$$ = $bb$jscomp$3_w$$.width);
    $maxh_s$$ < $bb$jscomp$3_w$$.height && ($maxh_s$$ = $bb$jscomp$3_w$$.height);
  }
  $h$$ = $(".aster").height();
  $bb$jscomp$3_w$$ = $(".aster").width();
  $maxh_s$$ = $h$$ / 2 / $maxh_s$$;
  $bb$jscomp$3_w$$ / $maxw$$ / ROCKS.length < $maxh_s$$ && ($maxh_s$$ = $bb$jscomp$3_w$$ / $maxw$$ / ROCKS.length);
  for ($i$$ = 0;$i$$ < ROCKS.length;$i$$++) {
    this.displayrockdebris($i$$, $bb$jscomp$3_w$$, $h$$, $maxh_s$$, $g$$, $viewport$$, $parock$$);
  }
  for ($i$$ = 0;$i$$ < DEBRISCLOUD.length;$i$$++) {
    this.displayrockdebris($i$$ + MAXROCKS, $bb$jscomp$3_w$$, $h$$, $maxh_s$$, $g$$, $viewport$$, $padebris$$);
  }
}, checkdead:function $Team$$checkdead$() {
  var $i$$, $alldead$$ = !0;
  for ($i$$ = 0;$i$$ < this.units.length;$i$$++) {
    if (!this.units[$i$$].dead) {
      $alldead$$ = !1;
      break;
    }
  }
  return this.isdead = $alldead$$;
}, toggleplayer:function $Team$$toggleplayer$($name$$) {
  this.isia = !this.isia;
}, updatepoints:function $Team$$updatepoints$() {
  var $tot$$ = 0;
  $("#listunits li").each(function() {
    var $s$$ = 0;
    $(this).find(".pts").each(function() {
      $s$$ += parseInt($(this).text());
    });
    $(this).find(".upts").html($s$$);
    $tot$$ += $s$$;
  });
  $("#totalpts").html($tot$$);
}, addunit:function $Team$$addunit$($n$jscomp$328_u$$) {
  -1 == $n$jscomp$328_u$$ && log("unknown addunit pilot " + pilots[$n$jscomp$328_u$$]);
  $n$jscomp$328_u$$ = new Unit(this.team, $n$jscomp$328_u$$);
  $("#listunits").append("" + $n$jscomp$328_u$$);
  this.updatepoints();
}, tosquadron:function $Team$$tosquadron$($s$jscomp$64_upg$$) {
  var $sortable$$ = [], $i$$, $j$$, $sortable$$ = this.sortedgenerics(), $team1$$ = 0, $id$$ = 0;
  for ($i$$ in generics) {
    1 == generics[$i$$].team && $team1$$++;
  }
  for ($i$$ = 0;$i$$ < $sortable$$.length;$i$$++) {
    if (this.team == $sortable$$[$i$$].team) {
      $sortable$$[$i$$].id = $id$$++;
      2 == $sortable$$[$i$$].team && ($sortable$$[$i$$].id += $team1$$);
      var $u$$ = $sortable$$[$i$$];
      for ($j$$ in PILOTS[$u$$.pilotid]) {
        var $p$$ = PILOTS[$u$$.pilotid];
        "function" == typeof $p$$[$j$$] && ($u$$[$j$$] = $p$$[$j$$]);
      }
      $u$$.tosquadron($s$jscomp$64_upg$$);
      allunits.push($u$$);
      squadron.push($u$$);
      this.units.push($u$$);
    }
  }
  for ($i$$ in squadron) {
    $u$$ = squadron[$i$$], $u$$.team == this.team && "function" == typeof $u$$.init && $u$$.init();
  }
  for ($i$$ in squadron) {
    if ($u$$ = squadron[$i$$], $u$$.team == this.team) {
      for ($j$$ = 0;$j$$ < $u$$.upgrades.length;$j$$++) {
        $s$jscomp$64_upg$$ = $u$$.upgrades[$j$$], 0 <= $s$jscomp$64_upg$$.id && "function" == typeof UPGRADES[$s$jscomp$64_upg$$.id].uninstall && UPGRADES[$s$jscomp$64_upg$$.id].uninstall($u$$), "function" == typeof $s$jscomp$64_upg$$.install && $s$jscomp$64_upg$$.install($u$$);
      }
    }
  }
  for ($i$$ in squadron) {
    if ($u$$ = squadron[$i$$], $u$$.team == this.team) {
      for ($j$$ = 0;$j$$ < $u$$.upgrades.length;$j$$++) {
        $s$jscomp$64_upg$$ = $u$$.upgrades[$j$$], "function" != typeof $s$jscomp$64_upg$$.init || $u$$.isdocked || $s$jscomp$64_upg$$.init($u$$);
      }
    }
  }
  this.units.sort(function($a$$, $b$$) {
    return $b$$.getskill() - $a$$.getskill();
  });
  this.history = {title:{text:UI_translation["Damage taken per turn"]}, axisX:{interval:1, title:UI_translation.Turns}, axisY:{title:UI_translation["Cumulated damage"]}, rawdata:[], data:[{indexLabelFontColor:"darkSlateGray", name:"views", type:"area", color:"rgba(200,10,10,0.8)", markerSize:8, dataPoints:[]}]};
  return this.units;
}, endsetup:function $Team$$endsetup$() {
  var $i$$;
  for ($i$$ = 0;$i$$ < this.units.length;$i$$++) {
    this.units[$i$$].g.undrag();
  }
}, endselection:function $Team$$endselection$($i$jscomp$260_s$$) {
  var $team$$ = this.team;
  this.name = $("#teamname" + this.team).val();
  "" == this.name && (this.name = "Squad #" + $team$$);
  $("#team" + $team$$).empty();
  $("#importexport" + $team$$).remove();
  sq = this.tosquadron($i$jscomp$260_s$$);
  for ($i$jscomp$260_s$$ = 0;$i$jscomp$260_s$$ < sq.length;$i$jscomp$260_s$$++) {
    if (1 == $team$$) {
      if (0 >= sq[$i$jscomp$260_s$$].tx || 0 >= sq[$i$jscomp$260_s$$].ty) {
        sq[$i$jscomp$260_s$$].tx = 80 - (sq[$i$jscomp$260_s$$].islarge ? 20 : 0), sq[$i$jscomp$260_s$$].ty = 70 + 82 * $i$jscomp$260_s$$, sq[$i$jscomp$260_s$$].alpha = 90;
      }
      $("#team1").append('<div id="' + sq[$i$jscomp$260_s$$].id + '" onclick=\'select($(this).attr("id"))\'>' + sq[$i$jscomp$260_s$$] + "</div>");
    } else {
      if (0 >= sq[$i$jscomp$260_s$$].tx || 0 >= sq[$i$jscomp$260_s$$].ty) {
        sq[$i$jscomp$260_s$$].tx = 820 + (sq[$i$jscomp$260_s$$].islarge ? 20 : 0), sq[$i$jscomp$260_s$$].ty = 70 + 82 * $i$jscomp$260_s$$, sq[$i$jscomp$260_s$$].alpha = -90;
      }
      $("#team2").append('<div id="' + sq[$i$jscomp$260_s$$].id + '" onclick=\'select("' + sq[$i$jscomp$260_s$$].id + "\")'>" + sq[$i$jscomp$260_s$$] + "</div>");
    }
    sq[$i$jscomp$260_s$$].m.translate(sq[$i$jscomp$260_s$$].tx, sq[$i$jscomp$260_s$$].ty).rotate(sq[$i$jscomp$260_s$$].alpha, 0, 0);
    sq[$i$jscomp$260_s$$].show();
  }
  $("#team" + $team$$).css("top", $("nav").height() + 2);
  activeunit = sq[0];
}, sortedgenerics:function $Team$$sortedgenerics$() {
  var $sortable$$ = [], $i$$;
  for ($i$$ in generics) {
    generics[$i$$].team == this.team && $sortable$$.push(generics[$i$$]);
  }
  $sortable$$.sort(function($a$$, $b$$) {
    "undefined" == typeof $a$$.points && log("undefined score");
    return $a$$.points < $b$$.points ? -1 : $a$$.points > $b$$.points ? 1 : $a$$.toJuggler(!1) < $b$$.toJuggler(!1);
  });
  return $sortable$$;
}, toASCII:function $Team$$toASCII$() {
  for (var $s$$ = "", $sortable$$ = this.sortedgenerics(), $i$$ = 0;$i$$ < $sortable$$.length;$i$$++) {
    $s$$ += $sortable$$[$i$$].toASCII() + ";";
  }
  return $s$$;
}, toKey:function $Team$$toKey$() {
  var $s$$ = "", $p$$ = [], $i$$;
  for ($i$$ in generics) {
    generics[$i$$].team == this.team && $p$$.push(generics[$i$$]);
  }
  $p$$.sort(function($a$$, $b$$) {
    return $a$$.pilotid - $b$$.pilotid;
  });
  for ($i$$ = 0;$i$$ < $p$$.length;$i$$++) {
    $s$$ += $p$$[$i$$].toKey() + ";";
  }
  return $s$$;
}, toJSON:function $Team$$toJSON$() {
  var $s$$ = {description:""};
  $s$$.faction = {REBEL:"rebels", SCUM:"scum", EMPIRE:"empire"}[this.faction];
  $s$$.name = this.name;
  for (var $sq$$ = [], $pts$$ = 0, $sortable$$ = this.sortedgenerics(), $i$$ = 0;$i$$ < $sortable$$.length;$i$$++) {
    var $jp$$ = $sortable$$[$i$$].toJSON(), $pts$$ = $pts$$ + $jp$$.points;
    $sq$$.push($jp$$);
  }
  $s$$.pilots = $sq$$;
  this.points = $s$$.points = $pts$$;
  $s$$.vendor = {xwsbenchmark:{builder:"Ynot Squadron Benchmark", builder_url:"http://ynot6517.github.io/bench/"}};
  $s$$.version = "0.3.0";
  return $s$$;
}, toJuggler:function $Team$$toJuggler$($translated$$) {
  for (var $s$$ = "", $sortable$$ = this.sortedgenerics(), $i$$ = 0;$i$$ < $sortable$$.length;$i$$++) {
    $s$$ += $sortable$$[$i$$].toJuggler($translated$$) + "\n";
  }
  return $s$$;
}, parseJuggler:function $Team$$parseJuggler$($str$$, $translated$$) {
  var $f$jscomp$0$$, $i$$, $j$$, $k$jscomp$97_v$$;
  $f$jscomp$0$$ = -1;
  var $getf$$ = function $$getf$$$($f$$) {
    return "REBEL" == $f$$ ? 1 : "SCUM" == $f$$ ? 2 : 4;
  };
  $f$jscomp$0$$ = 7;
  if ("" != $str$$) {
    var $pilots$$ = $str$$.trim().split("\n");
    for ($i$$ in generics) {
      generics[$i$$].team == this.team && delete generics[$i$$];
    }
    for ($i$$ = 0;$i$$ < $pilots$$.length;$i$$++) {
      var $pstr$$ = $pilots$$[$i$$].split(/\s+\+\s+/), $lf$$ = 0;
      for ($j$$ = 0;$j$$ < PILOTS.length;$j$$++) {
        $k$jscomp$97_v$$ = PILOTS[$j$$].name;
        var $p$$ = translate($k$jscomp$97_v$$), $authupg_pu$$ = "";
        1 == PILOTS[$j$$].ambiguous && "undefined" != typeof PILOTS[$j$$].edition && ($authupg_pu$$ = "(" + PILOTS[$j$$].edition + ")");
        $p$$ += $authupg_pu$$;
        $k$jscomp$97_v$$ += $authupg_pu$$;
        $k$jscomp$97_v$$.replace(/\'/g, "") == $pstr$$[0] && ($lf$$ |= $getf$$(PILOTS[$j$$].faction));
        $p$$.replace(/\'/g, "") == $pstr$$[0] && ($lf$$ |= $getf$$(PILOTS[$j$$].faction));
      }
      $f$jscomp$0$$ &= $lf$$;
    }
    this.faction = 1 == ($f$jscomp$0$$ & 1) ? "REBEL" : 2 == ($f$jscomp$0$$ & 2) ? "SCUM" : "EMPIRE";
    this.color = "REBEL" == this.faction ? RED : "EMPIRE" == this.faction ? GREEN : YELLOW;
    for ($i$$ = 0;$i$$ < $pilots$$.length;$i$$++) {
      $f$jscomp$0$$ = -1;
      $pstr$$ = $pilots$$[$i$$].split(/\s+\+\s+/);
      for ($j$$ = 0;$j$$ < PILOTS.length;$j$$++) {
        if ($p$$ = $k$jscomp$97_v$$ = PILOTS[$j$$].name, $authupg_pu$$ = "", PILOTS[$j$$].faction == this.faction) {
          $p$$ = translate($k$jscomp$97_v$$);
          1 == PILOTS[$j$$].ambiguous && "undefined" != typeof PILOTS[$j$$].edition && ($authupg_pu$$ = "(" + PILOTS[$j$$].edition + ")");
          $k$jscomp$97_v$$ += $authupg_pu$$;
          $p$$ += $authupg_pu$$;
          if ($k$jscomp$97_v$$.replace(/\'/g, "") == $pstr$$[0]) {
            $f$jscomp$0$$ = $j$$;
            break;
          }
          if ($p$$.replace(/\'/g, "") == $pstr$$[0]) {
            $f$jscomp$0$$ = $j$$;
            $translated$$ = !0;
            break;
          }
        }
      }
      -1 == $f$jscomp$0$$ && console.log("pid undefined:" + $translated$$ + "!!" + $pstr$$[0] + "!!" + this.faction);
      -1 == $f$jscomp$0$$ && log("unknown Juggler pilot:" + $pilots$$[$i$$] + "/" + $str$$);
      $p$$ = new Unit(this.team, $f$jscomp$0$$);
      $p$$.upg = [];
      for ($j$$ = 0;10 > $j$$;$j$$++) {
        $p$$.upg[$j$$] = -1;
      }
      $authupg_pu$$ = [TITLE, MOD].concat(PILOTS[$p$$.pilotid].upgrades);
      for ($j$$ = 1;$j$$ < $pstr$$.length;$j$$++) {
        for ($k$jscomp$97_v$$ = 0;$k$jscomp$97_v$$ < UPGRADES.length;$k$jscomp$97_v$$++) {
          if (1 == $translated$$ && translate(UPGRADES[$k$jscomp$97_v$$].name).replace(/\'/g, "").replace(/\(Crew\)/g, "") == $pstr$$[$j$$] || UPGRADES[$k$jscomp$97_v$$].name.replace(/\'/g, "") == $pstr$$[$j$$]) {
            if (-1 < $authupg_pu$$.indexOf(UPGRADES[$k$jscomp$97_v$$].type)) {
              "undefined" != typeof UPGRADES[$k$jscomp$97_v$$].upgrades && ("Cannon|Torpedo|Missile" == UPGRADES[$k$jscomp$97_v$$].upgrades[0] ? ($authupg_pu$$ = $authupg_pu$$.concat(["Cannon", "Torpedo", "Missile"]), $p$$.upgradetype = $p$$.upgradetype.concat(["Cannon", "Torpedo", "Missile"])) : ($authupg_pu$$ = $authupg_pu$$.concat(UPGRADES[$k$jscomp$97_v$$].upgrades), "" != typeof UPGRADES[$k$jscomp$97_v$$].upgrades && ($p$$.upgradetype = $p$$.upgradetype.concat(UPGRADES[$k$jscomp$97_v$$].upgrades))));
              break;
            }
            $k$jscomp$97_v$$ == UPGRADES.length && log("UPGRADE undefined: " + $pstr$$[$j$$]);
          }
        }
      }
      for ($j$$ = 1;$j$$ < $pstr$$.length;$j$$++) {
        for ($k$jscomp$97_v$$ = 0;$k$jscomp$97_v$$ < UPGRADES.length;$k$jscomp$97_v$$++) {
          if (1 == $translated$$ && translate(UPGRADES[$k$jscomp$97_v$$].name).replace(/\'/g, "").replace(/\(Crew\)/g, "") == $pstr$$[$j$$] || UPGRADES[$k$jscomp$97_v$$].name.replace(/\'/g, "") == $pstr$$[$j$$]) {
            if (-1 < $authupg_pu$$.indexOf(UPGRADES[$k$jscomp$97_v$$].type)) {
              for ($f$jscomp$0$$ = 0;$f$jscomp$0$$ < $p$$.upgradetype.length;$f$jscomp$0$$++) {
                if ($p$$.upgradetype[$f$jscomp$0$$] == UPGRADES[$k$jscomp$97_v$$].type && -1 == $p$$.upg[$f$jscomp$0$$]) {
                  $p$$.upg[$f$jscomp$0$$] = $k$jscomp$97_v$$;
                  break;
                }
              }
              break;
            } else {
              log("** " + $pstr$$[$j$$] + " UPGRADE not listed: " + UPGRADES[$k$jscomp$97_v$$].type + " in " + $p$$.name);
            }
          }
        }
      }
    }
  }
}, parseASCII:function $Team$$parseASCII$($pilots$jscomp$2_str$$) {
  $pilots$jscomp$2_str$$ = $pilots$jscomp$2_str$$.split(";");
  for (var $i$$ in generics) {
    generics[$i$$].team == this.team && delete generics[$i$$];
  }
  for ($i$$ = 0;$i$$ < $pilots$jscomp$2_str$$.length - 1;$i$$++) {
    var $c$jscomp$84_coord$$ = $pilots$jscomp$2_str$$[$i$$].split(":"), $updstr$$ = $c$jscomp$84_coord$$[0].split(","), $p$jscomp$170_pid$$ = parseInt($updstr$$[0], 10);
    this.faction = PILOTS[$p$jscomp$170_pid$$].faction;
    this.color = "REBEL" == this.faction ? RED : "EMPIRE" == this.faction ? GREEN : YELLOW;
    -1 == $p$jscomp$170_pid$$ && log("unknown ASCII pilot " + $pilots$jscomp$2_str$$[$i$$]);
    $p$jscomp$170_pid$$ = new Unit(this.team, $p$jscomp$170_pid$$);
    $p$jscomp$170_pid$$.upg = [];
    for (var $j$$ = 0;10 > $j$$;$j$$++) {
      $p$jscomp$170_pid$$.upg[$j$$] = -1;
    }
    for ($j$$ = 1;$j$$ < $updstr$$.length;$j$$++) {
      for (var $n$$ = parseInt($updstr$$[$j$$], 10), $f$$ = 0;$f$$ < $p$jscomp$170_pid$$.upgradetype.length;$f$$++) {
        if ($p$jscomp$170_pid$$.upgradetype[$f$$] == UPGRADES[$n$$].type && -1 == $p$jscomp$170_pid$$.upg[$f$$]) {
          $p$jscomp$170_pid$$.upg[$f$$] = $n$$;
          break;
        }
      }
    }
    1 < $c$jscomp$84_coord$$.length && ($c$jscomp$84_coord$$ = $c$jscomp$84_coord$$[1].split(","), $p$jscomp$170_pid$$.tx = parseInt($c$jscomp$84_coord$$[0], 10), $p$jscomp$170_pid$$.ty = parseInt($c$jscomp$84_coord$$[1], 10), $p$jscomp$170_pid$$.alpha = parseInt($c$jscomp$84_coord$$[2], 10));
  }
}, parseJSON:function $Team$$parseJSON$($str$$, $translated$$) {
  var $s$$, $f$jscomp$63_pid$$ = {rebel:REBEL, scum:SCUM, imperial:EMPIRE};
  try {
    $s$$ = $.parseJSON($str$$), ga("send", "event", {eventCategory:"social", eventAction:"receive", eventLabel:"xws"});
  } catch ($err$$) {
    return this.parseJuggler($str$$, $translated$$);
  }
  var $i$$, $j$$, $k$$;
  this.name = $s$$.name;
  this.points = $s$$.points;
  this.faction = $f$jscomp$63_pid$$[$s$$.faction];
  this.color = "REBEL" == this.faction ? RED : "EMPIRE" == this.faction ? GREEN : YELLOW;
  for ($i$$ in generics) {
    generics[$i$$].team == this.team && delete generics[$i$$];
  }
  for ($i$$ = 0;$i$$ < $s$$.pilots.length;$i$$++) {
    var $pilot$$ = $s$$.pilots[$i$$], $p$$, $f$jscomp$63_pid$$ = -1;
    $pilot$$.team = this.team;
    for ($j$$ = 0;$j$$ < PILOTS.length;$j$$++) {
      if (PILOTS[$j$$].faction == this.faction && PILOTS[$j$$].unit == PILOT_dict[$pilot$$.ship] && (va = PILOTS[$j$$].name, va == PILOT_dict[$pilot$$.name])) {
        $f$jscomp$63_pid$$ = $j$$;
        break;
      }
    }
    if (-1 == $f$jscomp$63_pid$$) {
      throw "pid undefined:" + PILOT_dict[$pilot$$.name];
    }
    $p$$ = new Unit(this.team, $f$jscomp$63_pid$$);
    $p$$.upg = [];
    for ($j$$ = 0;10 > $j$$;$j$$++) {
      $p$$.upg[$j$$] = -1;
    }
    if ("undefined" != typeof $pilot$$.upgrades) {
      var $nupg$$ = 0;
      for ($j$$ in $pilot$$.upgrades) {
        var $upg$$ = $pilot$$.upgrades[$j$$];
        for ($k$$ = 0;$k$$ < $upg$$.length;$k$$++) {
          $nupg$$++;
          for (var $z$$ = 0;$z$$ < UPGRADES.length;$z$$++) {
            if (UPGRADES[$z$$].name == UPGRADE_dict[$upg$$[$k$$]]) {
              for ($f$jscomp$63_pid$$ = 0;$f$jscomp$63_pid$$ < $p$$.upgradetype.length;$f$jscomp$63_pid$$++) {
                if ($p$$.upgradetype[$f$jscomp$63_pid$$] == UPGRADES[$z$$].type && -1 == $p$$.upg[$f$jscomp$63_pid$$]) {
                  $p$$.upg[$f$jscomp$63_pid$$] = $z$$;
                  break;
                }
              }
              break;
            }
          }
        }
      }
    }
  }
}};
var Resample = function($canvas$$) {
  function $onerror$$() {
    throw "not found: " + this.src;
  }
  function $onload$$() {
    var $width$$ = this._width, $height$$ = this._height, $onresample$$ = this._onresample, $minValue$$ = Math.min(this.height, this.width);
    null == $width$$ && ($width$$ = $round$$(this.width * $height$$ / this.height));
    null == $height$$ && ($height$$ = $round$$(this.height * $width$$ / this.width));
    delete this._onresample;
    delete this._width;
    delete this._height;
    $canvas$$.width = $width$$;
    $canvas$$.height = $height$$;
    $context$$.drawImage(this, 0, 0, $minValue$$, $minValue$$, 0, 0, $width$$, $height$$);
    $onresample$$($canvas$$.toDataURL("image/png"));
  }
  var $context$$ = $canvas$$.getContext("2d"), $round$$ = Math.round;
  return function Resample($img$$, $width$$, $height$$, $onresample$$) {
    var $load$$ = "string" == typeof $img$$, $i$$ = $load$$ || $img$$;
    $load$$ && ($i$$ = new Image, $i$$.onload = $onload$$, $i$$.onerror = $onerror$$);
    $i$$._onresample = $onresample$$;
    $i$$._width = $width$$;
    $i$$._height = $height$$;
    $load$$ ? $i$$.src = $img$$ : $onload$$.call($img$$);
  };
}(this.document.createElement("canvas"));
(function() {
  var $s$$, $Avatar$$ = {settings:{bod:$("#setting"), img:$("#profile-avatar"), fileInput:$("#uploader")}, init:function() {
    $s$$ = $Avatar$$.settings;
    var $timer$$;
    $s$$.bod.on("dragover", function($event$$) {
      clearTimeout($timer$$);
      $event$$.currentTarget == $s$$.bod[0] && $Avatar$$.showDroppableArea();
      return !1;
    });
    $s$$.bod.on("dragleave", function($event$$) {
      $event$$.currentTarget == $s$$.bod[0] && ($timer$$ = setTimeout(function() {
        $Avatar$$.hideDroppableArea();
      }, 200));
    });
    $s$$.bod.on("drop", function($event$$) {
      $event$$.preventDefault();
      $Avatar$$.handleDrop($event$$.dataTransfer.files);
    });
    $s$$.fileInput.on("change", function($event$$) {
      $Avatar$$.handleDrop($event$$.target.files);
    });
  }, showDroppableArea:function() {
    $s$$.bod.addClass("droppable");
  }, hideDroppableArea:function() {
    $s$$.bod.removeClass("droppable");
  }, handleDrop:function($file_files$$) {
    $Avatar$$.hideDroppableArea();
    $file_files$$ = $file_files$$[0];
    "undefined" !== typeof $file_files$$ && $file_files$$.type.match("image.*") ? $Avatar$$.resizeImage($file_files$$, 16, function($data$$) {
      $Avatar$$.placeImage($data$$);
    }) : alert("That file wasn't an image.");
  }, resizeImage:function($file$$, $size$$, $callback$$) {
    var $fileTracker$$ = new FileReader;
    $fileTracker$$.onload = function $$fileTracker$$$onload$() {
      Resample(this.result, $size$$, $size$$, $callback$$);
    };
    $fileTracker$$.readAsDataURL($file$$);
    $fileTracker$$.onabort = function $$fileTracker$$$onabort$() {
      alert("The upload was aborted.");
    };
    $fileTracker$$.onerror = function $$fileTracker$$$onerror$() {
      alert("An error occured while reading the file.");
    };
  }, placeImage:function($data$$) {
    $s$$.img.attr("src", $data$$);
    localStorage.image = $data$$;
  }};
  $Avatar$$.init();
})();
var a1 = [.25, .375];
a1[10] = .125;
a1[100] = .25;
var d1 = [.375, .375];
d1[10] = .25;
function addattackdice($n$$, $proba$$) {
  var $f$$, $c$$, $h$$, $i$$, $p$$ = [];
  for ($f$$ = 0;$f$$ < $n$$;$f$$++) {
    for ($h$$ = 0;$h$$ < $n$$ - $f$$;$h$$++) {
      for ($c$$ = 0;$c$$ < $n$$ - $h$$ - $f$$;$c$$++) {
        $i$$ = 100 * $f$$ + $h$$ + 10 * $c$$, $p$$[$i$$] = 0, $p$$[$i$$ + 1] = 0, $p$$[$i$$ + 10] = 0, $p$$[$i$$ + 100] = 0;
      }
    }
  }
  for ($f$$ = 0;$f$$ < $n$$;$f$$++) {
    for ($h$$ = 0;$h$$ < $n$$ - $f$$;$h$$++) {
      for ($c$$ = 0;$c$$ < $n$$ - $h$$ - $f$$;$c$$++) {
        $i$$ = 100 * $f$$ + $h$$ + 10 * $c$$, $p$$[$i$$] += $proba$$[$i$$] * a1[0], $p$$[$i$$ + 1] += $proba$$[$i$$] * a1[1], $p$$[$i$$ + 10] += $proba$$[$i$$] * a1[10], $p$$[$i$$ + 100] += $proba$$[$i$$] * a1[100];
      }
    }
  }
  return $p$$;
}
function adddefensedice($n$$, $proba$$) {
  var $f$$, $e$$, $i$$, $p$$ = [];
  for ($f$$ = 0;$f$$ < $n$$;$f$$++) {
    for ($e$$ = 0;$e$$ < $n$$ - $f$$;$e$$++) {
      $i$$ = 10 * $f$$ + $e$$, $p$$[$i$$] = 0, $p$$[$i$$ + 1] = 0, $p$$[$i$$ + 10] = 0;
    }
  }
  for ($f$$ = 0;$f$$ < $n$$;$f$$++) {
    for ($e$$ = 0;$e$$ < $n$$ - $f$$;$e$$++) {
      $i$$ = 10 * $f$$ + $e$$, $p$$[$i$$] += $proba$$[$i$$] * d1[0], $p$$[$i$$ + 1] += $proba$$[$i$$] * d1[1], $p$$[$i$$ + 10] += $proba$$[$i$$] * d1[10];
    }
  }
  return $p$$;
}
function attackproba($n$$) {
  var $i$$, $proba$$ = [];
  $proba$$[0] = a1[0];
  $proba$$[1] = a1[1];
  $proba$$[10] = a1[10];
  $proba$$[100] = a1[100];
  for ($i$$ = 2;$i$$ <= $n$$;$i$$++) {
    $proba$$ = addattackdice($i$$, $proba$$);
  }
  return $proba$$;
}
function defenseproba($n$$) {
  var $i$$, $proba$$ = [];
  $proba$$[0] = d1[0];
  $proba$$[1] = d1[1];
  $proba$$[10] = d1[10];
  for ($i$$ = 2;$i$$ <= $n$$;$i$$++) {
    $proba$$ = adddefensedice($i$$, $proba$$);
  }
  return $proba$$;
}
function attackwithreroll($tokensA$$, $at$$, $attack$$) {
  var $f$$, $h$$, $c$$, $b$$, $h2$$, $c2$$, $i$$, $j$$, $p$$ = [];
  if (0 == $tokensA$$.reroll || "undefined" == typeof $tokensA$$.reroll) {
    return $at$$;
  }
  for ($f$$ = 0;$f$$ <= $attack$$;$f$$++) {
    for ($h$$ = 0;$h$$ <= $attack$$ - $f$$;$h$$++) {
      for ($c$$ = 0;$c$$ <= $attack$$ - $h$$ - $f$$;$c$$++) {
        $i$$ = 100 * $f$$ + $h$$ + 10 * $c$$, $p$$[$i$$] = 0;
      }
    }
  }
  var $newf$$, $r$$;
  for ($f$$ = 0;$f$$ <= $attack$$;$f$$++) {
    for ($h$$ = 0;$h$$ <= $attack$$ - $f$$;$h$$++) {
      for ($c$$ = 0;$c$$ <= $attack$$ - $h$$ - $f$$;$c$$++) {
        if ($i$$ = 100 * $f$$ + $h$$ + 10 * $c$$, $b$$ = $attack$$ - $h$$ - $c$$ - $f$$, $r$$ = $tokensA$$.reroll, $newf$$ = $f$$, $tokensA$$.reroll > $b$$ && (0 == $tokensA$$.focus ? $tokensA$$.reroll > $f$$ + $b$$ ? ($r$$ = $f$$ + $b$$, $newf$$ = 0) : $newf$$ = $f$$ - ($r$$ - $b$$) : $r$$ = $b$$), 0 == $r$$) {
          $p$$[$i$$] += $at$$[$i$$];
        } else {
          for ($b$$ = 0;$b$$ <= $r$$;$b$$++) {
            for ($h2$$ = 0;$h2$$ <= $r$$ - $b$$;$h2$$++) {
              for ($c2$$ = 0;$c2$$ <= $r$$ - $b$$ - $h2$$;$c2$$++) {
                $j$$ = 100 * $b$$ + $h2$$ + 10 * $c2$$, k = 100 * ($newf$$ + $b$$) + $h$$ + $h2$$ + 10 * ($c$$ + $c2$$), $p$$[k] += $at$$[$i$$] * ATTACK[$r$$][$j$$];
              }
            }
          }
        }
      }
    }
  }
  return $p$$;
}
function defendwithreroll($tokensD$$, $dt$$, $defense$$) {
  var $f$$, $e$$, $b$jscomp$62_f2$$, $e2$$, $i$$, $j$$, $p$$ = [];
  if (0 == $tokensD$$.reroll || "undefined" == typeof $tokensD$$.reroll) {
    return $dt$$;
  }
  for ($f$$ = 0;$f$$ <= $defense$$;$f$$++) {
    for ($e$$ = 0;$e$$ <= $defense$$ - $f$$;$e$$++) {
      $p$$[10 * $f$$ + $e$$] = 0;
    }
  }
  var $newf$$, $r$$;
  for ($f$$ = 0;$f$$ <= $defense$$;$f$$++) {
    for ($e$$ = 0;$e$$ <= $defense$$ - $f$$;$e$$++) {
      if ($i$$ = 10 * $f$$ + $e$$, $b$jscomp$62_f2$$ = $defense$$ - $e$$ - $f$$, $r$$ = $tokensD$$.reroll, $newf$$ = $f$$, $tokensD$$.reroll > $b$jscomp$62_f2$$ && (0 == $tokensD$$.focus ? $tokensD$$.reroll > $f$$ + $b$jscomp$62_f2$$ ? ($r$$ = $f$$ + $b$jscomp$62_f2$$, $newf$$ = 0) : $newf$$ = $f$$ - ($r$$ - $b$jscomp$62_f2$$) : $r$$ = $b$jscomp$62_f2$$), 0 == $r$$) {
        $p$$[$i$$] += $dt$$[$i$$];
      } else {
        for ($b$jscomp$62_f2$$ = 0;$b$jscomp$62_f2$$ <= $r$$;$b$jscomp$62_f2$$++) {
          for ($e2$$ = 0;$e2$$ <= $r$$ - $b$jscomp$62_f2$$;$e2$$++) {
            $j$$ = 10 * $b$jscomp$62_f2$$ + $e2$$, k = 10 * ($newf$$ + $b$jscomp$62_f2$$) + $e$$ + $e2$$, $p$$[k] += $dt$$[$i$$] * DEFENSE[$r$$][$j$$];
          }
        }
      }
    }
  }
  return $p$$;
}
function tohitproba($attacker$$, $weapon$$, $defender$$, $ATable_at$$, $dt$jscomp$1_f$$, $attack$$, $defense$$) {
  var $p$$ = [], $fd_k$jscomp$99_w$$, $h$$, $c$$, $d$$, $fa_i$jscomp$276_m$$, $j$$, $hit$jscomp$1_n$$, $attack2_evade$jscomp$1_r$jscomp$64_thp$$, $tot$$ = 0, $mean$$ = 0, $meanc$$ = 0, $DTable$$ = $dt$jscomp$1_f$$;
  $dt$jscomp$1_f$$ = 0 == $defense$$ ? [] : $dt$jscomp$1_f$$;
  for ($h$$ = 0;$h$$ <= $attack$$;$h$$++) {
    for ($c$$ = 0;$c$$ <= $attack$$ - $h$$;$c$$++) {
      $fa_i$jscomp$276_m$$ = $h$$ + 10 * $c$$, $p$$[$fa_i$jscomp$276_m$$] = 0;
    }
  }
  if ("undefined" == typeof $ATable_at$$) {
    return {proba:[], tohit:0, meanhit:0, meancritical:0, tokill:0};
  }
  $ATable_at$$ = attackwithreroll($attacker$$, $ATable_at$$, $attack$$);
  0 < $defense$$ && ($DTable$$ = defendwithreroll($defender$$, $dt$jscomp$1_f$$, $defense$$));
  for ($dt$jscomp$1_f$$ = 0;$dt$jscomp$1_f$$ <= $attack$$;$dt$jscomp$1_f$$++) {
    for ($h$$ = 0;$h$$ <= $attack$$ - $dt$jscomp$1_f$$;$h$$++) {
      for ($c$$ = 0;$c$$ <= $attack$$ - $h$$ - $dt$jscomp$1_f$$;$c$$++) {
        $hit$jscomp$1_n$$ = FCH_FOCUS * $dt$jscomp$1_f$$ + FCH_CRIT * $c$$ + FCH_HIT * $h$$;
        var $ca$$, $ff$$, $ef$$, $focusa$$ = $attacker$$.focus, $savedreroll$$ = $attacker$$.reroll, $a$$ = $ATable_at$$[FCH_FOCUS * $dt$jscomp$1_f$$ + FCH_HIT * $h$$ + FCH_CRIT * $c$$];
        "undefined" != typeof $weapon$$.modifyattackroll && ($hit$jscomp$1_n$$ = $weapon$$.modifyattackroll($hit$jscomp$1_n$$, $attack$$, $defender$$));
        "undefined" != typeof $attacker$$.modifyattackroll && ($hit$jscomp$1_n$$ = $attacker$$.modifyattackroll($hit$jscomp$1_n$$, $attack$$, $defender$$));
        $fa_i$jscomp$276_m$$ = FCH_focus($hit$jscomp$1_n$$);
        $ca$$ = FCH_crit($hit$jscomp$1_n$$);
        $hit$jscomp$1_n$$ = FCH_hit($hit$jscomp$1_n$$);
        0 < $attacker$$.focus && 0 < $fa_i$jscomp$276_m$$ && ($hit$jscomp$1_n$$ += $fa_i$jscomp$276_m$$, $attacker$$.focus--);
        for ($ff$$ = 0;$ff$$ <= $defense$$;$ff$$++) {
          for ($ef$$ = 0;$ef$$ <= $defense$$ - $ff$$;$ef$$++) {
            var $savedevade$$ = $defender$$.evade, $savedfocus$$ = $defender$$.focus;
            $fa_i$jscomp$276_m$$ = FE_FOCUS * $ff$$ + FE_EVADE * $ef$$;
            "undefined" != typeof $defender$$.modifydefenseroll && ($fa_i$jscomp$276_m$$ = $defender$$.modifydefenseroll($attacker$$, $fa_i$jscomp$276_m$$, $defense$$));
            $fd_k$jscomp$99_w$$ = FE_focus($fa_i$jscomp$276_m$$);
            $attack2_evade$jscomp$1_r$jscomp$64_thp$$ = FE_evade($fa_i$jscomp$276_m$$);
            $d$$ = 0 == $defense$$ ? 1 : $DTable$$[$fa_i$jscomp$276_m$$];
            $fa_i$jscomp$276_m$$ = 0;
            0 < $defender$$.focus && 0 < $fd_k$jscomp$99_w$$ && $attack2_evade$jscomp$1_r$jscomp$64_thp$$ < $hit$jscomp$1_n$$ + $ca$$ && ($attack2_evade$jscomp$1_r$jscomp$64_thp$$ += $fd_k$jscomp$99_w$$, $defender$$.focus--);
            0 < $defender$$.evade && $attack2_evade$jscomp$1_r$jscomp$64_thp$$ < $hit$jscomp$1_n$$ + $ca$$ && ($attack2_evade$jscomp$1_r$jscomp$64_thp$$ += 1, $defender$$.evade--);
            $hit$jscomp$1_n$$ > $attack2_evade$jscomp$1_r$jscomp$64_thp$$ ? ($fa_i$jscomp$276_m$$ = FCH_HIT * ($hit$jscomp$1_n$$ - $attack2_evade$jscomp$1_r$jscomp$64_thp$$), $attack2_evade$jscomp$1_r$jscomp$64_thp$$ = 0) : $attack2_evade$jscomp$1_r$jscomp$64_thp$$ -= $hit$jscomp$1_n$$;
            $ca$$ > $attack2_evade$jscomp$1_r$jscomp$64_thp$$ && ($fa_i$jscomp$276_m$$ += FCH_CRIT * ($ca$$ - $attack2_evade$jscomp$1_r$jscomp$64_thp$$));
            "function" == typeof $weapon$$.modifyhit && 0 < $fa_i$jscomp$276_m$$ && ($fa_i$jscomp$276_m$$ = $weapon$$.modifyhit($fa_i$jscomp$276_m$$));
            $attacker$$.reroll = 0;
            if ("undefined" != typeof $weapon$$.immediateattack && $weapon$$.immediateattack.pred($fa_i$jscomp$276_m$$) && "undefined" == typeof $attacker$$.iar) {
              $attacker$$.iar = !0;
              $fd_k$jscomp$99_w$$ = $weapon$$.immediateattack.weapon();
              $attack2_evade$jscomp$1_r$jscomp$64_thp$$ = $attacker$$.gethitrange($fd_k$jscomp$99_w$$, $defender$$);
              if (3 >= $attack2_evade$jscomp$1_r$jscomp$64_thp$$ && 0 < $attack2_evade$jscomp$1_r$jscomp$64_thp$$) {
                $attack2_evade$jscomp$1_r$jscomp$64_thp$$ = $attacker$$.getattackstrength($fd_k$jscomp$99_w$$, $defender$$);
                var $defense2$$ = $defender$$.getdefensestrength($fd_k$jscomp$99_w$$, $attacker$$);
                $attack2_evade$jscomp$1_r$jscomp$64_thp$$ = tohitproba($attacker$$, $attacker$$.weapons[$fd_k$jscomp$99_w$$], $defender$$, $attacker$$.getattacktable($attack2_evade$jscomp$1_r$jscomp$64_thp$$), $defender$$.getdefensetable($defense2$$), $attack2_evade$jscomp$1_r$jscomp$64_thp$$, $defense2$$);
                for ($j$$ in $attack2_evade$jscomp$1_r$jscomp$64_thp$$.proba) {
                  $fd_k$jscomp$99_w$$ = $fa_i$jscomp$276_m$$ + 1 * $j$$, "undefined" == typeof $p$$[$fd_k$jscomp$99_w$$] && ($p$$[$fd_k$jscomp$99_w$$] = 0), $p$$[$fd_k$jscomp$99_w$$] += $attack2_evade$jscomp$1_r$jscomp$64_thp$$.proba[$j$$] * $a$$ * $d$$;
                }
              } else {
                $p$$[$fa_i$jscomp$276_m$$] += $a$$ * $d$$;
              }
              delete $attacker$$.iar;
            } else {
              $p$$[$fa_i$jscomp$276_m$$] += $a$$ * $d$$;
            }
            $defender$$.focus = $savedfocus$$;
            $defender$$.evade = $savedevade$$;
          }
        }
        $attacker$$.focus = $focusa$$;
        $attacker$$.reroll = $savedreroll$$;
      }
    }
  }
  for ($h$$ = 0;$h$$ <= $attack$$;$h$$++) {
    for ($c$$ = 0;$c$$ <= $attack$$ - $h$$;$c$$++) {
      $fa_i$jscomp$276_m$$ = FCH_HIT * $h$$ + FCH_CRIT * $c$$, 0 < $fa_i$jscomp$276_m$$ && ($tot$$ += $p$$[$fa_i$jscomp$276_m$$]), $mean$$ += $h$$ * $p$$[$fa_i$jscomp$276_m$$], $meanc$$ += $c$$ * $p$$[$fa_i$jscomp$276_m$$];
    }
  }
  return {proba:$p$$, tohit:Math.floor(10000 * $tot$$) / 100, meanhit:0 == $tot$$ ? 0 : Math.floor(100 * $mean$$) / 100, meancritical:0 == $tot$$ ? 0 : Math.floor(100 * $meanc$$) / 100};
}
;var cmd = [], startreplayall = function $startreplayall$() {
  if (0 != REPLAY.length && (FAST = "W" == REPLAY.substr(-1) ? !1 : !0, ANIM = REPLAY, cmd = LZString.decompressFromEncodedURIComponent(decodeURI(window.location.search.substr(1))).split("&")[6].split("_"), cmd.splice(0, 1), 0 != cmd.length)) {
    $(".nextphase").prop("disabled", !0);
    $(".unit").css("cursor", "pointer");
    actionrlock = $.Deferred();
    actionrlock.progress(replayall);
    1 == TEAMS[1].isia && TEAMS[1].setia();
    1 == TEAMS[2].isia && TEAMS[2].setia();
    subphase = ACTIVATION_PHASE;
    for (i in squadron) {
      squadron[i].hasmoved = !1, squadron[i].maneuver = -1, squadron[i].hasdecloaked = !1;
    }
    replayall();
  }
}, stopreplay = function $stopreplay$() {
  actionrlock = $.Deferred();
}, restartreplay = function $restartreplay$() {
  ga("send", "event", {eventCategory:"interaction", eventAction:"replay", eventLabel:"replay"});
  actionrlock = $.Deferred();
  actionrlock.progress(replayall);
  replayall();
}, replayall = function $replayall$() {
  if ("" == cmd) {
    FAST = !1;
    filltabskill();
    if (phase != SETUP_PHASE) {
      setphase();
    } else {
      $(".imagebg").hide();
      $(".nextphase").prop("disabled", !1);
      for (var $f$jscomp$69_i$$ = 0;$f$jscomp$69_i$$ < OBSTACLES.length;$f$jscomp$69_i$$++) {
        OBSTACLES[$f$jscomp$69_i$$].addDrag();
      }
      1 == TEAMS[1].isia && TEAMS[1].setplayer();
      1 == TEAMS[2].isia && TEAMS[2].setplayer();
      displayplayertype(1);
      displayplayertype(2);
    }
    INREPLAY = !1;
  } else {
    INREPLAY = !0;
    var $c$$ = cmd[0].split("-");
    console.log(cmd[0]);
    cmd.splice(0, 1);
    var $id$jscomp$7_u$$ = null, $j$$;
    if (0 < $c$$[0].length) {
      $id$jscomp$7_u$$ = parseInt($c$$[0], 10);
      for ($j$$ in squadron) {
        if (squadron[$j$$].id == $id$jscomp$7_u$$) {
          break;
        }
      }
      if (squadron[$j$$].id == $id$jscomp$7_u$$) {
        $id$jscomp$7_u$$ = squadron[$j$$];
      } else {
        console.log("cannot find id " + $id$jscomp$7_u$$);
        actionrlock.notify();
        return;
      }
    }
    var $FTABLE$$ = {fo:"removefocustoken", FO:"addfocustoken", e:"removeevadetoken", E:"addevadetoken", ct:"removecloaktoken", CT:"addcloaktoken", i:"removeiontoken", I:"addiontoken", tb:"removetractorbeamtoken", TB:"addtractorbeamtoken", ST:"addstress", DPY:"deploy", st:"removestresstoken", d:"dies"};
    if ("string" == typeof $FTABLE$$[$c$$[1]]) {
      $f$jscomp$69_i$$ = Unit.prototype[$FTABLE$$[$c$$[1]]], "function" == typeof $f$jscomp$69_i$$.vanilla ? $f$jscomp$69_i$$.vanilla.call($id$jscomp$7_u$$, $d$jscomp$49_t$$) : $f$jscomp$69_i$$.call($id$jscomp$7_u$$), actionrlock.notify();
    } else {
      switch($c$$[1]) {
        case "W":
          break;
        case "P":
          r = parseInt($c$$[2], 10);
          phase = parseInt($c$$[3], 10);
          if (round != r) {
            for ($f$jscomp$69_i$$ in $("#turnselector").append("<option value='" + round + "'>" + UI_translation["turn #"] + round + "</option>"), round = r, squadron) {
              $id$jscomp$7_u$$ = squadron[$f$jscomp$69_i$$], $id$jscomp$7_u$$.focus = Unit.prototype.resetfocus.call($id$jscomp$7_u$$), $id$jscomp$7_u$$.evade = Unit.prototype.resetevade.call($id$jscomp$7_u$$), $id$jscomp$7_u$$.tractorbeam = Unit.prototype.resettractorbeam.call($id$jscomp$7_u$$), $id$jscomp$7_u$$.showinfo();
            }
          }
          phase == SETUP_PHASE + 1 && 1 == r && endsetupphase();
          $("#phase").html(UI_translation["turn #"] + round + " " + UI_translation["phase" + phase]);
          actionrlock.notify();
          break;
        case "L":
          FAST ? actionrlock.notify() : ($f$jscomp$69_i$$ = decodeURIComponent($c$$[2].substring(2, $c$$[2].length - 2)), $id$jscomp$7_u$$.setinfo($f$jscomp$69_i$$).delay(1500).fadeOut(400), setTimeout(function() {
            actionrlock.notify();
          }, 2000));
          break;
        case "t":
          for ($j$$ in squadron) {
            if (squadron[$j$$].id == parseInt($c$$[2], 10)) {
              break;
            }
          }
          if (squadron[$j$$].id != parseInt($c$$[2], 10)) {
            console.log("cannot find target " + $c$$[2]);
            actionrlock.notify();
            break;
          }
          var $d$jscomp$49_t$$ = squadron[$j$$];
          "function" == typeof Unit.prototype.removetarget.vanilla ? Unit.prototype.removetarget.vanilla.call($id$jscomp$7_u$$, $d$jscomp$49_t$$) : Unit.prototype.removetarget.call($id$jscomp$7_u$$, $d$jscomp$49_t$$);
          actionrlock.notify();
          break;
        case "T":
          for ($j$$ in squadron) {
            if (squadron[$j$$].id == parseInt($c$$[2], 10)) {
              break;
            }
          }
          if (squadron[$j$$].id != parseInt($c$$[2], 10)) {
            console.log("cannot find target " + $c$$[2]);
            actionrlock.notify();
            break;
          }
          $d$jscomp$49_t$$ = squadron[$j$$];
          "function" == typeof Unit.prototype.addtarget.vanilla ? Unit.prototype.addtarget.vanilla.call($id$jscomp$7_u$$, $d$jscomp$49_t$$) : Unit.prototype.addtarget.call($id$jscomp$7_u$$, $d$jscomp$49_t$$);
          actionrlock.notify();
          break;
        case "R":
          $id$jscomp$7_u$$.setarcrotate(parseInt($c$$[2], 10));
          actionrlock.notify();
          break;
        case "s":
          Unit.prototype.removeshield.call($id$jscomp$7_u$$, parseInt($c$$[2], 10));
          $id$jscomp$7_u$$.show();
          actionrlock.notify();
          break;
        case "S":
          Unit.prototype.addshield.call($id$jscomp$7_u$$, parseInt($c$$[2], 10));
          $id$jscomp$7_u$$.show();
          actionrlock.notify();
          break;
        case "h":
          Unit.prototype.removehull.call($id$jscomp$7_u$$, parseInt($c$$[2], 10));
          $id$jscomp$7_u$$.show();
          actionrlock.notify();
          break;
        case "H":
          Unit.prototype.addhull.call($id$jscomp$7_u$$, parseInt($c$$[2], 10));
          $id$jscomp$7_u$$.show();
          actionrlock.notify();
          break;
        case "f":
          $id$jscomp$7_u$$.select();
          for ($j$$ in squadron) {
            if (squadron[$j$$].id == parseInt($c$$[2], 10)) {
              break;
            }
          }
          squadron[$j$$].id != parseInt($c$$[2], 10) ? (console.log("cannot find target unit " + $c$$[2]), actionrlock.notify()) : (targetunit = squadron[$j$$], $id$jscomp$7_u$$.activeweapon = parseInt($c$$[3], 10), FAST || $id$jscomp$7_u$$.playfiresnd(), setTimeout(function() {
            actionrlock.notify();
          }, FAST ? 0 : 1000));
          break;
        case "am":
          $id$jscomp$7_u$$.select();
          $id$jscomp$7_u$$.m = (new Snap.Matrix).translate($c$$[2] - 300, $c$$[3] - 300).rotate($c$$[4], 0, 0);
          $id$jscomp$7_u$$.g.transform($id$jscomp$7_u$$.m);
          $id$jscomp$7_u$$.geffect.transform($id$jscomp$7_u$$.m);
          actionrlock.notify();
          break;
        case "c":
          (new Critical($id$jscomp$7_u$$, parseInt($c$$[2], 10))).faceup();
          actionrlock.notify();
          break;
        case "D":
          $id$jscomp$7_u$$.upgrades[parseInt($c$$[2], 10)].desactivate();
          actionrlock.notify();
          break;
        case "m":
          $id$jscomp$7_u$$.select();
          var $d$jscomp$49_t$$ = $c$$[2], $l$$ = parseInt($c$$[4], 10), $oldm$$ = $id$jscomp$7_u$$.m, $path$$ = P[$d$jscomp$49_t$$].path;
          if (FAST) {
            $id$jscomp$7_u$$.m = $id$jscomp$7_u$$.getmatrixwithmove($oldm$$, $path$$, $l$$);
            $id$jscomp$7_u$$.m.rotate(parseFloat($c$$[3], 0, 0), 0, 0);
            $id$jscomp$7_u$$.g.transform($id$jscomp$7_u$$.m);
            $id$jscomp$7_u$$.geffect.transform($id$jscomp$7_u$$.m);
            actionrlock.notify();
            break;
          }
          SOUNDS[$id$jscomp$7_u$$.ship.flysnd].play();
          Snap.animate(0, $l$$, function($m$jscomp$232_value$$) {
            $m$jscomp$232_value$$ = this.getmatrixwithmove($oldm$$, $path$$, $m$jscomp$232_value$$);
            this.g.transform($m$jscomp$232_value$$);
            this.geffect.transform($m$jscomp$232_value$$);
          }.bind($id$jscomp$7_u$$), TIMEANIM * $l$$ / 200, mina.linear, function() {
            this.m = this.getmatrixwithmove($oldm$$, $path$$, $l$$);
            this.m.rotate(parseFloat($c$$[3]), 0, 0);
            this.g.transform(this.m);
            this.geffect.transform(this.m);
            actionrlock.notify();
          }.bind($id$jscomp$7_u$$));
          break;
        default:
          console.log("unknown cmd:" + $c$$[1]), FAST = !1, filltabskill(), setphase(phase == SETUP_PHASE);
      }
    }
  }
};
var phase = 1, subphase = 0, round = 1, skillturn = 0, tabskill, VERSION = "v0.10.4", LANG = "en", ENGAGED = !1, FILTER = "none", DECLOAK_PHASE = 1, DICES = "focusred hitred criticalred blankred focusgreen evadegreen blankgreen".split(" "), SETUP_PHASE = 2, PLANNING_PHASE = 3, ACTIVATION_PHASE = 4, COMBAT_PHASE = 5, SELECT_PHASE = 1, CREATION_PHASE = 6, XP_PHASE = 7, BOMBS = [], ROCKDATA = "", WINCOND = 0, INREPLAY = !1, allunits = [], PILOT_translation, SHIP_translation, CRIT_translation, UI_translation, 
UPGRADE_translation, PILOT_dict, UPGRADE_dict, actionr = [], actionrlock, HISTORY = [], replayid = 0, dice = 1, ATTACK = [], DEFENSE = [], SEARCHINGSQUAD, FACTIONS = {rebel:"REBEL", empire:"EMPIRE", scum:"SCUM"}, SQUADLIST, SQUADBATTLE, COMBATLIST, TEAMS = [new Team(0), new Team(1), new Team(2)], currentteam = TEAMS[0], teamtarget = 0, VIEWPORT, ANIM = "", SETUP, SHOWDIAL = [], TRACE = !1, TEMPLATES = {bomb:"", upgrade:"", weapon:"", social:""}, UNIQUE = [], stype = "", REPLAY = "", PERMALINK = "", 
SETUPS = {playzone:"M 0 0 L 900 0 900 900 0 900 Z", zone1:"M 0 0 L 100 0 100 900 0 900 Z", zone2:"M 800 0 L 900 0 900 900 800 900 Z", asteroids:6, "Classic Map":{name:"Classic", background:"css/playmat10.jpg"}, "Cloud City Map":{name:"Cloud City", background:"css/playmat6.jpg"}, "Blue Sky Map":{name:"Blue Sky", background:"css/playmat13.jpg"}, "Blue Planet Map":{name:"Blue Planet", background:"css/playmat11.jpg"}, "Mars Map":{name:"Mars", background:"css/playmat14.jpg"}};
function sleep($milliseconds$$) {
  for (var $start$$ = (new Date).getTime(), $i$$ = 0;1e7 > $i$$ && !((new Date).getTime() - $start$$ > $milliseconds$$);$i$$++) {
  }
}
function changeimage($input$$) {
  if ($input$$.files && $input$$.files[0]) {
    var $reader$$ = new FileReader;
    $reader$$.onload = function $$reader$$$onload$($BACKGROUND_e$$) {
      var $bb$$ = ZONE[0].getBBox();
      $BACKGROUND_e$$ = s.image($BACKGROUND_e$$.target.result, 0, 0, $bb$$.w, $bb$$.h).pattern(0, 0, $bb$$.w, $bb$$.h);
      ZONE[0].attr({fill:$BACKGROUND_e$$, fillOpacity:1});
    };
    $reader$$.readAsDataURL($input$$.files[0]);
  }
}
function center() {
  var $bbox$jscomp$5_w$$ = activeunit.g.getBBox(), $xx_y$$ = $bbox$jscomp$5_w$$.x + $bbox$jscomp$5_w$$.width / 2, $yy$$ = $bbox$jscomp$5_w$$.y + $bbox$jscomp$5_w$$.height / 2, $bbox$jscomp$5_w$$ = $("#svgout").width(), $h$$ = $("#svgout").height(), $startX$$ = 0, $startY$$ = 0;
  $h$$ > $bbox$jscomp$5_w$$ ? $startY$$ = ($h$$ - $bbox$jscomp$5_w$$) / 2 : $startX$$ = ($bbox$jscomp$5_w$$ - $h$$) / 2;
  var $min$$ = Math.min($bbox$jscomp$5_w$$ / 900., $h$$ / 900.), $x$$ = $startX$$ + VIEWPORT.m.x($xx_y$$, $yy$$) * $min$$, $xx_y$$ = $startY$$ + VIEWPORT.m.y($xx_y$$, $yy$$) * $min$$;
  VIEWPORT.m.invert();
  if (0 > $x$$ || $x$$ > $bbox$jscomp$5_w$$) {
    VIEWPORT.m = MT((-$x$$ + $bbox$jscomp$5_w$$ / 2 - $startX$$) / $min$$, 0).add(VIEWPORT.m);
  }
  if (0 > $xx_y$$ || $xx_y$$ > $h$$) {
    VIEWPORT.m = MT(0, (-$xx_y$$ + $h$$ / 2 - $startY$$) / $min$$).add(VIEWPORT.m);
  }
  VIEWPORT.transform(VIEWPORT.m);
  activeunit.show();
}
var AIstats = function $AIstats$($error$jscomp$2_i$$, $n$jscomp$335_options$$, $response$$) {
  if ("undefined" != typeof $response$$.rows) {
    for ($error$jscomp$2_i$$ = 1;$error$jscomp$2_i$$ < $response$$.rows.length;$error$jscomp$2_i$$ += 200) {
      for (var $median$$ = $n$jscomp$335_options$$ = 0, $j$$ = 1;200 > $j$$ && $j$$ + $error$jscomp$2_i$$ < $response$$.rows.length;$j$$++) {
        var $t$jscomp$121_type2$$ = $response$$.rows[$error$jscomp$2_i$$ + $j$$].cellsArray[0].split(" "), $score1$$ = $t$jscomp$121_type2$$[0].split(":"), $type1$$ = $score1$$[0], $score1$$ = $score1$$[1], $score2_ts2$$ = $t$jscomp$121_type2$$[1].split(":"), $t$jscomp$121_type2$$ = $score2_ts2$$[0], $score2_ts2$$ = $score2_ts2$$[1], $scoreco$$ = 0, $scoreh$$ = 0;
        $t$jscomp$121_type2$$ != $type1$$ && ("Human" == $t$jscomp$121_type2$$ ? $scoreh$$ += parseInt($score2_ts2$$, 10) : $scoreco$$ += parseInt($score2_ts2$$, 10), "Human" == $type1$$ ? $scoreh$$ += parseInt($score1$$, 10) : $scoreco$$ += parseInt($score1$$, 10), $median$$ += Math.floor($scoreco$$ / ($scoreco$$ + $scoreh$$) * 100), $n$jscomp$335_options$$++);
      }
      console.log($median$$ / $n$jscomp$335_options$$);
    }
  }
}, mk2split = function $mk2split$($t$$) {
  $t$$ = $t$$.split(".");
  for (var $r$$ = [], $missing$$ = !1, $i$$ = 1;$i$$ < $t$$.length;$i$$++) {
    $t$$[$i$$].match(/_II.*/) ? ($r$$.push($t$$[$i$$ - 1] + "." + $t$$[$i$$]), $t$$[$i$$] = null, $missing$$ = !1) : ($t$$[$i$$ - 1] && $r$$.push($t$$[$i$$ - 1]), $missing$$ = !0);
  }
  $missing$$ && $r$$.push($t$$[$t$$.length - 1]);
  return $r$$;
}, save = function $save$() {
  movelog("W");
  var $url$$ = "http://ynot6517.github.io/bench/?" + permalink(!1);
  $(".social").html(Mustache.render(TEMPLATES.social, {url:$url$$, name:"save this link", encodedurl:encodeURI($url$$)}));
  "undefined" != typeof gapi && "undefined" != typeof gapi.client.urlshortener ? gapi.client.urlshortener.url.insert({longUrl:$url$$}).then(function($response$jscomp$2_url$$) {
    $response$jscomp$2_url$$ = $response$jscomp$2_url$$.result.id;
    $(".tweet").show();
    $("#submission").contents().find("#entry_245821581").val($response$jscomp$2_url$$);
    $("#submission").contents().find("#ss-form").submit();
    $(".social").html(Mustache.render(TEMPLATES.social, {url:$response$jscomp$2_url$$, name:$response$jscomp$2_url$$, encodedurl:encodeURI($response$jscomp$2_url$$)}));
  }, function($reason$$) {
    $("#submission").contents().find("#ss-form").submit();
    console.log("Error: " + $reason$$.result.error.message);
  }) : $("#submission").contents().find("#ss-form").submit();
}, myCallback = function $myCallback$($error$$, $options$jscomp$9_s1$$, $response$$) {
  if (null != $response$$ && "undefined" != typeof $response$$.rows) {
    ga("send", "event", {eventCategory:"interaction", eventAction:"battlelog", eventLabel:"battlelog", eventValue:$response$$.rows.length});
    $options$jscomp$9_s1$$ = $error$$ = "";
    for (var $tt$$ = mk2split(SEARCHINGSQUAD), $i$$ = 0;$i$$ < $tt$$.length;$i$$++) {
      $error$$ += $tt$$[$i$$].replace(/\*/g, " + ").replace(/_/g, " ") + "<br>", $options$jscomp$9_s1$$ += $tt$$[$i$$].replace(/\*/g, " + ").replace(/_/g, " ") + "\n";
    }
    stype = "";
    TEAMS[1].parseJuggler($options$jscomp$9_s1$$, !1);
    for ($i$$ = 1;$i$$ < $response$$.rows.length;$i$$++) {
      myTemplate($i$$, $response$$.rows[$i$$].cellsArray, null, null);
    }
    SQUADBATTLE.columns.adjust().draw();
  }
}, myTemplate = function $myTemplate$($num$jscomp$6_type1$$, $cells$$, $cellarrays_score1$jscomp$2_ts1$$, $labels_t$jscomp$124_type2$$) {
  $labels_t$jscomp$124_type2$$ = $cells$$[0].split(" ");
  $cellarrays_score1$jscomp$2_ts1$$ = $labels_t$jscomp$124_type2$$[0].split(":");
  $num$jscomp$6_type1$$ = $cellarrays_score1$jscomp$2_ts1$$[0];
  $cellarrays_score1$jscomp$2_ts1$$ = $cellarrays_score1$jscomp$2_ts1$$[1];
  var $score2$jscomp$1_ts2$$ = $labels_t$jscomp$124_type2$$[1].split(":");
  $labels_t$jscomp$124_type2$$ = $score2$jscomp$1_ts2$$[0];
  var $score2$jscomp$1_ts2$$ = $score2$jscomp$1_ts2$$[1], $sc$jscomp$2_tt$$ = $cells$$[1].split("VS"), $i$jscomp$282_team1$$ = mk2split($sc$jscomp$2_tt$$[0]), $j$$ = mk2split($sc$jscomp$2_tt$$[1]), $t1$$ = "", $s1$$ = "";
  if ($sc$jscomp$2_tt$$[0] == SEARCHINGSQUAD) {
    var $sc$jscomp$2_tt$$ = $score2$jscomp$1_ts2$$, $ts$$ = $labels_t$jscomp$124_type2$$, $i$jscomp$282_team1$$ = $j$$, $score2$jscomp$1_ts2$$ = $cellarrays_score1$jscomp$2_ts1$$;
    $labels_t$jscomp$124_type2$$ = $num$jscomp$6_type1$$;
    $cellarrays_score1$jscomp$2_ts1$$ = $sc$jscomp$2_tt$$;
    $num$jscomp$6_type1$$ = $ts$$;
  }
  for ($j$$ = 0;$j$$ < $i$jscomp$282_team1$$.length - 1;$j$$++) {
    $s1$$ += $i$jscomp$282_team1$$[$j$$].replace(/\*/g, " + ").replace(/_/g, " ") + "\n", $t1$$ += $i$jscomp$282_team1$$[$j$$].replace(/\*/g, " + ").replace(/_/g, " ") + "<br>";
  }
  TEAMS[2].parseJuggler($s1$$, !1);
  "en" != LANG && ($t1$$ = TEAMS[2].toJuggler(!0).replace(/\n/g, "<br>"));
  $cellarrays_score1$jscomp$2_ts1$$ = "" + $cellarrays_score1$jscomp$2_ts1$$;
  $score2$jscomp$1_ts2$$ = "" + $score2$jscomp$1_ts2$$;
  for ($i$jscomp$282_team1$$ = 0;3 > $i$jscomp$282_team1$$;$i$jscomp$282_team1$$++) {
    3 > $cellarrays_score1$jscomp$2_ts1$$.length && ($cellarrays_score1$jscomp$2_ts1$$ = "0" + $cellarrays_score1$jscomp$2_ts1$$), 3 > $score2$jscomp$1_ts2$$.length && ($score2$jscomp$1_ts2$$ = "0" + $score2$jscomp$1_ts2$$);
  }
  "Human" == $labels_t$jscomp$124_type2$$ && ($score2$jscomp$1_ts2$$ = "<b>" + $score2$jscomp$1_ts2$$ + "</b>");
  "Human" == $num$jscomp$6_type1$$ && ($cellarrays_score1$jscomp$2_ts1$$ = "<b>" + $cellarrays_score1$jscomp$2_ts1$$ + "</b>");
  SQUADBATTLE.row.add([$score2$jscomp$1_ts2$$ + "-" + $cellarrays_score1$jscomp$2_ts1$$, '<span onclick=\'$(".replay").attr("src","' + $cells$$[2] + "\")'>" + $t1$$ + "</span>"]).draw(!1);
}, computeurl = function $computeurl$($error$$, $options$jscomp$10_team1$$, $response$$) {
  $error$$ = [];
  if ("undefined" != typeof $response$$.rows) {
    for (var $i$$ = 1;$i$$ < $response$$.rows.length;$i$$++) {
      var $team2$jscomp$1_tt$$ = $response$$.rows[$i$$].cellsArray[0].split("VS");
      $options$jscomp$10_team1$$ = mk2split($team2$jscomp$1_tt$$[0]);
      for (var $team2$jscomp$1_tt$$ = mk2split($team2$jscomp$1_tt$$[1]), $s1$$ = "", $s2$$ = "", $j$$ = 0;$j$$ < $options$jscomp$10_team1$$.length - 1;$j$$++) {
        $s1$$ += $options$jscomp$10_team1$$[$j$$].replace(/\*/g, " + ").replace(/_/g, " ") + "\n";
      }
      try {
        TEAMS[1].parseJuggler($s1$$, !1);
        for ($j$$ = 0;$j$$ < $team2$jscomp$1_tt$$.length - 1;$j$$++) {
          $s2$$ += $team2$jscomp$1_tt$$[$j$$].replace(/\*/g, " + ").replace(/_/g, " ") + "\n";
        }
        TEAMS[2].parseJuggler($s2$$, !1);
      } catch ($e$$) {
      }
      for ($j$$ in generics) {
        "undefined" == typeof $error$$[generics[$j$$].pilotid] && ($error$$[generics[$j$$].pilotid] = 0), $error$$[generics[$j$$].pilotid]++;
      }
    }
  }
  for ($i$$ in $error$$) {
    console.log(PILOTS[$i$$].name + ":" + $error$$[$i$$]);
  }
};
function translate($a$$) {
  return "undefined" != typeof PILOT_translation[$a$$] && "undefined" != typeof PILOT_translation[$a$$].name ? PILOT_translation[$a$$].name : "undefined" != typeof PILOT_translation[$a$$ + " (Scum)"] && "undefined" != typeof PILOT_translation[$a$$ + " (Scum)"].name ? PILOT_translation[$a$$ + " (Scum)"].name : "undefined" != typeof UPGRADE_translation[$a$$] && "undefined" != typeof UPGRADE_translation[$a$$].name ? UPGRADE_translation[$a$$].name : "undefined" != typeof UPGRADE_translation[$a$$ + "(Crew)"] && 
  "undefined" != typeof UPGRADE_translation[$a$$ + "(Crew)"].name ? UPGRADE_translation[$a$$ + "(Crew)"].name : "undefined" != typeof CRIT_translation[$a$$] && "undefined" != typeof CRIT_translation[$a$$].name ? CRIT_translation[$a$$].name : $a$$;
}
function formatstring($s$$) {
  return $s$$.replace(/%HIT%/g, "<code class='hit'></code>").replace(/%ACTION%/g, "<b>Action:</b>").replace(/%STRESS%/g, "<code class='xstresstoken'></code>").replace(/%CRIT%/g, "<code class='critical'></code>").replace(/%EVADE%/g, "<code class='symbols'>e</code>").replace(/%FOCUS%/g, "<code class='symbols'>f</code>").replace(/%SHIELD%/g, "<code class='cshield'></code>").replace(/%HULL%/g, "<code class='chull'></code>").replace(/%ROLL%/g, "<code class='symbols'>r</code>").replace(/%TURNLEFT%/g, "<code class='symbols'>4</code>").replace(/%TURNRIGHT%/g, 
  "<code class='symbols'>6</code>").replace(/%BOOST%/g, "<code class='symbols'>b</code>").replace(/%ELITE%/g, "<code class='symbols'>E</code>").replace(/%ION%/g, "<code class='xionizedtoken'></code>").replace(/%BOMB%/g, "<code class='symbols'>B</code>").replace(/%STRAIGHT%/g, "<code class='symbols'>8</code>").replace(/%STOP%/g, "<code class='symbols'>5</code>").replace(/%TARGET%/g, "<code class='symbols'>l</code>").replace(/%TORPEDO%/g, "<code class='symbols'>P</code>").replace(/%CANNON%/g, "<code class='symbols'>C</code>").replace(/%SYSTEM%/g, 
  "<code class='symbols'>S</code>").replace(/%ILLICIT%/g, "<code class='symbols'>I</code>").replace(/%MISSILE%/g, "<code class='symbols'>M</code>").replace(/%TURRET%/g, "<code class='symbols'>U</code>").replace(/%BANKLEFT%/g, "<code class='symbols'>7</code>").replace(/%BANKRIGHT%/g, "<code class='symbols'>9</code>").replace(/%UTURN%/g, "<code class='symbols'>2</code>").replace(/%SLOOPLEFT%/g, "<code class='symbols'>1</code>").replace(/%SLOOPRIGHT%/g, "<code class='symbols'>3</code>").replace(/%TALONLEFT%/g, 
  "<code class='symbols'>;</code>").replace(/%TALONRIGHT%/g, "<code class='symbols'>:</code>").replace(/%ASTROMECH%/g, "<code class='symbols'>A</code>").replace(/%CREW%/g, "<code class='symbols'>W</code>").replace(/%SLAM%/g, "<code class='symbols'>s</code>");
}
function displayplayertype($team$$, $img$$) {
  var $himg$$ = localStorage.image, $pimg$$ = localStorage.imageplayer, $hname$$ = localStorage.name, $name$$ = localStorage.playername;
  "undefined" != typeof $name$$ && ($hname$$ = $name$$);
  "undefined" != typeof $img$$ && ($himg$$ = $img$$);
  "undefined" != typeof $pimg$$ && ($himg$$ = $pimg$$);
  "undefined" == typeof $himg$$ && ($himg$$ = "css/human.png");
  TEAMS[$team$$].isia ? ($("#player" + $team$$ + " option[value='computer']").prop("selected", !0), $("#player" + $team$$ + "img").attr("src", "css/computer.png")) : ($("#player" + $team$$ + " option[value='human']").prop("selected", !0), $("#player" + $team$$ + "img").attr("src", $himg$$), $("#player" + $team$$ + " option[value='human']").text($hname$$));
}
function nextunit($cando$$, $changeturn$$, $changephase$$, $activenext$$) {
  var $i$$, $sk$$ = !1, $last$$ = 0;
  if (0 > skillturn || 12 < skillturn) {
    return $changephase$$();
  }
  for ($i$$ = 0;$i$$ < tabskill[skillturn].length;$i$$++) {
    var $u$$ = tabskill[skillturn][$i$$];
    if ($cando$$($u$$) && 1 != $u$$.isdocked) {
      $sk$$ = !0;
      $last$$ = $i$$;
      break;
    }
  }
  if (!$sk$$) {
    do {
      if ($changeturn$$(tabskill), $last$$ = 0, 0 <= skillturn && 12 >= skillturn) {
        for (;$last$$ < tabskill[skillturn].length && (1 == tabskill[skillturn][$last$$].isdocked || !$cando$$(tabskill[skillturn][$last$$]));) {
          $last$$++;
        }
        $last$$ == tabskill[skillturn].length && ($last$$ = -1);
      }
    } while (0 <= skillturn && 12 >= skillturn && -1 == $last$$);
  }
  if (0 > skillturn || 12 < skillturn || -1 == $last$$) {
    return $changephase$$();
  }
  barrier(function() {
    active = $last$$;
    tabskill[skillturn][$last$$].select();
    $activenext$$();
  });
}
function endphase() {
  for (var $i$$ in squadron) {
    squadron[$i$$].endphase();
  }
}
function nextcombat() {
  nextunit(function($t$$) {
    return $t$$.canfire();
  }, function($list$$) {
    0 <= skillturn && skillturn--;
    for (var $i$$ = 0;$i$$ < $list$$[skillturn + 1].length;$i$$++) {
      var $u$$ = $list$$[skillturn + 1][$i$$];
      $u$$.canbedestroyed(skillturn) && $u$$.checkdead();
    }
    TEAMS[1].checkdead() && TEAMS[2].checkdead() && win(0);
    TEAMS[1].checkdead() && win(1);
    TEAMS[2].checkdead() && win(2);
  }, function() {
    $("#attackdial").hide();
    for (var $i$$ in squadron) {
      squadron[$i$$].endcombatphase();
    }
    log(UI_translation["No more firing units, ready to end phase."]);
    barrier(endphase);
    return enablenextphase();
  }, function() {
    activeunit.beginattack();
    activeunit.doattack();
  });
}
function nextactivation() {
  nextunit(function($t$$) {
    return $t$$.candomaneuver();
  }, function() {
    13 > skillturn && skillturn++;
  }, function() {
    return enablenextphase();
  }, function() {
    activeunit.beginactivation();
    activeunit.doactivation();
  });
}
function nextdecloak() {
  nextunit(function($t$$) {
    return $t$$.candecloak();
  }, function() {
    13 > skillturn && skillturn++;
  }, function() {
    return enablenextphase();
  }, function() {
    activeunit.dodecloak();
  });
}
function nextplanning() {
  nextunit(function($t$$) {
    return -1 == $t$$.maneuver;
  }, function() {
    13 > skillturn && skillturn++;
  }, function() {
    return enablenextphase();
  }, function() {
    activeunit.select();
    activeunit.doplan();
  });
}
function getattackresult() {
  var $h$$ = $(".hitreddice").length, $c$$ = $(".criticalreddice").length;
  return FCH_CRIT * $c$$ + FCH_HIT * $h$$;
}
function getdefenseresult() {
  return $(".evadegreendice").length + $(".evadegreen").length;
}
function addattackdie($type$$, $n$$) {
  for (var $i$$ = 0;$i$$ < $n$$;$i$$++) {
    $("#attack").append("<td class=" + $type$$ + "reddice'></td>");
  }
}
function adddefensedie($type$$, $n$$) {
  for (var $i$$ = 0;$i$$ < $n$$;$i$$++) {
    $("#defense").append("<td class=" + $type$$ + "greendice'></td>");
  }
}
function getattackdice() {
  return $(".focusreddice").length + $(".criticalreddice").length + $(".hitreddice").length + $(".blankreddice").length;
}
function getattackvalue() {
  return $(".focusreddice").length * FCH_FOCUS + $(".criticalreddice").length * FCH_CRIT + $(".hitreddice").length * FCH_HIT;
}
function getdefensedice() {
  return $(".focusgreendice").length + $(".blankgreendice").length + $(".evadegreendice").length;
}
function displaycombatdial() {
  $("#attackdial").empty();
  $("#dtokens").empty();
  $("#defense").empty();
  $("#combatdial").show();
}
function addredclickchange() {
  var $change$$ = function $$change$$$() {
    $(this).hasClass("focusreddice") ? ($(this).removeClass("focusreddice"), $(this).addClass("hitreddice")) : $(this).hasClass("blankreddice") ? ($(this).removeClass("blankreddice"), $(this).addClass("focusreddice")) : $(this).hasClass("hitreddice") ? ($(this).removeClass("hitreddice"), $(this).addClass("criticalreddice")) : $(this).hasClass("criticalreddice") && ($(this).removeClass("criticalreddice"), $(this).addClass("blankreddice"));
  };
  $(".focusreddice").click($change$$);
  $(".hitreddice").click($change$$);
  $(".blankreddice").click($change$$);
  $(".criticalreddice").click($change$$);
}
function displayattackroll($m$$, $n$$) {
  var $i$$, $j$$ = 0;
  for ($i$$ = 0;$i$$ < DICES.length;$i$$++) {
    $("." + DICES[$i$$] + "dice").remove();
  }
  $("#attack").empty();
  for ($i$$ = 0;$i$$ < Math.floor($m$$ / 100) % 10;$i$$++, $j$$++) {
    $("#attack").append("<td class='focusreddice'></td>");
  }
  for ($i$$ = 0;$i$$ < Math.floor($m$$ / 10) % 10;$i$$++, $j$$++) {
    $("#attack").append("<td class='criticalreddice'></td>");
  }
  for ($i$$ = 0;$i$$ < $m$$ % 10;$i$$++, $j$$++) {
    $("#attack").append("<td class='hitreddice'></td>");
  }
  for ($i$$ = $j$$;$i$$ < $n$$;$i$$++) {
    $("#attack").append("<td class='blankreddice'></td>");
  }
  addredclickchange();
}
function displayattacktokens($u$$, $f$$) {
  $("#atokens").empty();
  var $dm$$ = targetunit.getresultmodifiers($u$$.ar, $u$$.ad, DEFENSE_M, ATTACK_M);
  0 < $dm$$.length ? ($("#atokens").append($dm$$), $("#atokens").append($("<button>").addClass("m-done").click(function() {
    displayattacktokens2($u$$, $f$$);
  }))) : displayattacktokens2($u$$, $f$$);
}
function displayattacktokens2($u$$, $f$$) {
  "function" != typeof $f$$ ? $f$$ = $u$$.lastaf : $u$$.lastaf = $f$$;
  $("#atokens").empty();
  var $am$$ = $u$$.getresultmodifiers($u$$.ar, $u$$.ad, ATTACK_M, ATTACK_M);
  0 < $am$$.length ? ($("#atokens").append($am$$), $("#atokens").append($("<button>").addClass("m-done").click(function() {
    $("#atokens").empty();
    $f$$();
  }.bind($u$$)))) : $f$$();
}
function displaydefensetokens($u$$, $f$$) {
  $("#dtokens").empty();
  var $dm$$ = activeunit.getresultmodifiers($u$$.dr, $u$$.dd, ATTACK_M, DEFENSE_M);
  0 < $dm$$.length ? ($("#dtokens").append($dm$$), $("#dtokens").append($("<button>").addClass("m-done").click(function() {
    displaydefensetokens2($u$$, $f$$);
  }))) : displaydefensetokens2($u$$, $f$$);
}
function displaydefensetokens2($u$$, $f$$) {
  "function" != typeof $f$$ && ($f$$ = $u$$.lastdf);
  $u$$.lastdf = $f$$;
  $("#dtokens").empty();
  var $dm$$ = $u$$.getresultmodifiers($u$$.dr, $u$$.dd, DEFENSE_M, DEFENSE_M);
  FAST ? displaycompareresults($u$$, $f$$) : ($("#dtokens").append($dm$$), $("#dtokens").append($("<button>").addClass("m-fire").click(function() {
    displaycompareresults(activeunit, $f$$);
  }.bind($u$$))));
}
function displaycompareresults($u$$, $f$$) {
  "function" != typeof $f$$ && ($f$$ = $u$$.lastdf);
  $u$$.lastdf = $f$$;
  $("#dtokens").empty();
  dm = $u$$.getresultmodifiers(targetunit.dr, targetunit.dd, ATTACKCOMPARE_M, DEFENSE_M);
  am = $u$$.getresultmodifiers($u$$.ar, $u$$.ad, ATTACKCOMPARE_M, ATTACK_M);
  FAST || 0 == dm.length && 0 == am.length ? ($("#combatdial").hide(), $f$$()) : ($("#dtokens").append(dm).append(am), $("#dtokens").append($("<button>").addClass("m-fire").click(function() {
    $("#combatdial").hide();
    $f$$();
  }.bind($u$$))));
}
function FE_focus($r$$) {
  return Math.floor($r$$ / 10) % 10;
}
function FE_evade($r$$) {
  return $r$$ % 10;
}
function FE_blank($r$$, $n$$) {
  return $n$$ - FE_evade($r$$) - FE_focus($r$$);
}
function FCH_hit($r$$) {
  return $r$$ % 10;
}
function FCH_focus($r$$) {
  return Math.floor($r$$ / 100) % 10;
}
function FCH_crit($r$$) {
  return Math.floor($r$$ / 10) % 10;
}
function FCH_blank($r$$, $n$$) {
  return $n$$ - FCH_crit($r$$) - FCH_focus($r$$) - FCH_hit($r$$);
}
var FE_EVADE = 1, FE_FOCUS = 10, FCH_HIT = 1, FCH_FOCUS = 100, FCH_CRIT = 10, UNITFILTER = {}, ACTIONFILTER = {}, MOVEFILTER = {}, TEXTFILTER = "";
function unitfilter($s$$) {
  "undefined" != typeof UNITFILTER[$s$$] ? delete UNITFILTER[$s$$] : UNITFILTER[$s$$] = !0;
  displayfactionunits(!0);
}
function actionfilter($s$$) {
  "undefined" != typeof ACTIONFILTER[$s$$] ? delete ACTIONFILTER[$s$$] : ACTIONFILTER[$s$$] = !0;
  displayfactionunits(!0);
}
function textfilter($s$$) {
  TEXTFILTER = $s$$;
  log(TEXTFILTER);
  displayfactionunits(!0);
}
function addroll($f$jscomp$75_t$$, $id$$, $n$jscomp$342_to$$) {
  if ($n$jscomp$342_to$$ == DEFENSE_M) {
    return addrolld($f$jscomp$75_t$$, $id$$);
  }
  $n$jscomp$342_to$$ = getattackdice();
  var $foc$$ = $(".focusreddice").length, $h$$ = $(".hitreddice").length, $c$$ = $(".criticalreddice").length;
  $f$jscomp$75_t$$ = $f$jscomp$75_t$$(100 * $foc$$ + 10 * $c$$ + $h$$, $n$jscomp$342_to$$);
  displayattackroll($f$jscomp$75_t$$.m, $f$jscomp$75_t$$.n);
  $("#atokens #mod" + $id$$).remove();
}
function addrolld($f$$, $id$$) {
  var $n$jscomp$343_t$$ = getdefensedice(), $foc$$ = $(".focusgreendice").length, $e$$ = $(".evadegreendice").length, $n$jscomp$343_t$$ = $f$$(10 * $foc$$ + $e$$, $n$jscomp$343_t$$);
  displaydefenseroll($n$jscomp$343_t$$.m, $n$jscomp$343_t$$.n);
  $("#dtokens #mod" + $id$$).remove();
}
function modroll($f$jscomp$77_r$$, $id$$, $n$jscomp$344_to$$) {
  if ($n$jscomp$344_to$$ == DEFENSE_M) {
    return modrolld($f$jscomp$77_r$$, $id$$);
  }
  $n$jscomp$344_to$$ = getattackdice();
  var $foc$$ = $(".focusreddice").length, $h$$ = $(".hitreddice").length, $c$$ = $(".criticalreddice").length;
  $f$jscomp$77_r$$ = $f$jscomp$77_r$$(100 * $foc$$ + 10 * $c$$ + $h$$, $n$jscomp$344_to$$);
  displayattackroll($f$jscomp$77_r$$, $n$jscomp$344_to$$);
  $("#atokens #mod" + $id$$).remove();
}
function modrolld($f$$, $id$$) {
  var $n$$ = getdefensedice(), $foc$jscomp$3_r$$ = $(".focusgreendice").length, $e$$ = $(".evadegreendice").length, $foc$jscomp$3_r$$ = $f$$(10 * $foc$jscomp$3_r$$ + $e$$, $n$$);
  displaydefenseroll($foc$jscomp$3_r$$, $n$$);
  $("#dtokens #mod" + $id$$).remove();
}
function addgreenclickchange() {
  var $change$$ = function $$change$$$() {
    $(this).hasClass("focusgreendice") ? ($(this).removeClass("focusgreendice"), $(this).addClass("evadegreendice")) : $(this).hasClass("blankgreendice") ? ($(this).removeClass("blankgreendice"), $(this).addClass("focusgreendice")) : $(this).hasClass("evadegreendice") && ($(this).removeClass("evadegreendice"), $(this).addClass("blankgreendice"));
  };
  $(".focusgreendice").click($change$$);
  $(".evadegreendice").click($change$$);
  $(".blankgreendice").click($change$$);
}
function displaydefenseroll($r$$, $n$$) {
  var $i$$, $j$$ = 0;
  $("#defense").empty();
  for ($i$$ = 0;$i$$ < Math.floor($r$$ / 10);$i$$++, $j$$++) {
    $("#defense").append("<td class='focusgreendice'></td>");
  }
  for ($i$$ = 0;$i$$ < $r$$ % 10;$i$$++, $j$$++) {
    $("#defense").append("<td class='evadegreendice'></td>");
  }
  for ($i$$ = $j$$;$i$$ < $n$$;$i$$++) {
    $("#defense").append("<td class='blankgreendice'></td>");
  }
  addgreenclickchange();
}
function reroll($n$jscomp$347_r$$, $from$$, $to$$, $a$$, $id$$) {
  var $i$jscomp$0$$, $l$$, $m$$ = 0, $attackroll$$ = ["blank", "focus", "hit", "critical"], $defenseroll$$ = ["blank", "focus", "evade"];
  "function" == typeof $a$$.f && $a$$.f();
  var $str$$ = "";
  if ($to$$ == ATTACK_M) {
    for ($i$jscomp$0$$ = 0;4 > $i$jscomp$0$$;$i$jscomp$0$$++) {
      if ((!activeunit.hasnorerollmodifiers($from$$, $to$$, getattackvalue(), getattackdice(), "focus") || "undefined" != typeof $a$$.mustreroll || "focus" != $attackroll$$[$i$jscomp$0$$]) && -1 < $a$$.dice.indexOf($attackroll$$[$i$jscomp$0$$])) {
        if ($l$$ = $("." + $attackroll$$[$i$jscomp$0$$] + "reddice:not([noreroll])"), $l$$.length < $n$jscomp$347_r$$) {
          $l$$.remove(), $str$$ += ("<span class='" + $attackroll$$[$i$jscomp$0$$] + "reddice'></span>").repeat($l$$.length), $m$$ += $l$$.length, $n$jscomp$347_r$$ -= $l$$.length;
        } else {
          $("." + $attackroll$$[$i$jscomp$0$$] + "reddice:lt(" + $n$jscomp$347_r$$ + "):not([noreroll])").remove();
          $str$$ += ("<span class='" + $attackroll$$[$i$jscomp$0$$] + "reddice'></span>").repeat($n$jscomp$347_r$$);
          $m$$ += $n$jscomp$347_r$$;
          $n$jscomp$347_r$$ = 0;
          break;
        }
      }
    }
    $str$$ += " -> ";
    $("#atokens #reroll" + $id$$).remove();
    $n$jscomp$347_r$$ = activeunit.rollattackdie($m$$);
    for ($i$jscomp$0$$ = 0;$i$jscomp$0$$ < $m$$;$i$jscomp$0$$++) {
      $str$$ += "<span class='" + $n$jscomp$347_r$$[$i$jscomp$0$$] + "reddice'></span>", $("#attack").append("<td class='" + $n$jscomp$347_r$$[$i$jscomp$0$$] + "reddice' noreroll></td>");
    }
    addredclickchange();
  } else {
    for ($i$jscomp$0$$ = 0;3 > $i$jscomp$0$$;$i$jscomp$0$$++) {
      if (("undefined" != typeof $a$$.mustreroll || !targetunit.hasnorerollmodifiers($from$$, $to$$, getattackvalue(), getattackdice(), "focus") || "focus" != $attackroll$$[$i$jscomp$0$$]) && -1 < $a$$.dice.indexOf($defenseroll$$[$i$jscomp$0$$])) {
        if ($l$$ = $("." + $defenseroll$$[$i$jscomp$0$$] + "greendice:not([noreroll])"), $l$$.length < $n$jscomp$347_r$$) {
          $l$$.remove(), $m$$ += $l$$.length, $n$jscomp$347_r$$ -= $l$$.length;
        } else {
          $("." + $attackroll$$[$i$jscomp$0$$] + "greendice:lt(" + $n$jscomp$347_r$$ + "):not([noreroll])").remove();
          $m$$ += $n$jscomp$347_r$$;
          $n$jscomp$347_r$$ = 0;
          break;
        }
      }
    }
    $("#dtokens #reroll" + $id$$).remove();
    activeunit.defenseroll($m$$).done(function($r$$) {
      var $i$$;
      for ($i$$ = 0;$i$$ < FE_evade($r$$.roll);$i$$++) {
        $("#defense").append("<td class='evadegreendice'></td>");
      }
      for ($i$$ = 0;$i$$ < FE_focus($r$$.roll);$i$$++) {
        $("#defense").append("<td class='focusgreendice'></td>");
      }
      for ($i$$ = 0;$i$$ < FE_blank($r$$.roll, $r$$.dice);$i$$++) {
        $("#defense").append("<td class='blankgreendice'></td>");
      }
      addgreenclickchange();
    });
  }
}
function next_replay() {
  var $p$$ = [];
  0 < REPLAY.length && ($p$$ = REPLAY[replayid].split("_"));
  return $p$$;
}
function enablenextphase() {
  var $i$jscomp$296_n1$$, $ready$$ = !0;
  switch(phase) {
    case SELECT_PHASE:
      $i$jscomp$296_n1$$ = $("#squad1").attr("data-name");
      var $n2$$ = $("#squad2").attr("data-name");
      if ("undefined" == typeof $i$jscomp$296_n1$$ || "undefined" == typeof $n2$$) {
        $ready$$ = !1, $(".nextphase").prop("disabled", !0);
      }
      break;
    case PLANNING_PHASE:
      for ($i$jscomp$296_n1$$ in squadron) {
        if (0 > squadron[$i$jscomp$296_n1$$].maneuver && !squadron[$i$jscomp$296_n1$$].isdocked) {
          $ready$$ = !1;
          break;
        }
      }
      $ready$$ && $(".nextphase").prop("disabled") && log(UI_translation["All units have planned a maneuver, ready to end phase"]);
      break;
    case ACTIVATION_PHASE:
      if (subphase != ACTIVATION_PHASE) {
        subphase = ACTIVATION_PHASE;
        skillturn = 0;
        $ready$$ = !1;
        for ($i$jscomp$296_n1$$ in squadron) {
          squadron[$i$jscomp$296_n1$$].enddecloak().done(nextactivation);
        }
        barrier(nextactivation);
      } else {
        for ($i$jscomp$296_n1$$ in squadron) {
          if (-1 < squadron[$i$jscomp$296_n1$$].maneuver && !squadron[$i$jscomp$296_n1$$].isdocked) {
            $ready$$ = !1;
            break;
          }
        }
        $ready$$ && $(".nextphase").prop("disabled") && log(UI_translation["All units have been activated, ready to end phase"]);
      }
  }
  $ready$$ && $(".nextphase").prop("disabled", !1);
  return $ready$$ && FAST && phase >= SETUP_PHASE ? nextphase() : $ready$$;
}
function win($destroyed_note$$) {
  log("Team " + $destroyed_note$$ + " was destroyed!");
  movelog("W");
  var $title$$ = "m-draw", $d$jscomp$50_i$$, $s1$$ = "", $s2$$ = "", $score1$$ = 0, $score2$$ = 0, $saved1$$ = !1, $saved2$$ = !1;
  for ($d$jscomp$50_i$$ = 0;$d$jscomp$50_i$$ < allunits.length;$d$jscomp$50_i$$++) {
    var $u$$ = allunits[$d$jscomp$50_i$$];
    $u$$.dead || 1 != $u$$.team || ($saved1$$ = !0);
    $u$$.dead || 2 != $u$$.team || ($saved2$$ = !0);
    if ($u$$.dead || $u$$.islarge && $u$$.shield + $u$$.hull < ($u$$.ship.hull + $u$$.ship.shield) / 2) {
      var $p$$ = parseInt($u$$.dead ? $u$$.points : $u$$.points / 2);
      1 == $u$$.team ? ($s2$$ += "<tr><td>" + $u$$.name + ($u$$.dead ? "" : " (1/2 points)") + "</td><td>" + $p$$ + "</td></tr>", $score2$$ += $p$$) : ($s1$$ += "<tr><td>" + $u$$.name + ($u$$.dead ? "" : " (1/2 points)") + "</td><td>" + $p$$ + "</td></tr>", $score1$$ += $p$$);
    }
  }
  0 == $saved1$$ && ($score2$$ = 100);
  0 == $saved2$$ && ($score1$$ = 100);
  "" == $s1$$ && ($s1$$ = "<tr><td class='m-nocasualty'></td><td>0</td></tr>");
  "" == $s2$$ && ($s2$$ = "<tr><td class='m-nocasualty'></td><td>0</td></tr>");
  $d$jscomp$50_i$$ = $score1$$ - $score2$$;
  $score1$$ = $d$jscomp$50_i$$ + 100;
  $score2$$ = 100 - $d$jscomp$50_i$$;
  $(".victory-table").empty();
  $(".victory-table").append("<tr><th class='m-squad1'></th><th>" + $score1$$ + "</th></tr>");
  $(".victory-table").append($s1$$);
  $(".victory-table").append("<tr><th class='m-squad2'></th><th>" + $score2$$ + "</th></tr>");
  $(".victory-table").append($s2$$);
  if (0 < $d$jscomp$50_i$$ && 0 > WINCOND || 2 == $destroyed_note$$ && (WINCOND < round || 0 == WINCOND)) {
    $title$$ = "m-1win", log("Team 1 wins! " + $score1$$ + " to " + $score2$$);
  } else {
    if (0 > $d$jscomp$50_i$$ && 0 > WINCOND || 1 == $destroyed_note$$ && (WINCOND < round || 0 == WINCOND)) {
      $title$$ = "m-2win", log("Team 2 wins! " + $score2$$ + " to " + $score1$$);
    }
  }
  $(".victory").attr("class", $title$$);
  $destroyed_note$$ = TEAMS[1].toJuggler(!1);
  $destroyed_note$$ += "VS" + TEAMS[2].toJuggler(!1);
  $destroyed_note$$ = $destroyed_note$$.replace(/\n/g, ".");
  $destroyed_note$$ = $destroyed_note$$.replace(/ \+ /g, "*");
  $destroyed_note$$.replace(/ /g, "_");
  window.location = "#modal";
}
document.addEventListener("win", win, !1);
function battlelog($data$jscomp$35_t$$) {
  $data$jscomp$35_t$$ = SQUADLIST.row($data$jscomp$35_t$$.parents("tr")).data()[3];
  TEAMS[0].parseJuggler($data$jscomp$35_t$$, !1);
  $data$jscomp$35_t$$ = TEAMS[0].toJuggler(!1);
  displaycombats($data$jscomp$35_t$$);
  window.location = "#battlelog";
}
function createsquad() {
  $(".activeunit").prop("disabled", !0);
  $("#selectphase").hide();
  $("#addcomment").hide();
  ga("send", "event", {eventCategory:"interaction", eventAction:"create", eventLabel:"create"});
  phase = CREATION_PHASE;
  $("footer").hide();
  $("#consolecb").removeAttr("Checked");
  $(".nextphase").prop("disabled", !1);
  currentteam.changefaction("REBEL");
  $(".factionselect selected").val("REBEL");
  $("#creation").show();
  var $u$$ = {getdial:function() {
    return [{move:"TL1", difficulty:"WHITE"}, {move:"BL1", difficulty:"WHITE"}, {move:"F1", difficulty:"WHITE"}, {move:"SL2", difficulty:"WHITE"}, {move:"TL2", difficulty:"WHITE"}, {move:"BL2", difficulty:"WHITE"}, {move:"F2", difficulty:"WHITE"}, {move:"K2", difficulty:"WHITE"}, {move:"SL3", difficulty:"WHITE"}, {move:"TL3", difficulty:"WHITE"}, {move:"BL3", difficulty:"WHITE"}, {move:"F3", difficulty:"WHITE"}, {move:"K3", difficulty:"WHITE"}, {move:"F4", difficulty:"WHITE"}, {move:"K4", difficulty:"WHITE"}, 
    {move:"F5", difficulty:"WHITE"}, {move:"K5", difficulty:"WHITE"}];
  }};
  $("#dialfilter").html(Unit.prototype.getdialstring.call($u$$));
  $("#dialfilter td[move]").click(function() {
    var $m$$ = $(this).attr("move");
    "undefined" != typeof MOVEFILTER[$m$$] ? (delete MOVEFILTER[$m$$], $(this).removeClass("selected")) : (MOVEFILTER[$m$$] = !0, $(this).addClass("selected"));
    displayfactionunits(!0);
  });
  for (var $i$$ in generics) {
    if ($u$$ = generics[$i$$], $u$$.team == targetteam) {
      currentteam.faction = $u$$.faction;
      break;
    }
  }
  displayfactionunits();
  for ($i$$ in generics) {
    if ($u$$ = generics[$i$$], $u$$.team == targetteam) {
      currentteam.faction = $u$$.faction;
      addunit($u$$.pilotid, $u$$);
      for (var $j$$ = 0;$j$$ < $u$$.upgradetype.length;$j$$++) {
        var $upg$$ = $u$$.upg[$j$$];
        -1 < $upg$$ && addupgrade($u$$, $upg$$, $j$$);
      }
    }
  }
}
function switchdialimg($b$$) {
  1 == $b$$ ? ($("#caroussel .shipimg").css("display", "none"), $("#caroussel .shipdial").css("display", "table-cell")) : ($("#caroussel .shipdial").css("display", "none"), $("#caroussel .shipimg").css("display", "table-cell"));
}
var mySpreadsheets = ["https://docs.google.com/spreadsheets/d/1KR1uc7QgbiDkxCU5J1rm9qBMMjwKC0WyfAuDhnrbgAA/edit#gid=0"];
function displayAIperformance() {
  for (var $i$$ = 0;$i$$ < mySpreadsheets.length;$i$$++) {
    $("#squadbattlediv").sheetrock({url:mySpreadsheets[$i$$], query:"select B", callback:AIstats, rowTemplate:function() {
      return "";
    }, labels:["Score"]});
  }
}
function selectrocks() {
  var $ROCKSHAPES$$ = [1, 2, 3, 4, 5, 6];
  $(".aster img").click(function($e$jscomp$34_i$$) {
    $e$jscomp$34_i$$ = parseInt($e$jscomp$34_i$$.target.id.substr(1), 10);
    if (-1 < $ROCKSHAPES$$.indexOf($e$jscomp$34_i$$)) {
      $ROCKSHAPES$$[$e$jscomp$34_i$$] = null;
    } else {
      var $j$$;
      for ($j$$ = 0;6 > $j$$ && null != $ROCKSHAPES$$[$j$$];$j$$++) {
      }
      6 > $j$$ && ($ROCKSHAPES$$[$j$$] = $e$jscomp$34_i$$, $("#a" + $e$jscomp$34_i$$).addClass("selected"));
    }
  }.bind(this));
}
function recomputeurl() {
  $("#squadbattlediv").sheetrock({url:mySpreadsheets[0], query:"select C", callback:computeurl, rowTemplate:function() {
    return "";
  }, labels:["ascii", "short", "long"]});
}
function displaycombats($t$$) {
  var $i$jscomp$301_s1$$ = $t$$;
  $t$$ = $t$$.replace(/\n/g, ".");
  $t$$ = $t$$.replace(/ \+ /g, "*");
  $t$$ = $t$$.replace(/ /g, "_");
  $(".replay").attr("src", "");
  "." != $t$$.slice(-1) && ($t$$ += ".");
  SEARCHINGSQUAD = $t$$;
  var $t1$$ = "";
  "en" != LANG && (TEAMS[0].parseJuggler($i$jscomp$301_s1$$, !1), $i$jscomp$301_s1$$ = TEAMS[0].toJuggler(!0));
  $t1$$ = $i$jscomp$301_s1$$.replace(/\n/g, "<br>");
  $("#battlingsquad").html($t1$$);
  SQUADBATTLE.clear().draw();
  for ($i$jscomp$301_s1$$ = 0;$i$jscomp$301_s1$$ < mySpreadsheets.length;$i$jscomp$301_s1$$++) {
    $("#squadbattlediv").sheetrock({url:mySpreadsheets[$i$jscomp$301_s1$$], query:"select B,C,E where C contains '" + $t$$ + "'", callback:myCallback, fetchSize:100, rowTemplate:function() {
      return "";
    }, labels:["Score", "Squadlist", "URL"]});
  }
}
function dial2JSON($dial$$) {
  var $m$$ = [], $j$$, $k$$;
  for ($j$$ = 0;5 >= $j$$;$j$$++) {
    $m$$[$j$$] = {item:"", moves:null};
  }
  for ($j$$ = 0;$j$$ < $dial$$.length;$j$$++) {
    d = $dial$$[$j$$];
    var $cx$$ = MPOS[d.move][0], $cy$$ = MPOS[d.move][1];
    $m$$[5 - $cx$$].item = $cx$$;
    if (null == $m$$[5 - $cx$$].moves) {
      for ($m$$[5 - $cx$$].moves = [], $k$$ = 0;6 >= $k$$;$k$$++) {
        $m$$[5 - $cx$$].moves[$k$$] = {difficulty:"", key:""};
      }
    }
    $m$$[5 - $cx$$].moves[$cy$$] = {difficulty:d.difficulty, key:P[d.move].key};
  }
  return $m$$;
}
function displayfactionunits($noreset_q$jscomp$11_rendered$jscomp$1_text$$) {
  var $count$$ = 0, $n$$ = 0, $i$$, $j$$, $k$$, $faction$$ = currentteam.faction, $p$$ = {}, $uu$$ = [];
  if (phase == CREATION_PHASE) {
    "REBEL" == $faction$$ ? $("#dialfilter td[move='SL3']").text(P.TRL3.key).attr("move", "TRL3") : $("#dialfilter td[move='TRL3']").text(P.SL3.key).attr("move", "SL3");
    for ($i$$ in unitlist) {
      -1 < unitlist[$i$$].faction.indexOf($faction$$) && $count$$++;
    }
    1 == $noreset_q$jscomp$11_rendered$jscomp$1_text$$ ? $("#caroussel").html("") : $(".caroussel").html("");
    for ($i$$ = 0;$i$$ < PILOTS.length;$i$$++) {
      var $u$$ = PILOTS[$i$$].unit;
      PILOTS[$i$$].faction == $faction$$ && ("undefined" == typeof $p$$[$u$$] && ($p$$[$u$$] = []), -1 < PILOTS[$i$$].upgrades.indexOf(ELITE) && (PILOTS[$i$$].haselite = !0), $noreset_q$jscomp$11_rendered$jscomp$1_text$$ = getpilottexttranslation(PILOTS[$i$$], $faction$$), "" != $noreset_q$jscomp$11_rendered$jscomp$1_text$$ && ($noreset_q$jscomp$11_rendered$jscomp$1_text$$ += 1 == PILOTS[$i$$].done ? "" : "<div><strong class='m-notimplemented'></strong></div>"), PILOTS[$i$$].tooltip = $noreset_q$jscomp$11_rendered$jscomp$1_text$$, 
      PILOTS[$i$$].trname = translate(PILOTS[$i$$].name), $p$$[$u$$].push(PILOTS[$i$$]));
    }
    for ($u$$ in $p$$) {
      $p$$[$u$$].sort(function($a$$, $b$$) {
        return $a$$.points - $b$$.points;
      });
    }
    for ($i$$ in unitlist) {
      -1 < unitlist[$i$$].faction.indexOf($faction$$) && (unitlist[$i$$].trname = SHIP_translation[$i$$], unitlist[$i$$].name = $i$$, "undefined" == typeof unitlist[$i$$].trname && (unitlist[$i$$].trname = $i$$), $uu$$.push(unitlist[$i$$]));
    }
    $uu$$.sort(function($a$$, $b$$) {
      return $a$$.trname > $b$$.trname;
    });
    for ($i$$ = 0;$i$$ < $uu$$.length;$i$$++) {
      $n$$++;
      $u$$ = $uu$$[$i$$];
      $noreset_q$jscomp$11_rendered$jscomp$1_text$$ = $p$$[$u$$.name];
      var $filter$jscomp$2_found$jscomp$2_v$$ = $p$$[$u$$.name][0].upgrades, $count$$ = !0;
      for ($j$$ in UNITFILTER) {
        -1 == $filter$jscomp$2_found$jscomp$2_v$$.indexOf($j$$) && ($count$$ = !1);
      }
      for ($j$$ in ACTIONFILTER) {
        -1 == $u$$.actionList.indexOf($j$$) && ($count$$ = !1);
      }
      if ("" != TEXTFILTER) {
        $noreset_q$jscomp$11_rendered$jscomp$1_text$$ = [];
        for ($k$$ in $p$$[$u$$.name]) {
          var $filter$jscomp$2_found$jscomp$2_v$$ = $p$$[$u$$.name][$k$$], $ttext$$ = getpilottexttranslation($filter$jscomp$2_found$jscomp$2_v$$, $faction$$), $tname$$ = translate($filter$jscomp$2_found$jscomp$2_v$$.name), $r$$ = new RegExp(TEXTFILTER, "i");
          ($ttext$$.match($r$$) || $tname$$.match($r$$)) && $noreset_q$jscomp$11_rendered$jscomp$1_text$$.push($filter$jscomp$2_found$jscomp$2_v$$);
        }
        0 == $noreset_q$jscomp$11_rendered$jscomp$1_text$$.length && ($count$$ = !1);
      }
      for ($j$$ in MOVEFILTER) {
        $filter$jscomp$2_found$jscomp$2_v$$ = !1;
        for ($k$$ = 0;$k$$ < $u$$.dial.length;$k$$++) {
          $u$$.dial[$k$$].move == $j$$ && ($filter$jscomp$2_found$jscomp$2_v$$ = !0);
        }
        $filter$jscomp$2_found$jscomp$2_v$$ || ($count$$ = !1);
      }
      $count$$ && ($noreset_q$jscomp$11_rendered$jscomp$1_text$$ = Mustache.render(TEMPLATES.faction, {shipimg:$u$$.img[0], fire:repeat("u", $u$$.fire), evade:repeat("u", $u$$.evade), hull:repeat("u", $u$$.hull), shield:repeat("u", $u$$.shield), diallist:dial2JSON($u$$.dial), shipname:$u$$.trname, actionlist:function() {
        var $al$$ = [];
        for ($j$$ = 0;$j$$ < $u$$.actionList.length;$j$$++) {
          $al$$[$j$$] = A[$u$$.actionList[$j$$]].key;
        }
        return $al$$;
      }, hastitle:$u$$.hastitle, shipupgrades:$p$$[$u$$.name][0].upgrades, pilots:$noreset_q$jscomp$11_rendered$jscomp$1_text$$}), $("#caroussel").append("<li>" + $noreset_q$jscomp$11_rendered$jscomp$1_text$$ + "</li>"));
    }
  }
}
function selectweapon($weapons$$) {
  $("#attackdial").html(Mustache.render(TEMPLATES.selectweapon, $weapons$$)).show();
}
function getpilottexttranslation($u$$, $faction$$) {
  var $idxn$$ = $u$$.name + ("SCUM" == $faction$$ ? " (Scum)" : "");
  if ("undefined" != typeof $u$$.edition) {
    var $i$$ = $u$$.name + "(" + $u$$.edition + ")";
    if ("undefined" != typeof PILOT_translation[$i$$] && "undefined" != typeof PILOT_translation[$i$$].text) {
      return formatstring(PILOT_translation[$i$$].text);
    }
  }
  return "undefined" != typeof PILOT_translation[$idxn$$] && "undefined" != typeof PILOT_translation[$idxn$$].text ? formatstring(PILOT_translation[$idxn$$].text) : "";
}
function getupgtxttranslation($name$$, $type$$) {
  var $v$$ = $name$$ + ($type$$ == CREW ? "(Crew)" : "");
  return "undefined" != typeof UPGRADE_translation[$v$$] && "undefined" != typeof UPGRADE_translation[$v$$].text ? formatstring(UPGRADE_translation[$v$$].text) : "";
}
function addunique($name$$) {
  UNIQUE[$name$$] = !0;
  for (var $i$$ = 0;$i$$ < PILOTS.length;$i$$++) {
    $name$$ == PILOTS[$i$$].name && $(".pilots button[pilotid=" + PILOTS[$i$$].pilotid + "]").prop("disabled", !0);
  }
  for ($i$$ = 0;$i$$ < UPGRADES.length;$i$$++) {
    $name$$ == UPGRADES[$i$$].name && $(".upglist button[data=" + $i$$ + "]").prop("disabled", !0);
  }
}
function removeunique($name$$) {
  UNIQUE[$name$$] = !1;
  for (var $i$$ = 0;$i$$ < PILOTS.length;$i$$++) {
    $name$$ == PILOTS[$i$$].name && $(".pilots button[pilotid=" + PILOTS[$i$$].pilotid + "]").prop("disabled", !1);
  }
  for ($i$$ = 0;$i$$ < UPGRADES.length;$i$$++) {
    $name$$ == UPGRADES[$i$$].name && $(".upglist button[data=" + $i$$ + "]").prop("disabled", !1);
  }
}
function addlimited($u$$, $data$$) {
  $("#unit" + $u$$.id + " .upglist button[data=" + $data$$ + "]").prop("disabled", !0);
}
function removelimited($u$$, $data$$) {
  $("#unit" + $u$$.id + " .upglist button[data=" + $data$$ + "]").prop("disabled", !1);
}
function addupgradeaddhandler($u$$) {
  $("#unit" + $u$$.id + " button.upgrades").click(function($e$jscomp$35_num$$) {
    var $org$$ = $e$jscomp$35_num$$.currentTarget.getAttribute("class").split(" ")[1];
    $e$jscomp$35_num$$ = $e$jscomp$35_num$$.currentTarget.getAttribute("num");
    var $p$$ = this.getupgradelist($org$$);
    $("#unit" + this.id + " .upgs .upgavail").hide();
    $("#unit" + this.id + " .upgs .upg").hide();
    "undefined" == typeof this.upgbonus[$org$$] && (this.upgbonus[$org$$] = 0);
    for (var $q$$ = [], $i$$ = 0;$i$$ < $p$$.length;$i$$++) {
      var $upg$$ = UPGRADES[$p$$[$i$$]], $disabled$$, $attacks$$ = [];
      if (!$upg$$.invisible) {
        $disabled$$ = 1 == UNIQUE[$upg$$.name] || (1 == $upg$$.limited || 1 == this.exclupg[$upg$$.type]) && 0 < $("#unit" + this.id + " .upg tr[data=" + $p$$[$i$$] + "]").length;
        var $pts$$ = $upg$$.points + this.upgbonus[$org$$];
        0 < $upg$$.points && 0 > $pts$$ && ($pts$$ = 0);
        var $text$$ = formatstring(getupgtxttranslation($upg$$.name, $upg$$.type));
        1 != $upg$$.done && ($text$$ += "<div><strong class='m-notimplemented'></strong></div>");
        "undefined" != typeof $upg$$.attack && ($attacks$$ = [{attack:$upg$$.attack, lrange:$upg$$.range[0], hrange:$upg$$.range[1]}]);
        $q$$.push({pts:$pts$$, tooltip:[$text$$], text:$text$$, isdisabled:$disabled$$, num:$e$jscomp$35_num$$, data:$p$$[$i$$], name:translate($upg$$.name).replace(/\(Crew\)/g, ""), attacks:$attacks$$});
      }
    }
    $("#unit" + this.id + " .upglist").html(Mustache.render(TEMPLATES["upglist-creation"], {upglist:$q$$}));
    $("#unit" + this.id + " .upglist button").click(function($e$jscomp$36_num$$) {
      var $data$$ = $e$jscomp$36_num$$.currentTarget.getAttribute("data");
      $e$jscomp$36_num$$ = $e$jscomp$36_num$$.currentTarget.getAttribute("num");
      $("#unit" + this.id + " .upgs .upgavail").show();
      $("#unit" + this.id + " .upgs .upg").show();
      addupgrade(this, $data$$, $e$jscomp$36_num$$);
    }.bind(this));
  }.bind($u$$));
}
function addunit($n$$, $u$jscomp$0$$) {
  "undefined" == typeof $u$jscomp$0$$ && ($u$jscomp$0$$ = new Unit(currentteam.team, $n$$));
  $("#listunits").append("<li id='unit" + $u$jscomp$0$$.id + "'></li>");
  $u$jscomp$0$$.show();
  $("li#unit" + $u$jscomp$0$$.id).hover(function() {
    $(".highlighted").removeClass("highlighted");
    $(this).addClass("highlighted");
  }, function() {
  });
  1 == $u$jscomp$0$$.unique && addunique($u$jscomp$0$$.name);
  $("#unit" + $u$jscomp$0$$.id + " .close").click(function() {
    var $data$$ = $(this).attr("data"), $u$$ = generics["u" + $data$$];
    $("#unit" + $data$$ + " .upg tr[data]").each(function() {
      var $d$$ = $(this).attr("data");
      1 == UPGRADES[$d$$].unique && removeunique(UPGRADES[$d$$].name);
    });
    1 == PILOTS[$u$$.pilotid].unique && removeunique($u$$.name);
    $("#unit" + $data$$).remove();
    delete generics["u" + $data$$];
    currentteam.updatepoints();
  });
  $("#unit" + $u$jscomp$0$$.id + " .duplicate").click(function() {
    var $data$$ = $(this).attr("data"), $u$$ = generics["u" + $data$$], $self$$ = addunit($u$$.pilotid);
    $("#unit" + $data$$ + " .upg tr[data]").each(function() {
      var $d$$ = $(this).attr("data"), $num$$ = $(this).attr("num");
      1 != UPGRADES[$d$$].unique && $u$$.upgnocopy != $d$$ && addupgrade($self$$, $d$$, $num$$);
    });
  });
  currentteam.updatepoints();
  addupgradeaddhandler($u$jscomp$0$$);
  return $u$jscomp$0$$;
}
function addupgrade($self$$, $data$$, $num$jscomp$0$$, $noremove$$) {
  var $org$$ = UPGRADES[$data$$];
  $("#unit" + $self$$.id + " .upglist").empty();
  if ("undefined" != typeof $org$$) {
    1 == $org$$.unique && addunique($org$$.name);
    1 == $org$$.limited && addlimited($self$$, $data$$);
    $("#unit" + $self$$.id + " .upgavail span[num=" + $num$jscomp$0$$ + "]").css("display", "none");
    var $text$$ = translate($org$$.name).replace(/\(Crew\)/g, "").replace(/\'/g, "");
    "undefined" == typeof $self$$.upgbonus[$org$$.type] && ($self$$.upgbonus[$org$$.type] = 0);
    var $pts$$ = $org$$.points + $self$$.upgbonus[$org$$.type];
    0 <= $org$$.points && 0 > $pts$$ && ($pts$$ = 0);
    var $tt$$ = "", $tttext$$ = formatstring(getupgtxttranslation($org$$.name, $org$$.type));
    "" != $tttext$$ && ($tt$$ = "<div class='tooltip'>" + $tttext$$ + (1 == $org$$.done ? "" : "<div><strong class='m-notimplemented'></strong></div></div>"));
    $("#unit" + $self$$.id + " .upg").append("<tr data=" + $data$$ + " num=" + $num$jscomp$0$$ + "><td><code class='upgrades " + $org$$.type + "'></code></td><td>" + $text$$ + $tt$$ + "</td><td class='pts'>" + $pts$$ + "<button>-</button></td></tr>");
    $self$$.upg[$num$jscomp$0$$] = $data$$;
    Upgrade.prototype.install.call($org$$, $self$$);
    "undefined" != typeof $org$$.install && $org$$.install($self$$);
    $("#unit" + $self$$.id + " .shipdial").html("<table>" + $self$$.getdialstring() + "</table>");
    $self$$.showupgradeadd();
    $self$$.showactionlist();
    $self$$.showstats();
    currentteam.updatepoints();
    "undefined" == typeof $noremove$$ ? $("#unit" + $self$$.id + " .upg tr[num=" + $num$jscomp$0$$ + "] button").click(function($data$jscomp$42_e$$) {
      var $num$$ = $data$jscomp$42_e$$.currentTarget.parentElement.parentElement.getAttribute("num");
      $data$jscomp$42_e$$ = $data$jscomp$42_e$$.currentTarget.parentElement.parentElement.getAttribute("data");
      $("#unit" + $self$$.id + " .upglist").empty();
      removeupgrade($self$$, $num$$, $data$jscomp$42_e$$);
    }.bind($self$$)) : $self$$.upgnocopy = $data$$;
  }
}
function removeupgrade($self$$, $num$$, $data$$) {
  var $org$$ = UPGRADES[$data$$];
  $("#unit" + $self$$.id + " .upgavail span[num=" + $num$$ + "]").css("display", "block");
  $("#unit" + $self$$.id + " .upg tr[num=" + $num$$ + "]").remove();
  1 == $org$$.unique && removeunique($org$$.name);
  1 == $org$$.limited && removelimited($self$$, $data$$);
  $self$$.upg[$num$$] = -1;
  "undefined" != typeof $org$$.uninstall && $org$$.uninstall($self$$);
  Upgrade.prototype.uninstall.call($org$$, $self$$);
  $("#unit" + $self$$.id + " .shipdial").html("<table>" + $self$$.getdialstring() + "</table>");
  $self$$.showupgradeadd();
  $self$$.showactionlist();
  $self$$.showstats();
  currentteam.updatepoints();
}
function setselectedunit($n$$, $td$$) {
  currentteam = TEAMS[$n$$];
  try {
    currentteam.parseJuggler($td$$, !0);
  } catch ($e$$) {
    currentteam.parseJuggler($td$$, !1);
  }
  currentteam.name = currentteam.toASCII();
  currentteam.toJSON();
  addrow($n$$, currentteam.name, currentteam.points, currentteam.faction, currentteam.toJuggler(!0));
}
function addrow($n$jscomp$351_team$$, $name$$, $pts$$, $faction$$, $jug$$, $fill$$, $isselection$$) {
  1 == $n$jscomp$351_team$$ && ($("#squad1").val($jug$$), $("#squad1points").html($pts$$), $("#squad1").attr("data-name", $name$$));
  2 == $n$jscomp$351_team$$ && ($("#squad2").val($jug$$), $("#squad2points").html($pts$$), $("#squad2").attr("data-name", $name$$));
  1 != $isselection$$ && enablenextphase();
  $n$jscomp$351_team$$ = $faction$$.toUpperCase();
  "undefined" != typeof localStorage[$name$$] && 1 != $fill$$ || SQUADLIST.row.add(["", $n$jscomp$351_team$$, "" + $pts$$, $jug$$, $name$$, "", ""]).draw(!1);
}
function endselection() {
  $("#creation").hide();
  $("#selectphase").show();
  currentteam.name = "SQUAD." + currentteam.toASCII();
  currentteam.toJSON();
  var $jug$$ = currentteam.toJuggler(!1);
  TEAMS[targetteam].parseJuggler($jug$$, !1);
  "undefined" == typeof localStorage[currentteam.name] && (localStorage[currentteam.name] = JSON.stringify({pts:currentteam.points, faction:currentteam.faction, jug:$jug$$, rocks:currentteam.rocks}));
  addrow(targetteam, currentteam.name, currentteam.points, currentteam.faction, currentteam.toJuggler(!0), !0);
}
function removerow($row$jscomp$1_t$$) {
  $row$jscomp$1_t$$ = SQUADLIST.row($row$jscomp$1_t$$.parents("tr"));
  var $data$$ = $row$jscomp$1_t$$.data()[4];
  delete localStorage[$data$$];
  $row$jscomp$1_t$$.remove().draw(!1);
}
function checkrow($n$$, $t$$) {
  var $name$jscomp$68_row$$ = SQUADLIST.row($t$$.parents("tr")), $data$$ = $name$jscomp$68_row$$.data()[3], $name$jscomp$68_row$$ = $name$jscomp$68_row$$.data()[4];
  $name$jscomp$68_row$$.match("SQUAD") && TEAMS[$n$$].setrocks($.parseJSON(localStorage[$name$jscomp$68_row$$]).rocks);
  setselectedunit($n$$, $data$$);
}
function importsquad($t$$) {
  currentteam.parseJSON($("#squad" + $t$$).val(), !0);
  currentteam.name = "SQUAD." + currentteam.toASCII();
  var $jug$$ = currentteam.toJuggler(!0);
  currentteam.toJSON();
  localStorage[currentteam.name] = JSON.stringify({pts:currentteam.points, faction:currentteam.faction, jug:currentteam.toJuggler(!1)});
  addrow($t$$, currentteam.name, currentteam.points, currentteam.faction, $jug$$);
}
function findsquad($t$$) {
  currentteam.parseJSON($("#squad" + $t$$).val(), !0);
  var $pattern$$ = currentteam.toJuggler(!1).replace(/ \+.*/g, "").replace(/\n/g, ".*.").replace(/ /g, "_");
  $("#squad" + $t$$).sheetrock({url:mySpreadsheets[0], query:"select C where C matches '.*VS" + $pattern$$ + "'", callback:matchsquad, fetchSize:100, rowTemplate:function() {
    return "";
  }, labels:["squad"]});
}
function matchsquad($error$$, $options$jscomp$11_tt$$, $response$$) {
  if (null != $response$$ && "undefined" != typeof $response$$.rows) {
    $response$$.rows.sort(function($a$$, $b$$) {
      return $a$$.cellsArray[0] < $b$$.cellsArray[0];
    });
    $error$$ = "";
    for (var $i$$ in $response$$.rows) {
      $options$jscomp$11_tt$$ = $response$$.rows[$i$$].cellsArray[0].split("VS"), $options$jscomp$11_tt$$[1] != $error$$ && ($error$$ = $options$jscomp$11_tt$$[1]);
    }
  }
}
function startcombat() {
}
function filltabskill() {
  var $i$$;
  tabskill = [];
  for ($i$$ = 0;12 >= $i$$;$i$$++) {
    tabskill[$i$$] = [];
  }
  for ($i$$ in squadron) {
    tabskill[squadron[$i$$].getskill()].push(squadron[$i$$]);
  }
  for ($i$$ = 0;12 >= $i$$;$i$$++) {
    tabskill[$i$$].sort(function($a$$, $b$$) {
      var $xa$$ = 0, $xb$$ = 0;
      1 == TEAMS[$a$$.team].initiative && ($xa$$ = 1);
      1 == TEAMS[$b$$.team].initiative && ($xb$$ = 1);
      return 0 == $xb$$ - $xa$$ ? $b$$.id - $a$$.id : $xb$$ - $xa$$;
    });
  }
}
var ZONE = [];
function movelog($s$$) {
  ANIM += "_-" + $s$$;
}
function endsetupphase() {
  $(".buttonbar .share-buttons").hide();
  $("#leftpanel").show();
  $(".bigbutton").hide();
  $(".bigbutton2").prop("disabled", !0);
  ZONE[1].remove();
  ZONE[2].remove();
  TEAMS[1].endsetup();
  TEAMS[2].endsetup();
  PERMALINK = permalink(!0);
  $("#turnselector").append("<option value='0'>" + UI_translation["phase" + SETUP_PHASE] + "</option>");
  $(".playerselect").remove();
  $(".nextphase").prop("disabled", !0);
  $(".unit").css("cursor", "pointer");
  $("#positiondial").hide();
  for (var $i$$ = 0;$i$$ < OBSTACLES.length;$i$$++) {
    OBSTACLES[$i$$].unDrag();
  }
  HISTORY = [];
}
function nextphase() {
  var $i$$;
  $("#savebtn").hide();
  window.location = "#";
  switch(phase) {
    case SELECT_PHASE:
      $(".mainbutton").hide();
      $("#game").show();
      $("#selectphase").hide();
      $("#creation").hide();
      $("#rightpanel").show();
      $("#leftpanel").show();
      break;
    case CREATION_PHASE:
      endselection();
      phase = SELECT_PHASE;
      return;
    case SETUP_PHASE:
      "human" == $("#player1 option:checked").val() ? TEAMS[1].isia = !1 : TEAMS[1].isia = !0;
      TEAMS[2].isia = !0;
      "computer" == $("#player2 option:checked").val() ? TEAMS[2].isia = !0 : TEAMS[2].isia = !1;
      1 == TEAMS[1].isia && TEAMS[1].setia();
      1 == TEAMS[2].isia && TEAMS[2].setia();
      ZONE[0].attr({fillOpacity:0});
      $(".imagebg").hide();
      endsetupphase();
      break;
    case PLANNING_PHASE:
      $("#maneuverdial").hide();
      break;
    case ACTIVATION_PHASE:
      $("#activationdial").hide();
      for ($i$$ in squadron) {
        squadron[$i$$].hasmoved = !1, squadron[$i$$].hasdecloaked = !1, squadron[$i$$].actiondone = !1, squadron[$i$$].endactivationphase();
      }
      var $b$$ = [];
      for ($i$$ = 0;$i$$ < BOMBS.length;$i$$++) {
        $b$$[$i$$] = BOMBS[$i$$];
      }
      for ($i$$ = 0;$i$$ < $b$$.length;$i$$++) {
        $b$$[$i$$].explode();
      }
      break;
    case COMBAT_PHASE:
      $("#attackdial").hide();
      $("#listunits").html("");
      for ($i$$ in squadron) {
        squadron[$i$$].endround();
      }
      $("#turnselector").append("<option value='" + round + "'>" + UI_translation["turn #"] + round + "</option>");
      round++;
      WINCOND < round && 0 < WINCOND && win(0);
      -WINCOND < round && 0 > WINCOND && win(0);
  }
  phase = phase == COMBAT_PHASE ? PLANNING_PHASE : phase + 1;
  movelog("P-" + round + "-" + phase);
  1 == phase ? $("#phase").empty() : 3 > phase ? $("#phase").html(UI_translation["phase" + phase]) : $("#phase").html(UI_translation["turn #"] + round + " " + UI_translation["phase" + phase]);
  $("#combatdial").hide();
  $(".nextphase").prop("disabled", !1);
  setphase();
}
function setphase($cannotreplay$$) {
  $(".imagebg").hide();
  switch(phase) {
    case SELECT_PHASE:
      $("#addcomment").hide();
      $(".mainbutton").show();
      $(".buttonbar .share-buttons").hide();
      $(".h2 .share-buttons").show();
      $(".permalink").hide();
      $(".activeunit").prop("disabled", !0);
      $("#rightpanel").hide();
      $("#leftpanel").hide();
      $("#game").hide();
      $("#selectphase").show();
      $("#creation").hide();
      currentteam.setfaction("REBEL");
      $(".nextphase").prop("disabled", !0);
      break;
    case SETUP_PHASE:
      $(".imagebg").show();
      $("#addcomment").show();
      for (var $name$jscomp$69_t$$ = ["bomb", "weapon", "upgrade", "social"], $i$$ = 0;$i$$ < $name$jscomp$69_t$$.length;$i$$++) {
        TEMPLATES[$name$jscomp$69_t$$[$i$$]] = $("#" + $name$jscomp$69_t$$[$i$$]).html(), Mustache.parse(TEMPLATES[$name$jscomp$69_t$$[$i$$]]);
      }
      $name$jscomp$69_t$$ = localStorage.name;
      if ("undefined" == typeof $name$jscomp$69_t$$ || null == $name$jscomp$69_t$$) {
        $name$jscomp$69_t$$ = UI_translation.human;
      }
      TEAMS[2].isia = !0;
      $("#player1").html("<option selected value='human'>" + $name$jscomp$69_t$$ + "</option>");
      $("#player1").append("<option value='computer'>" + UI_translation.computer + "</option>");
      $("#player2").html("<option selected value='computer'>" + UI_translation.computer + "</option>");
      $("#player2").append("<option value='human'>" + $name$jscomp$69_t$$ + "</option>");
      $("#player1").change(function() {
        TEAMS[1].isia = !TEAMS[1].isia;
        displayplayertype(1);
      });
      $("#player2").change(function() {
        TEAMS[2].isia = !TEAMS[2].isia;
        displayplayertype(2);
      });
      displayplayertype(1);
      displayplayertype(2);
      $(".bigbutton").show();
      $(".bigbutton2").prop("disabled", !1);
      $(".buttonbar .share-buttons").show();
      $("#team2").css("top", $("nav").height() + 2);
      $("#team1").css("top", $("nav").height() + 2);
      $(".ctrl").css("display", "block");
      ZONE[0] = s.path(SETUPS.playzone).attr({strokeWidth:6, stroke:halftone(WHITE), strokeDasharray:"20,10,5,5,5,10", id:"ZONE", fillOpacity:0, pointerEvents:"none"});
      $("#imagebg").change(function() {
        changeimage(this);
      });
      "" != SETUP.background && $(".playmat").css({background:"url(" + SETUP.background + ") no-repeat", backgroundSize:"100% 100%"});
      ZONE[0].appendTo(VIEWPORT);
      ZONE[1] = s.path(SETUPS.zone1).attr({fill:TEAMS[1].color, strokeWidth:2, opacity:0.3, pointerEvents:"none"});
      ZONE[1].appendTo(VIEWPORT);
      ZONE[2] = s.path(SETUPS.zone2).attr({fill:TEAMS[2].color, strokeWidth:2, opacity:0.3, pointerEvents:"none"});
      ZONE[2].appendTo(VIEWPORT);
      TEAMS[1].endselection(s);
      TEAMS[2].endselection(s);
      loadsound();
      TEAMS[1].points > TEAMS[2].points ? TEAMS[2].initiative = !0 : TEAMS[1].initiative = !0;
      1 == TEAMS[1].initiative ? log("TEAM #1 has initiative") : log("TEAM #2 has initiative");
      $(".activeunit").prop("disabled", !1);
      for ($i$$ in squadron) {
        if (!squadron[$i$$].isdocked) {
          break;
        }
      }
      activeunit = squadron[$i$$];
      activeunit.select();
      activeunit.show();
      $("#svgout").bind("mousewheel DOMMouseScroll", function($event$jscomp$4_z$$) {
        var $centery$jscomp$inline_1_e$jscomp$39_x$$ = $event$jscomp$4_z$$.originalEvent;
        $event$jscomp$4_z$$ = Math.pow(1.1, "undefined" != typeof $centery$jscomp$inline_1_e$jscomp$39_x$$.wheelDelta ? $centery$jscomp$inline_1_e$jscomp$39_x$$.wheelDelta / 360. : $centery$jscomp$inline_1_e$jscomp$39_x$$.detail / -9.);
        var $centerx$jscomp$inline_0_offsetX$jscomp$inline_8_y$$ = $centery$jscomp$inline_1_e$jscomp$39_x$$.clientX - $("#team1").width(), $centery$jscomp$inline_1_e$jscomp$39_x$$ = $centery$jscomp$inline_1_e$jscomp$39_x$$.clientY - $("nav").height(), $max$jscomp$inline_7_w$$ = $("#svgout").width(), $h$$ = $("#svgout").height(), $startX$jscomp$inline_5_vm$$ = 0, $offsetY$jscomp$inline_9_startY$$ = 0;
        $h$$ > $max$jscomp$inline_7_w$$ ? $offsetY$jscomp$inline_9_startY$$ = ($h$$ - $max$jscomp$inline_7_w$$) / 2 : $startX$jscomp$inline_5_vm$$ = ($max$jscomp$inline_7_w$$ - $h$$) / 2;
        $max$jscomp$inline_7_w$$ = Math.max(900. / $max$jscomp$inline_7_w$$, 900. / $h$$);
        $centerx$jscomp$inline_0_offsetX$jscomp$inline_8_y$$ = ($centerx$jscomp$inline_0_offsetX$jscomp$inline_8_y$$ - $startX$jscomp$inline_5_vm$$) * $max$jscomp$inline_7_w$$;
        $offsetY$jscomp$inline_9_startY$$ = ($centery$jscomp$inline_1_e$jscomp$39_x$$ - $offsetY$jscomp$inline_9_startY$$) * $max$jscomp$inline_7_w$$;
        $startX$jscomp$inline_5_vm$$ = VIEWPORT.m.clone().invert();
        $centery$jscomp$inline_1_e$jscomp$39_x$$ = $startX$jscomp$inline_5_vm$$.x($centerx$jscomp$inline_0_offsetX$jscomp$inline_8_y$$, $offsetY$jscomp$inline_9_startY$$);
        $centerx$jscomp$inline_0_offsetX$jscomp$inline_8_y$$ = $startX$jscomp$inline_5_vm$$.y($centerx$jscomp$inline_0_offsetX$jscomp$inline_8_y$$, $offsetY$jscomp$inline_9_startY$$);
        VIEWPORT.m.translate($centery$jscomp$inline_1_e$jscomp$39_x$$, $centerx$jscomp$inline_0_offsetX$jscomp$inline_8_y$$).scale($event$jscomp$4_z$$).translate(-$centery$jscomp$inline_1_e$jscomp$39_x$$, -$centerx$jscomp$inline_0_offsetX$jscomp$inline_8_y$$);
        VIEWPORT.transform(VIEWPORT.m);
        activeunit.show();
      });
      $("#svgout").mousedown(function($event$$) {
        dragstart($event$$);
      });
      $("#svgout").mousemove(function($e$$) {
        dragmove($e$$);
      });
      $("#svgout").mouseup(function($e$$) {
        dragstop($e$$);
      });
      jwerty.key("escape", nextphase);
      jwerty.key("alt+p", function() {
        activeunit.showpossiblepositions();
      }, {});
      jwerty.key("alt+m", function() {
        activeunit.showmeanposition();
      });
      jwerty.key("alt+shift+p", function() {
        $(".possible").remove();
      });
      jwerty.key("alt+1", function() {
        activeunit.addfocustoken();
        activeunit.show();
      });
      jwerty.key("alt+2", function() {
        activeunit.addevadetoken();
        activeunit.show();
      });
      jwerty.key("alt+3", function() {
        activeunit.iscloaked || (activeunit.addcloaktoken(), activeunit.show());
      });
      jwerty.key("alt+4", function() {
        activeunit.addstress();
        activeunit.show();
      });
      jwerty.key("alt+5", function() {
        activeunit.addiontoken();
        activeunit.show();
      });
      jwerty.key("alt+6", function() {
        activeunit.addtractorbeamtoken();
        activeunit.show();
      });
      jwerty.key("alt+shift+1", function() {
        0 < activeunit.focus && activeunit.removefocustoken();
        activeunit.show();
      });
      jwerty.key("alt+shift+2", function() {
        0 < activeunit.evade && activeunit.removeevadetoken();
        activeunit.show();
      });
      jwerty.key("alt+shift+3", function() {
        activeunit.iscloaked && (activeunit.removecloaktoken(), activeunit.show());
      });
      jwerty.key("alt+shift+4", function() {
        0 < activeunit.stress && activeunit.removestresstoken();
        activeunit.show();
      });
      jwerty.key("alt+shift+5", function() {
        0 < activeunit.ionized && activeunit.removeiontoken();
      });
      jwerty.key("alt+shift+6", function() {
        0 < activeunit.tractorbeam && activeunit.removetractorbeamtoken();
      });
      jwerty.key("alt+f", function() {
        var $s$$ = "";
        for ($i$$ in activeunit.actionsdone) {
          $s$$ += activeunit.actionsdone[$i$$] + " ";
        }
        activeunit.log("actions done:" + $s$$);
      });
      jwerty.key("alt+d", function() {
        activeunit.resolvehit(1);
      });
      jwerty.key("alt+c", function() {
        activeunit.resolvecritical(1);
      });
      jwerty.key("alt+shift+d", function() {
        activeunit.hull < activeunit.ship.hull ? activeunit.addhull(1) : activeunit.shield < activeunit.ship.shield && activeunit.addshield(1);
        activeunit.show();
      });
      0 < SETUPS.asteroids && loadrock(s, ROCKDATA);
      log("<div>[" + UI_translation["turn #"] + round + "]" + UI_translation["phase" + phase] + "</div>");
      $(".unit").css("cursor", "move");
      $("#positiondial").show();
      $(".permalink").show();
      $("#savebtn").hide();
      1 != $cannotreplay$$ && startreplayall();
      break;
    case PLANNING_PHASE:
      active = 0;
      actionr = [$.Deferred().resolve()];
      actionrlock = $.Deferred().resolve();
      log("<div>[" + UI_translation["turn #"] + round + "]" + UI_translation["phase" + phase] + "</div>");
      $(".nextphase").prop("disabled", !0);
      $("#maneuverdial").show();
      skillturn = 0;
      filltabskill();
      $("#savebtn").show();
      for ($i$$ in squadron) {
        squadron[$i$$].newm = squadron[$i$$].m, squadron[$i$$].beginplanningphase().progress(nextplanning);
      }
      nextplanning();
      break;
    case ACTIVATION_PHASE:
      log("<div>[" + UI_translation["turn #"] + round + "]" + UI_translation["phase" + phase] + "</div>");
      $(".nextphase").prop("disabled", !0);
      $("#activationdial").show();
      for ($i$$ in squadron) {
        squadron[$i$$].beginactivationphase().done(nextdecloak);
      }
      filltabskill();
      subphase = DECLOAK_PHASE;
      skillturn = 0;
      barrier(nextdecloak);
      break;
    case COMBAT_PHASE:
      log("<div>[" + UI_translation["turn #"] + round + "]" + UI_translation["phase" + phase] + "</div>");
      $("#attackdial").show();
      skillturn = 12;
      for ($i$$ in squadron) {
        squadron[$i$$].begincombatphase().done(nextcombat);
      }
      barrier(nextcombat);
  }
}
function barrier($f$$) {
  $.when.apply(null, actionr).done($f$$);
}
function log($str$$) {
  $("#log").append("<div>" + $str$$ + "<div>");
  $("#log").scrollTop(10000);
}
function permalink($himg$$) {
  var $r$$ = "";
  $himg$$ || ($r$$ = ANIM);
  $himg$$ = localStorage.image;
  var $name$$ = localStorage.name;
  "undefined" == typeof $himg$$ && ($himg$$ = "");
  "undefined" == typeof $name$$ && ($name$$ = "");
  return LZString.compressToEncodedURIComponent(TEAMS[1].toASCII() + "&" + TEAMS[2].toASCII() + "&" + saverock() + "&" + TEAMS[1].isia + "&" + TEAMS[2].isia + "&" + SETUP.name + "&" + $r$$ + "&" + $himg$$ + "&" + $name$$);
}
function resetlink($home_idx$$, $setup$$, $arg$jscomp$7_clean_uri_round$jscomp$2_uri$$) {
  switch(phase) {
    case SETUP_PHASE:
    case SELECT_PHASE:
      document.location.search = "";
      $arg$jscomp$7_clean_uri_round$jscomp$2_uri$$ = document.location.href;
      0 < $arg$jscomp$7_clean_uri_round$jscomp$2_uri$$.indexOf("?") && ($arg$jscomp$7_clean_uri_round$jscomp$2_uri$$ = $arg$jscomp$7_clean_uri_round$jscomp$2_uri$$.substring(0, $arg$jscomp$7_clean_uri_round$jscomp$2_uri$$.indexOf("?")), window.history.replaceState({}, document.title, $arg$jscomp$7_clean_uri_round$jscomp$2_uri$$));
      location.reload();
      break;
    case CREATION_PHASE:
      phase = 0;
      document.location.search = "";
      nextphase();
      break;
    default:
      1 == $home_idx$$ ? "" != document.location.search ? document.location.search = "" : document.location.reload() : (1 == $setup$$ ? ANIM = "" : 1 == $arg$jscomp$7_clean_uri_round$jscomp$2_uri$$ ? $("#turnselector option:selected").each(function() {
        var $idx$jscomp$1_r$$ = $(this).val();
        -1 != $idx$jscomp$1_r$$ && (0 == $idx$jscomp$1_r$$ ? ANIM = "" : ($idx$jscomp$1_r$$ = ANIM.search("_-P-" + $idx$jscomp$1_r$$ + "-3"), ANIM = ANIM.slice(0, ANIM.indexOf("_", $idx$jscomp$1_r$$ + 1))));
      }) : ($home_idx$$ = ANIM.search("_-P-" + $arg$jscomp$7_clean_uri_round$jscomp$2_uri$$ + "-3"), -1 == ANIM.indexOf("_", $home_idx$$ + 1) && ($home_idx$$ = ANIM.search("_-P-" + ($arg$jscomp$7_clean_uri_round$jscomp$2_uri$$ - 1) + "-3")), ANIM = ANIM.slice(0, ANIM.indexOf("_", $home_idx$$ + 1))), $arg$jscomp$7_clean_uri_round$jscomp$2_uri$$ = LZString.decompressFromEncodedURIComponent(decodeURI(PERMALINK)), args = $arg$jscomp$7_clean_uri_round$jscomp$2_uri$$.split("&"), args[2] = saverock(), args[6] = 
      ANIM, $arg$jscomp$7_clean_uri_round$jscomp$2_uri$$ = args.join("&"), document.location.search = "?" + LZString.compressToEncodedURIComponent($arg$jscomp$7_clean_uri_round$jscomp$2_uri$$));
  }
}
function record($id$$, $val$$, $str$$) {
}
function history_toASCII() {
  for (var $str$$ = "", $i$$ = 0;$i$$ < HISTORY.length;$i$$++) {
    $str$$ += HISTORY[$i$$].s + "_" + HISTORY[$i$$].id + ";";
  }
  return $str$$;
}
function select($id$$) {
  for (var $i$$ in squadron) {
    if (squadron[$i$$].id == $id$$) {
      break;
    }
  }
  squadron[$i$$].select();
  $("#" + activeunit.id).attr({color:"white", background:"tomato"});
}
function probatable($attacker$$, $defender$$) {
  var $i$$, $j$$, $str$$ = "";
  for ($i$$ = 0;5 >= $i$$;$i$$++) {
    $str$$ += "<tr><td>" + $i$$ + "</td>";
    for ($j$$ = 0;5 >= $j$$;$j$$++) {
      var $k$$ = $j$$;
      0 < $defender$$.adddice && ($k$$ += $defender$$.adddice);
      $k$$ = tohitproba($attacker$$, {}, $defender$$, ATTACK[$i$$], DEFENSE[$k$$], $i$$, $k$$);
      $str$$ += "<td class='probacell' style='background:hsl(" + 1.2 * (100 - $k$$.tohit) + ",100%,80%)'>";
      $str$$ += "<div>" + $k$$.tohit + "%</div><div><code class='symbols'>d</code>" + $k$$.meanhit + "</div><div><code class='symbols'>c</code>" + $k$$.meancritical + "</div></td>";
    }
    $str$$ += "</tr>";
  }
  return $str$$;
}
function fillprobatable() {
  var $attacker$jscomp$18_str$$ = {focus:$("#focusA").prop("checked") ? 1 : 0, reroll:$("#targetA").prop("checked") ? 5 : 0}, $defender$$ = {focus:$("#focusD").prop("checked") ? 1 : 0, evade:$("#evadeD").prop("checked") ? 1 : 0, adddice:$("#cloakD").prop("checked") ? 2 : 0, reroll:0}, $ra$$;
  $ra$$ = parseInt($("#rerollA").val(), 10);
  var $rd$$ = parseInt($("#rerollD").val(), 10);
  if (0 == $attacker$jscomp$18_str$$.reroll || 0 < $ra$$ && $ra$$ < $attacker$jscomp$18_str$$.reroll) {
    $attacker$jscomp$18_str$$.reroll = $ra$$;
  }
  if (0 == $defender$$.reroll || 0 < $rd$$ && $rd$$ < $defender$$.reroll) {
    $defender$$.reroll = $rd$$;
  }
  $attacker$jscomp$18_str$$ = "<tr><th>Rolls</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr>" + probatable($attacker$jscomp$18_str$$, $defender$$);
  $("#probatable").html($attacker$jscomp$18_str$$);
}
function modal_dragstart($event$$) {
  var $style$$ = window.getComputedStyle($event$$.originalEvent.target, null);
  $event$$.originalEvent.dataTransfer.setData("text/plain", $event$$.target.parentElement.id + "," + (parseInt($style$$.getPropertyValue("left"), 10) - $event$$.originalEvent.clientX) + "," + (parseInt($style$$.getPropertyValue("top"), 10) - $event$$.originalEvent.clientY));
}
function modal_dragover($event$$) {
  $event$$.originalEvent.preventDefault();
  return !1;
}
function modal_drop($event$$) {
  var $offset$$ = $event$$.originalEvent.dataTransfer.getData("text/plain").split(","), $id$$ = $offset$$[0];
  $("#" + $id$$ + " > div").css("left", $event$$.originalEvent.clientX + parseInt($offset$$[1], 10) + "px");
  $("#" + $id$$ + " > div").css("top", $event$$.originalEvent.clientY + parseInt($offset$$[2], 10) + "px");
  $event$$.originalEvent.preventDefault();
  return !1;
}
var viewport_translate = function $viewport_translate$($dx$$, $dy$$) {
  VIEWPORT.m = MT($dx$$, $dy$$).add(VIEWPORT.m);
  $(".phasepanel").hide();
  VIEWPORT.transform(VIEWPORT.m);
}, viewport_zoom = function $viewport_zoom$($z$$) {
  $("#svgout").width();
  $("#svgout").height();
  var $offsetX$jscomp$1_y$$ = activeunit.m.x(0, 0), $offsetY$$ = activeunit.m.y(0, 0), $vm$$ = VIEWPORT.m.clone().invert(), $x$$ = $vm$$.x($offsetX$jscomp$1_y$$, $offsetY$$), $offsetX$jscomp$1_y$$ = $vm$$.y($offsetX$jscomp$1_y$$, $offsetY$$);
  VIEWPORT.m.translate($x$$, $offsetX$jscomp$1_y$$).scale($z$$).translate(-$x$$, -$offsetX$jscomp$1_y$$);
  VIEWPORT.transform(VIEWPORT.m);
  activeunit.show();
}, dragmove = function $dragmove$($event$$) {
  if (1 != activeunit.dragged && VIEWPORT.dragged) {
    var $max$jscomp$6_w$$ = $("#svgout").width(), $h$$ = $("#svgout").height(), $max$jscomp$6_w$$ = Math.max(900. / $max$jscomp$6_w$$, 900. / $h$$);
    VIEWPORT.dragMatrix = MT(($event$$.offsetX - VIEWPORT.x0) * $max$jscomp$6_w$$, ($event$$.offsetY - VIEWPORT.y0) * $max$jscomp$6_w$$).add(VIEWPORT.m);
    VIEWPORT.dragged = !0;
    $(".phasepanel").hide();
    VIEWPORT.transform(VIEWPORT.dragMatrix);
  }
}, dragstart = function $dragstart$($event$$) {
  VIEWPORT.dragged = !0;
  "svgout" == $event$$.originalEvent.target.id ? (VIEWPORT.x0 = $event$$.offsetX, VIEWPORT.y0 = $event$$.offsetY, VIEWPORT.dragged = !0, VIEWPORT.dragMatrix = VIEWPORT.m) : VIEWPORT.dragged = !1;
}, dragstop = function $dragstop$($e$$) {
  VIEWPORT.dragged && (VIEWPORT.m = VIEWPORT.dragMatrix, VIEWPORT.m.clone(), VIEWPORT.transform(VIEWPORT.m), activeunit.show());
  VIEWPORT.dragged = !1;
}, scrolloverflow = function $scrolloverflow$($event$$) {
  $("#" + $event$$.target.id + " .outoverflow").each(function($index$$) {
    "auto" != $(this).css("top") && $(this).css("top", $(this).parent().offset().top + "px");
  });
}, changelanguage = function $changelanguage$($l$$) {
  localStorage.LANG = $l$$;
  location.reload();
};
$(document).ready(function() {
  var $i$jscomp$0$$;
  s = Snap("#svgout");
  VIEWPORT = s.g().attr({id:"viewport"});
  VIEWPORT.m = new Snap.Matrix;
  FILTER = s.filter(Snap.filter.blur(5, 5));
  P = {F0:{path:s.path("M 0 0 L 0 0"), speed:0, key:"5"}, F1:{path:s.path("M 0 0 L 0 -80"), speed:1, key:"8"}, F2:{path:s.path("M 0 0 L 0 -120"), speed:2, key:"8"}, F3:{path:s.path("M 0 0 L 0 -160"), speed:3, key:"8"}, F4:{path:s.path("M 0 0 L 0 -200"), speed:4, key:"8"}, F5:{path:s.path("M 0 0 L 0 -240"), speed:5, key:"8"}, TR1:{path:s.path("M0 0 C 0 -40 15 -55 55 -55"), speed:1, key:"6"}, TR2:{path:s.path("M0 0 C 0 -50 33 -83 83 -83"), speed:2, key:"6"}, TRR2:{path:s.path("M0 0 C 0 -50 33 -83 83 -83"), 
  speed:2, key:";"}, TR3:{path:s.path("M0 0 C 0 -60 45 -105 105 -105"), speed:3, key:"6"}, TRR3:{path:s.path("M0 0 C 0 -60 45 -105 105 -105"), speed:3, key:";"}, TL1:{path:s.path("M0 0 C 0 -40 -15 -55 -55 -55"), speed:1, key:"4"}, TL2:{path:s.path("M0 0 C 0 -50 -33 -83 -83 -83"), speed:2, key:"4"}, TRL2:{path:s.path("M0 0 C 0 -50 -33 -83 -83 -83"), speed:2, key:":"}, TL3:{path:s.path("M0 0 C 0 -60 -45 -105 -105 -105"), speed:3, key:"4"}, TRL3:{path:s.path("M0 0 C 0 -60 -45 -105 -105 -105"), speed:3, 
  key:":"}, BR1:{path:s.path("M0 0 C 0 -20 18 -72 38 -92"), speed:1, key:"9"}, BR2:{path:s.path("M0 0 C 0 -30 24 -96 54 -126"), speed:2, key:"9"}, SR2:{path:s.path("M0 0 C 0 -30 24 -96 54 -126"), speed:2, key:"3"}, BR3:{path:s.path("M0 0 C 0 -40 29 -120 69 -160"), speed:3, key:"9"}, SR3:{path:s.path("M0 0 C 0 -40 29 -120 69 -160"), speed:3, key:"3"}, BL1:{path:s.path("M0 0 C 0 -20 -18 -72 -38 -92"), speed:1, key:"7"}, BL2:{path:s.path("M0 0 C 0 -30 -24 -96 -54 -126"), speed:2, key:"7"}, SL2:{path:s.path("M0 0 C 0 -30 -24 -96 -54 -126"), 
  speed:2, key:"1"}, BL3:{path:s.path("M0 0 C 0 -40 -29 -120 -69 -160"), speed:3, key:"7"}, SL3:{path:s.path("M0 0 C 0 -40 -29 -120 -69 -160"), speed:3, key:"1"}, K1:{path:s.path("M 0 0 L 0 -80"), speed:1, key:"2"}, K2:{path:s.path("M 0 0 L 0 -120"), speed:2, key:"2"}, K3:{path:s.path("M 0 0 L 0 -160"), speed:3, key:"2"}, K4:{path:s.path("M 0 0 L 0 -200"), speed:4, key:"2"}, K5:{path:s.path("M 0 0 L 0 -240"), speed:5, key:"2"}};
  for ($i$jscomp$0$$ in P) {
    P[$i$jscomp$0$$].path.attr({display:"none"});
  }
  $(".menu").mouseover(function() {
    $(".menu ul").css({display:"block", visibility:"visible"});
  }).mouseout(function() {
    $("nav ul").css({display:"none", visibility:"hidden"});
  });
  "undefined" != typeof gapi && gapi.load("client", function() {
    gapi.client.setApiKey("AIzaSyBN2T9d2ZuWaT0Vj6EanYb5IgWzLlhy7Zo");
    gapi.client.load("urlshortener", "v1");
  });
  LANG = localStorage.LANG || window.navigator.userLanguage || window.navigator.language;
  LANG = LANG.substring(0, 2);
  $.ajaxSetup({beforeSend:function($xhr$$) {
    $xhr$$.overrideMimeType && $xhr$$.overrideMimeType("application/json");
  }, isLocal:!0});
  -1 == "en fr de es it pl".split(" ").indexOf(LANG) && (LANG = "en");
  $("#langselect").val(LANG);
  $.when($.ajax("data/ships.json", {error:function($xhr$$, $status$$, $error$$) {
    console.log("**Error loading ships.json\n" + $status$$ + " " + $error$$);
  }}), $.ajax("data/strings." + LANG + ".json", {error:function($xhr$$, $status$$, $error$$) {
    console.log("**Error loading strings." + LANG + ".json\n" + $status$$ + " " + $error$$);
  }}), $.ajax("data/xws.json", {error:function($xhr$$, $status$$, $error$$) {
    console.log("**Error loading xws.json\n" + $status$$ + " " + $error$$);
  }}), $.ajax("data/strings.en.json", {error:function($xhr$$, $status$$, $error$$) {
    console.log("**Error loading strings." + LANG + ".json\n" + $status$$ + " " + $error$$);
  }})).done(function($result1_str$$, $result2_u$$, $args$jscomp$4_found$jscomp$3_ntot_pilots$$, $css_translation_r4$$) {
    var $process$$ = setInterval(function() {
      ATTACK[dice] = attackproba(dice);
      DEFENSE[dice] = defenseproba(dice);
      dice++;
      8 == dice && (fillprobatable(), $("#showproba").prop("disabled", !1), clearInterval($process$$));
    }, 500);
    unitlist = $result1_str$$[0];
    ENSHIP_translation = $css_translation_r4$$[0].ships;
    ENPILOT_translation = $css_translation_r4$$[0].pilots;
    ENUPGRADE_translation = $css_translation_r4$$[0].upgrades;
    SHIP_translation = $result2_u$$[0].ships;
    PILOT_translation = $result2_u$$[0].pilots;
    UPGRADE_translation = $result2_u$$[0].upgrades;
    UI_translation = $result2_u$$[0].ui;
    CRIT_translation = $result2_u$$[0].criticals;
    $css_translation_r4$$ = $result2_u$$[0].css;
    $result1_str$$ = "";
    if ("en" != LANG) {
      for ($i$$ in ENUPGRADE_translation) {
        $result2_u$$ = ENUPGRADE_translation[$i$$];
        var $v$$ = UPGRADE_translation[$i$$];
        "undefined" == typeof $v$$ && (UPGRADE_translation[$i$$] = $result2_u$$);
      }
      for ($i$$ in ENPILOT_translation) {
        $result2_u$$ = ENPILOT_translation[$i$$], $v$$ = PILOT_translation[$i$$], "undefined" == typeof $v$$ && (PILOT_translation[$i$$] = $result2_u$$);
      }
    }
    for (var $i$$ in $css_translation_r4$$) {
      $result1_str$$ += "." + $i$$ + '::after { content:"' + $css_translation_r4$$[$i$$] + '";}\n';
    }
    $("#localstrings").html($result1_str$$);
    UPGRADE_dict = $args$jscomp$4_found$jscomp$3_ntot_pilots$$[0].upgrades;
    PILOT_dict = $args$jscomp$4_found$jscomp$3_ntot_pilots$$[0].pilots;
    for (var $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$ in PILOT_dict) {
      for ($i$$ = 0;$i$$ < PILOTS.length;$i$$++) {
        PILOTS[$i$$].name == PILOT_dict[$arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$] && (PILOTS[$i$$].dict = $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$);
      }
      for ($i$$ in unitlist) {
        $i$$ == PILOT_dict[$arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$] && (unitlist[$i$$].dict = $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$);
      }
    }
    for ($i$$ = 0;$i$$ < UPGRADES.length;$i$$++) {
      $result2_u$$ = UPGRADES[$i$$], $result2_u$$.type == TITLE && (unitlist[$result2_u$$.ship].hastitle = !0);
    }
    for ($i$$ = 0;$i$$ < PILOTS.length;$i$$++) {
      $args$jscomp$4_found$jscomp$3_ntot_pilots$$ = !1;
      for ($arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$ in PILOT_dict) {
        if (PILOTS[$i$$].name == PILOT_dict[$arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$]) {
          $args$jscomp$4_found$jscomp$3_ntot_pilots$$ = !0;
          break;
        }
      }
      $args$jscomp$4_found$jscomp$3_ntot_pilots$$ || log("no xws translation for " + PILOTS[$i$$].name);
    }
    for ($i$$ = 0;$i$$ < UPGRADES.length;$i$$++) {
      $args$jscomp$4_found$jscomp$3_ntot_pilots$$ = !1;
      for ($arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$ in UPGRADE_dict) {
        if (UPGRADES[$i$$].name == UPGRADE_dict[$arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$]) {
          $args$jscomp$4_found$jscomp$3_ntot_pilots$$ = !0;
          break;
        }
      }
      $args$jscomp$4_found$jscomp$3_ntot_pilots$$ || log("no xws translation for " + UPGRADES[$i$$].name);
    }
    squadron = [];
    s.attr({width:"100%", height:"100%", viewBox:"0 0 900 900"});
    TEAMS[1].setfaction("REBEL");
    TEAMS[2].setfaction("EMPIRE");
    $args$jscomp$4_found$jscomp$3_ntot_pilots$$ = $result2_u$$ = $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$ = 0;
    $result1_str$$ = "";
    for ($i$$ = 0;$i$$ < PILOTS.length;$i$$++) {
      1 == PILOTS[$i$$].done && (PILOTS[$i$$].unique && $result2_u$$++, $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$++), PILOTS[$i$$].done || ($result1_str$$ = PILOTS[$i$$].unique ? $result1_str$$ + ", ." : $result1_str$$ + ", ", $result1_str$$ += PILOTS[$i$$].name);
    }
    log($arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$ + "/" + PILOTS.length + " pilots with full effect");
    "" != $result1_str$$ && log("Pilots NOT implemented" + $result1_str$$);
    $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$ = 0;
    $result1_str$$ = "";
    for ($i$$ = 0;$i$$ < UPGRADES.length;$i$$++) {
      UPGRADES[$i$$].invisible || (1 == UPGRADES[$i$$].done ? $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$++ : $result1_str$$ += ("" == $result1_str$$ ? "" : ", ") + (UPGRADES[$i$$].unique ? "." : "") + UPGRADES[$i$$].name, $args$jscomp$4_found$jscomp$3_ntot_pilots$$++);
    }
    $(".ver").html(VERSION);
    log($arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$ + "/" + $args$jscomp$4_found$jscomp$3_ntot_pilots$$ + " upgrades with full effect");
    log("Upgrades NOT working yet:" + $result1_str$$);
    $("#showproba").prop("disabled", !0);
    "undefined" == typeof localStorage.volume && (localStorage.volume = 0.8);
    "undefined" != typeof localStorage.image && $("#profile-avatar").attr("src", localStorage.image);
    "undefined" != typeof localStorage.name ? $("#nameinput").val(localStorage.name) : $("#nameinput").val("Human");
    Howler.volume(localStorage.volume);
    $("#vol").val(100 * localStorage.volume);
    var $mc$$ = new Hammer(document.getElementById("svgout"));
    $mc$$.get("pinch").set({enable:!0});
    $mc$$.get("pan").set({direction:Hammer.DIRECTION_ALL});
    $mc$$.on("panleft panright panup pandown", function($ev$$) {
      "svgout" == $ev$$.target.id && 1 != activeunit.dragged && viewport_translate(50 * -$ev$$.velocityX, 50 * -$ev$$.velocityY);
    });
    TEMPLATES["unit-creation"] = $("#unit-creation").html();
    Mustache.parse(TEMPLATES["unit-creation"]);
    TEMPLATES["upglist-creation"] = $("#upglist-creation").html();
    Mustache.parse(TEMPLATES["upglist-creation"]);
    TEMPLATES.faction = $("#faction").html();
    Mustache.parse(TEMPLATES.faction);
    TEMPLATES.usabletokens = $("#usabletokens").html();
    Mustache.parse(TEMPLATES.usabletokens);
    TEMPLATES.selectweapon = $("#selectweapon").html();
    Mustache.parse(TEMPLATES.selectweapon);
    $("body").on("mousedown", "footer", function() {
      $(this).addClass("draggable").parents().on("mousemove", function($e$$) {
        $(".draggable").offset({top:$e$$.pageY - $(".draggable").outerHeight() / 2, left:$e$$.pageX - $(".draggable").outerWidth() / 2}).on("mouseup", function() {
          $(this).removeClass("draggable");
        });
      });
      "function" == typeof(0).preventDefault && (0).preventDefault();
    }).on("mouseup", function() {
      $(".draggable").removeClass("draggable");
    });
    $mc$$.zoom = 1;
    $mc$$.on("pinch", function($ev$$) {
      if ("svgout" == $ev$$.target.id && 1 != activeunit.dragged) {
        var $vm$jscomp$2_y$$ = VIEWPORT.m.clone().invert(), $x$$ = $vm$jscomp$2_y$$.x($ev$$.center.x, $ev$$.center.y), $vm$jscomp$2_y$$ = $vm$jscomp$2_y$$.y($ev$$.center.x, $ev$$.center.y);
        VIEWPORT.m.translate($x$$, $vm$jscomp$2_y$$).scale($ev$$.scale).scale(1 / $mc$$.zoom).translate(-$x$$, -$vm$jscomp$2_y$$);
        $mc$$.zoom = $ev$$.scale;
        VIEWPORT.transform(VIEWPORT.m);
        activeunit.show();
        $ev$$["final"] && ($mc$$.zoom = 1);
      }
    });
    $("aside").on("scroll touchmove touchstart mousewheel", scrolloverflow);
    $("#squadbattle").html("<thead><tr><th><span class='m-score'></span></th><th><span class='m-opponent'></span></th></tr></thead>");
    SQUADBATTLE = $("#squadbattle").DataTable({language:{search:UI_translation.Search, lengthMenu:UI_translation["Display _MENU_ records per page"], zeroRecords:UI_translation["Nothing found - sorry"], info:UI_translation["Showing page _PAGE_ of _PAGES_"], infoEmpty:UI_translation["No records available"], infoFiltered:UI_translation["(filtered from _MAX_ total records)"]}, autoWidth:!0, scrollY:"20em", scrollX:!0, deferRender:!0, scrollCollapse:!0, ordering:!0, processing:!0, info:!0, paging:!0});
    $("#squadbattle tbody").on("click", "tr", function() {
      $(this).hasClass("selected") ? $(this).removeClass("selected") : ($("#squadbattle tr.selected").removeClass("selected"), $(this).addClass("selected"));
    });
    $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$ = LZString.decompressFromEncodedURIComponent(decodeURI(window.location.search.substr(1)));
    $args$jscomp$4_found$jscomp$3_ntot_pilots$$ = [];
    null != $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$ && ($args$jscomp$4_found$jscomp$3_ntot_pilots$$ = $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$.split("&"));
    if (1 < $args$jscomp$4_found$jscomp$3_ntot_pilots$$.length) {
      return log("Loading permalink..."), ROCKDATA = $args$jscomp$4_found$jscomp$3_ntot_pilots$$[2], phase = CREATION_PHASE, TEAMS[1].parseASCII($args$jscomp$4_found$jscomp$3_ntot_pilots$$[0]), TEAMS[1].toJSON(), TEAMS[2].parseASCII($args$jscomp$4_found$jscomp$3_ntot_pilots$$[1]), TEAMS[2].toJSON(), TEAMS[1].isia = !1, TEAMS[2].isia = !1, "true" == $args$jscomp$4_found$jscomp$3_ntot_pilots$$[3] ? TEAMS[1].isia = !0 : (localStorage.imageplayer = $args$jscomp$4_found$jscomp$3_ntot_pilots$$[7], localStorage.playername = 
      $args$jscomp$4_found$jscomp$3_ntot_pilots$$[8]), "true" == $args$jscomp$4_found$jscomp$3_ntot_pilots$$[4] ? TEAMS[2].isia = !0 : (localStorage.imageplayer = $args$jscomp$4_found$jscomp$3_ntot_pilots$$[7], localStorage.playername = $args$jscomp$4_found$jscomp$3_ntot_pilots$$[8]), SETUP = SETUPS[$args$jscomp$4_found$jscomp$3_ntot_pilots$$[5] + " Map"], phase = SELECT_PHASE, 6 < $args$jscomp$4_found$jscomp$3_ntot_pilots$$.length & "" != $args$jscomp$4_found$jscomp$3_ntot_pilots$$[6] && (REPLAY = 
      $args$jscomp$4_found$jscomp$3_ntot_pilots$$[6]), PERMALINK = LZString.compressToEncodedURIComponent(TEAMS[1].toASCII() + "&" + TEAMS[2].toASCII() + "&" + saverock() + "&" + TEAMS[1].isia + "&" + TEAMS[2].isia + "&" + $args$jscomp$4_found$jscomp$3_ntot_pilots$$[5]), nextphase();
    }
    delete localStorage.imageplayer;
    delete localStorage.playername;
    phase = 0;
    nextphase();
    localStorage.getItem("import") && (log("Importing from another Squad Builder..."), currentteam = "" == $("#squad1").val() ? TEAMS[1] : TEAMS[2], currentteam.parseJSON(sessionStorage.getItem("import")), sessionStorage.clear(), endselection());
    SETUP = SETUPS["Classic Map"];
    $("#squadlist").html("<thead><tr><th></th><th>" + UI_translation.type + "</th><th><span class='m-points'></span></th><th><span class='m-units'></span></th><th></th><th></th><th></th></tr></thead>");
    $.fn.dataTable.ext.search.push(function($settings$$, $data$$, $dataIndex$$) {
      return -1 < $data$$[1].search(stype);
    });
    SQUADLIST = $("#squadlist").DataTable({language:{search:UI_translation.Search, lengthMenu:UI_translation["Display _MENU_ records per page"], zeroRecords:UI_translation["Nothing found - sorry"], info:UI_translation["Showing page _PAGE_ of _PAGES_"], infoEmpty:UI_translation["No records available"], infoFiltered:UI_translation["(filtered from _MAX_ total records)"]}, autoWidth:!0, columnDefs:[{targets:[0], render:function() {
      return "<span class='closemiddle' onclick='removerow($(this))'>&times;</span> ";
    }, sortable:!1}, {targets:[6], width:"2em", render:function() {
      return "<span class='squadtop'><span class='squadmiddle' onclick='checkrow(1,$(this))'>1</span>&nbsp;<span class='squadmiddle right' onclick='checkrow(2,$(this))'>2</span></span>";
    }, sortable:!1}, {targets:[5], render:function($d$$, $c$$, $row$$) {
      return "<span class='logmiddle symbols' onclick='battlelog($(this));'>&#xE9;</span>";
    }, sortable:!1}, {targets:[1], sortable:!1, render:function($data$$, $type$$, $row$$) {
      return -1 < $row$$[4].search("SQUAD") ? "<span style='display:none'>" + $data$$ + " USER</span><span class='" + $data$$ + "'></span>" : "ELITE" == $row$$[4] ? "<span style='display:none'>" + $data$$ + " ELITE</span><span class='" + $data$$ + "'></span><span style='font-size:larger'></span><code style='color:orange' class='symbols'>\u00ef</code>" : "<span style='display:none'>" + $data$$ + " PREBUILT</span><span class='" + $data$$ + "'></span><code style='font-size:larger' class='symbols'>\u00ec</code>";
    }}, {targets:[4], visible:!1, searchable:!1}, {targets:[3], render:function($data$$, $type$$, $row$$) {
      "en" != LANG && phase == SELECT_PHASE && -1 == $row$$[4].search("SQUAD") && (TEAMS[0].parseJuggler($data$$, !1), $data$$ = TEAMS[0].toJuggler(!0));
      return $data$$.replace(/\n/g, "<br>");
    }}], ajax:"data/full4b.json", scrollY:"20em", scrollCollapse:!0, deferRender:!0, ordering:!0, info:!0, paging:!0});
    for ($i$$ in localStorage) {
      "string" == typeof localStorage[$i$$] && $i$$.match(/SQUAD.*/) && ($arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$ = $.parseJSON(localStorage[$i$$]), "undefined" == typeof $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$.jug || "undefined" == typeof $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$.pts ? delete localStorage[$i$$] : "en" != LANG ? (TEAMS[0].parseJuggler($arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$.jug, !1), addrow(0, $i$$, $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$.pts, 
      $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$.faction, TEAMS[0].toJuggler(!0), !0)) : addrow(0, $i$$, $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$.pts, $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$.faction, $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$.jug, !0));
    }
    $("#squadlist tr:first-child .squadtop").attr("data-intro", "Select squad").attr("data-position", "bottom");
    $("#squadlist tr:first-child .logmiddle").attr("data-intro", "Battle log").attr("data-position", "left");
    $args$jscomp$4_found$jscomp$3_ntot_pilots$$ = [];
    for ($i$$ = 0;$i$$ < PILOTS.length;$i$$++) {
      $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$ = $i$$, $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$ = translate(PILOTS[$i$$].name), 1 == PILOTS[$i$$].ambiguous && "undefined" != typeof PILOTS[$i$$].edition && ($arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$ += "(" + PILOTS[$i$$].edition + ")"), $args$jscomp$4_found$jscomp$3_ntot_pilots$$.push($arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$.replace(/\'/g, "").replace(/\(Scum\)/g, ""));
    }
    $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$ = [];
    for ($i$$ in UPGRADE_translation) {
      $arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$.push(" " + translate($i$$).replace(/\'/g, "").replace(/\(Crew\)/g, ""));
    }
    $(".squadbg > textarea").asuggest($args$jscomp$4_found$jscomp$3_ntot_pilots$$, {delimiters:"^\n", cycleOnTab:!0});
    $(".squadbg > textarea").asuggest($arg$jscomp$8_j$jscomp$58_l$jscomp$25_n$jscomp$353_name$$, {delimiters:"+", cycleOnTab:!0});
  });
});
function util() {
}
util.getOutlineRange = function $util$getOutlineRange$($rUnit_unit$$, $rTarget_target$$, $obstacles$$) {
  $rUnit_unit$$ = $rUnit_unit$$.getOutlinePoints($rUnit_unit$$.m);
  $rTarget_target$$ = $rTarget_target$$.getOutlinePoints($rTarget_target$$.m);
  var $min$$ = 90001, $i$$, $j$jscomp$59_k$$, $obsructed$$ = !1, $countObstructions$$ = 0, $mini$$, $minj$$;
  for ($i$$ = 0;$i$$ < $rUnit_unit$$.length;$i$$++) {
    for ($j$jscomp$59_k$$ = 0;$j$jscomp$59_k$$ < $rTarget_target$$.length;$j$jscomp$59_k$$++) {
      var $distanceBetweenPoints_dx$$ = dist($rTarget_target$$[$j$jscomp$59_k$$], $rUnit_unit$$[$i$$]);
      $distanceBetweenPoints_dx$$ < $min$$ && ($min$$ = $distanceBetweenPoints_dx$$, $mini$$ = $i$$, $minj$$ = $j$jscomp$59_k$$);
    }
  }
  if (90000 < $min$$) {
    return {distance:4, obstructed:$obsructed$$, obstructionCount:$countObstructions$$};
  }
  var $distanceBetweenPoints_dx$$ = $rTarget_target$$[$minj$$].x - $rUnit_unit$$[$mini$$].x, $dy$$ = $rTarget_target$$[$minj$$].y - $rUnit_unit$$[$mini$$].y, $a$$ = -$rUnit_unit$$[$mini$$].x * $dy$$ + $rUnit_unit$$[$mini$$].y * $distanceBetweenPoints_dx$$;
  if (0 < $obstacles$$.length) {
    for ($j$jscomp$59_k$$ = 0;$j$jscomp$59_k$$ < $obstacles$$.length;$j$jscomp$59_k$$++) {
      if ($obstacles$$[$j$jscomp$59_k$$].type != NONE && $obstacles$$[$j$jscomp$59_k$$].type != BOMB) {
        var $obstaclePoints$$ = $obstacles$$[$j$jscomp$59_k$$].getOutlineString().p;
        if (0 == $obstaclePoints$$.length) {
          break;
        }
        var $s$$ = $obstaclePoints$$[0].x * $dy$$ - $obstaclePoints$$[0].y * $distanceBetweenPoints_dx$$ + $a$$, $v$$ = $s$$;
        for ($i$$ = 1;$i$$ < $obstaclePoints$$.length && !(dist($rTarget_target$$[$minj$$], $obstaclePoints$$[$i$$]) < 1.2 * $min$$ && dist($rUnit_unit$$[$mini$$], $obstaclePoints$$[$i$$]) < 1.2 * $min$$ && ($v$$ = $obstaclePoints$$[$i$$].x * $dy$$ - $obstaclePoints$$[$i$$].y * $distanceBetweenPoints_dx$$ + $a$$, 0 > $v$$ * $s$$));$i$$++) {
        }
        0 > $v$$ * $s$$ && ($obsructed$$ = !0, $countObstructions$$++);
      }
    }
  }
  return 10000 >= $min$$ ? {distance:1, obstructed:$obsructed$$, obstructionCount:$countObstructions$$} : 40000 >= $min$$ ? {distance:2, obstructed:$obsructed$$, obstructionCount:$countObstructions$$} : {distance:3, obstructed:$obsructed$$, obstructionCount:$countObstructions$$};
};
//@ sourceMappingURL=bench.js.map
